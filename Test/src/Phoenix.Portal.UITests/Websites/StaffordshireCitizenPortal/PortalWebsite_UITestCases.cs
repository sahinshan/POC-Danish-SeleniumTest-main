using System;
using System.Configuration;
using System.Linq;
using System.Text;
using NUnit.Framework;


namespace Phoenix.Portal.UITests.Websites.StaffordshireCitizenPortal
{

    public class PortalWebsite_UITestCases : FunctionalTest
    {

        [SetUp()]
        public void TestsSetupMethod()
        {
            #region Default User

            string username = ConfigurationManager.AppSettings["Username"];
            string dataEncoded = ConfigurationManager.AppSettings["DataEncoded"];

            username = commonMethodsDB.UpdateSystemUserLastPasswordChange(username, dataEncoded);
            var defaultSystemUserId = dbHelper.systemUser.GetSystemUserByUserName(username)[0];
            TimeZone localZone = TimeZone.CurrentTimeZone;
            dbHelper.systemUser.UpdateSystemUserTimezone(defaultSystemUserId, localZone.StandardName);

            #endregion
        }

        #region https://advancedcsg.atlassian.net/browse/CDV6-5580

        [Test, Ignore("cloned website used for test automation does not contain the footer area")]
        [Property("JiraIssueID", "CDV6-9807")]
        [Description("Navigate to the portal URL - Validate that the correct footer is displayed")]
        public void WebsiteFooter_TestMethod01()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()

                .ValidateFooterContactUsHeaderText("CONTACT US")
                .ValidateFooterContactUsInformationText("0300 111 8010 (Monday to Friday 9am to 5pm)\r\nstaffordshirecares@staffordshire.gov.uk")

                .ValidatPortalLinksHeadersText("PORTAL LINKS")
                .ValidatePortalLogoVisible(true)
                .ValidatePoweredByCareDirectorText("Powered by CareDirector")

                .ValidatConnectWithUsHeaderText("CONNECT WITH US")
                .ValidateTwitterIconVisible(true)
                .ValidateFacebookIconVisible(true)
                .ValidateInstagramIconVisible(true)
                .ValidateYoutubeIconVisible(true)
                .ValidateFeedbackButtonVisible(true);

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5579

        [Test]
        [Property("JiraIssueID", "CDV6-9794")]
        [Description("Navigate to the portal URL - Validate that the correct css styles are loaded")]
        public void WebsiteCustomThemes_TestMethod01()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ValidateStyleSheetFile("home.css?v=1")

                //.ValidateCssPropertyFortwitterImage("padding", "0px")

                .ValidateCssPropertyForFeedbackImage("float", "none")
                .ValidateCssPropertyForFeedbackImage("margin-top", "0px")
                .ValidateCssPropertyForFeedbackImage("margin-left", "0px")
                .ValidateCssPropertyForFeedbackImage("border-color", "rgb(255, 255, 255)")
                ;

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5581

        [Test]
        [Property("JiraIssueID", "CDV6-9813")]
        [Description("Navigate to the portal URL - Validate that the correct website logo is present")]
        public void WebsiteLogo_TestMethod01()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .ValidateWebsiteLogoPresent("WebsiteLogo.png");
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5589

        [Test]
        [Property("JiraIssueID", "CDV6-9784")]
        [Description("Navigate to the portal URL - Navigate to the Announcements page - Validate that all published Announcement records are displayed")]
        public void WebsiteAnnouncements_TestMethod01()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .ClickAnnouncementsLink();

            announcementsPage
                .WaitForAnnouncementsPageToLoad()

                .ValidateAnnouncementHeader("Website 16 - Announcement 1")
                .ValidateAnnouncementPublishedDate("01/12/2020 07:20:00")
                .ValidateAnnouncementContentLine("Website 16 - Announcement 1 - Content line 1")
                .ValidateAnnouncementContentLine("Website 16 - Announcement 1 - Content line 2")

                .ValidateAnnouncementHeader("Website 16 - Announcement 2")
                .ValidateAnnouncementPublishedDate("01/12/2020 09:50:00")
                .ValidateAnnouncementContentLine("Website 16 - Announcement 2 - Content line 1")
                .ValidateAnnouncementContentLine("Website 16 - Announcement 2 - Content line 2")

                .ValidateAnnouncementHeader("Website 16 - Announcement 3")
                .ValidateAnnouncementPublishedDate("02/12/2020 17:00:00")
                .ValidateAnnouncementContentLine("Website 16 - Announcement 3 - Content line 1")
                .ValidateAnnouncementContentLine("Website 16 - Announcement 3 - Content line 2")
                ;
        }



        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5591

        [Test]
        [Property("JiraIssueID", "CDV6-9814")]
        [Description("Navigate to the portal URL - Click in the Register button - Validate that the user is redirected to the Register page")]
        public void WebsiteRegister_TestMethod01()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad();
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5590

        [Test]
        [Property("JiraIssueID", "CDV6-9795")]
        [Description("Navigate to the portal URL - Click in the FAQ button - Validate that the user is redirected to the Frequently Asked Questions page")]
        public void WebsiteFAQS_TestMethod01()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ClickFrequentlyAskedQuestionsLink();

            faqsPage
                .WaitForFAQSPageLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9796")]
        [Description("Navigate to the portal URL - Click in the FAQ button - On the Frequently Asked Questions page validate that only the top 10 most upvoted questions are displayed")]
        public void WebsiteFAQS_TestMethod02()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ClickFrequentlyAskedQuestionsLink();

            faqsPage
                .WaitForFAQSPageLoad()
                .ValidateFaqVisible("Security - Question SEC21")
                .ValidateFaqVisible("Security - Question SEC20")
                .ValidateFaqVisible("Security - Question SEC19")
                .ValidateFaqVisible("Security - Question SEC18")
                .ValidateFaqVisible("Security - Question SEC17")
                .ValidateFaqVisible("Security - Question SEC16")
                .ValidateFaqVisible("Security - Question SEC15")
                .ValidateFaqVisible("Security - Question SEC14")
                .ValidateFaqVisible("Security - Question SEC13")
                .ValidateFaqVisible("Security - Question SEC12")

                .ValidateFaqNotVisible("Security - Question SEC11")
                .ValidateFaqNotVisible("Security - Question SEC10")
                .ValidateFaqNotVisible("Security - Question SEC9")
                .ValidateFaqNotVisible("Security - Question SEC8")
                .ValidateFaqNotVisible("Security - Question SEC7");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9797")]
        [Description("Navigate to the portal URL - Click in the FAQ button - On the Frequently Asked Questions page validate that all linked categories are displayed")]
        public void WebsiteFAQS_TestMethod03()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                ;

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ClickFrequentlyAskedQuestionsLink();

            faqsPage
                .WaitForFAQSPageLoad()
                .ValidateFaqCategoryVisible("Security")
                .ValidateFaqCategoryVisible("Finance Transactions")
                .ValidateFaqCategoryVisible("Forms")
                .ValidateFaqCategoryVisible("Financial Details")
                .ValidateFaqCategoryVisible("Financial Assessment");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9798")]
        [Description("Navigate to the portal URL - Click in the FAQ button - On the Frequently Asked Questions click on a FAQ record - Validate that the user is redirected to the FAQ details page")]
        public void WebsiteFAQS_TestMethod04()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ClickFrequentlyAskedQuestionsLink();

            faqsPage
                .WaitForFAQSPageLoad()
                .ClickFAQ("Security - Question SEC20");

            faqRecordPage
                .WaitForFAQRecordPageToLoad()
                .ValidateQuestionTitleText("Security - Question SEC20")
                .ValidateQuestionContentTitleText(1, "SEC20 Line 1")
                .ValidateQuestionContentTitleText(2, "SEC20 Line 2")
                .ValidateQuestionContentTitleText(3, "SEC20 Line 3")
                .ValidateQuestionContentTitleText(4, "SEC20 Line 4")
                .ValidateQuestionContentTitleText(5, "SEC20 Line 5")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9799")]
        [Description("Navigate to the portal URL - Click in the FAQ button - On the Frequently Asked Questions click on a FAQ record - on the FAQ record page upvote the question - Validate that the upvote count increases")]
        public void WebsiteFAQS_TestMethod05()
        {
            var faqID = dbHelper.faq.GetByTitle("Security - Question SEC20")[0];
            dbHelper.faq.UpdateFAQ(faqID, 49000, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ClickFrequentlyAskedQuestionsLink();

            faqsPage
                .WaitForFAQSPageLoad()
                .ClickFAQ("Security - Question SEC20");

            faqRecordPage
                .WaitForFAQRecordPageToLoad()
                .ClickHelpfulButton()
                .WaitForThankYouForYourFeedbackMessageVisible();


            var fields = dbHelper.faq.GetFAQByID(faqID, "NumberOfUpvotes", "NumberOfDownvotes");

            Assert.AreEqual(49001, fields["NumberOfUpvotes".ToLower()]);
            Assert.AreEqual(0, fields["NumberOfDownvotes".ToLower()]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9800")]
        [Description("Navigate to the portal URL - Click in the FAQ button - On the Frequently Asked Questions click on a FAQ record - on the FAQ record page downvote the question - Validate that the downvote count increases")]
        public void WebsiteFAQS_TestMethod06()
        {
            var faqID = dbHelper.faq.GetByTitle("Security - Question SEC20")[0];
            dbHelper.faq.UpdateFAQ(faqID, 49000, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ClickFrequentlyAskedQuestionsLink();

            faqsPage
                .WaitForFAQSPageLoad()
                .ClickFAQ("Security - Question SEC20");

            faqRecordPage
                .WaitForFAQRecordPageToLoad()
                .ClickNotHelpfulButton()
                .WaitForThankYouForYourFeedbackMessageVisible();


            var fields = dbHelper.faq.GetFAQByID(faqID, "NumberOfUpvotes", "NumberOfDownvotes");

            Assert.AreEqual(49000, fields["NumberOfUpvotes".ToLower()]);
            Assert.AreEqual(1, fields["NumberOfDownvotes".ToLower()]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9801")]
        [Description("Navigate to the portal URL - Click in the FAQ button - On the Frequently Asked Questions page click on a FAQ category - Validate that the user is redirected to the FAQs by category page (all faqs must belong to the selected category)")]
        public void WebsiteFAQS_TestMethod07()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ClickFrequentlyAskedQuestionsLink();

            faqsPage
                .WaitForFAQSPageLoad()
                .ClickFAQCategory("Finance Transactions");

            faqsByCategoriesPage
                .WaitForFAQSByCategoriesPageToLoad("Finance Transactions")

                .ValidateFaqVisible("Finance Transactions - Question FT3")
                .ValidateFaqVisible("Finance Transactions - Question FT2")
                .ValidateFaqVisible("Finance Transactions - Question FT1")

                .ValidateFaqNotVisible("Security - Question SEC21")
                .ValidateFaqNotVisible("Forms - Question FORM2")
                .ValidateFaqNotVisible("Finance Details - Question FD1")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9802")]
        [Description("Navigate to the portal URL - Click in the FAQ button - On the Frequently Asked Questions page click on a FAQ category - Validate that the user is redirected to the FAQs by category page - Click on a FAQ record - Validate that the user is redirected to the FAQs page")]
        public void WebsiteFAQS_TestMethod08()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ClickFrequentlyAskedQuestionsLink();

            faqsPage
                .WaitForFAQSPageLoad()
                .ClickFAQCategory("Finance Transactions");

            faqsByCategoriesPage
                .WaitForFAQSByCategoriesPageToLoad("Finance Transactions")
                .ClickFAQ("Finance Transactions - Question FT3");

            faqRecordPage
                .WaitForFAQRecordPageToLoad()
                .ValidateQuestionTitleText("Finance Transactions - Question FT3")
                .ValidateQuestionContentTitleText(1, "FT3 Line 1")
                .ValidateQuestionContentTitleText(2, "FT3 Line 2")
                .ValidateQuestionContentTitleText(3, "FT3 Line 3")
                .ValidateQuestionContentTitleText(4, "FT3 Line 4")
                .ValidateQuestionContentTitleText(5, "FT3 Line 5");
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5592

        [Test]
        [Property("JiraIssueID", "CDV6-9808")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Tap on the login button - Validate that an error message is displayed preventing the user completing the login")]
        public void WebsiteLoginOption_TestMethod01()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickLoginButton()

                .ValidateEmailAddressErrorMessageVisible(true)
                .ValidateEmailAddressErrorMessage("Email address is required")
                .ValidatePasswordErrorMessageVisible(true)
                .ValidatePasswordErrorMessage("Password is required")
                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("All fields have to be completed: Please try again.");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9809")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a valid username - Tap on the login button - Validate that an error message is displayed preventing the user completing the login")]
        public void WebsiteLoginOption_TestMethod02()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .ClickLoginButton()

                .ValidateEmailAddressErrorMessageVisible(false)
                .ValidatePasswordErrorMessageVisible(true)
                .ValidatePasswordErrorMessage("Password is required")
                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("All fields have to be completed: Please try again.");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9810")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a valid username - Insert an invalid password - Tap on the login button - Validate that an error message is displayed preventing the user completing the login")]
        public void WebsiteLoginOption_TestMethod03()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("wrongpassword")
                .ClickLoginButton()

                .ValidateEmailAddressErrorMessageVisible(false)
                .ValidatePasswordErrorMessageVisible(false)
                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("The user name or password is incorrect.");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9811")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert an invalid username - Insert any value in the password field - Tap on the login button - Validate that an error message is displayed preventing the user completing the login")]
        public void WebsiteLoginOption_TestMethod04()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("wrongemail@mail.com")
                .InsertPassword("wrongpassword")
                .ClickLoginButton()

                .ValidateEmailAddressErrorMessageVisible(false)
                .ValidatePasswordErrorMessageVisible(false)
                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("The user name or password is incorrect.");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9812")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert an valid username - Insert a valid password - Tap on the login button - Validate that the user is redirected to the member home page")]
        public void WebsiteLoginOption_TestMethod05()
        {
            Guid websiteID = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteID, false, null, null, null, null); //deactivate 2 factor auth in the website

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5582

        [Test]
        [Property("JiraIssueID", "CDV6-9785")]
        [Description("Navigate to the portal URL - Wait for the Home Page to load - " +
            "Validate that the anonymous sitemap is displayed")]
        public void WebsiteClientPortalNavigation_TestMethod01()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .WaitForAnonymousSitemapMainMenuToLoad()
                .ValidateHomeLinkVisibility(true)
                .ValidateFrequentlyAskedQuestionsLinkVisibility(true)
                .ValidateAnnouncementsLinkVisibility(true)
                .ValidateContactUsVisibility(true)

                .ValidateMemberHomeLinkVisibility(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9786")]
        [Description("Navigate to the portal URL - Wait for the Home Page to load - Login with a user with full permissions - " +
            "Validate that the Authenticated sitemap is displayed")]
        public void WebsiteClientPortalNavigation_TestMethod02()
        {
            Guid websiteID = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteID, false, null, null, null, null); //deactivate 2 factor auth in the website

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()

                .ValidateMemberHomeLinkVisibility(true)
                .ValidateFrequentlyAskedQuestionsLinkVisibility(true)
                .ValidateAnnouncementsLinkVisibility(true)
                .ValidateContactUsVisibility(true)

                .ValidateHomeLinkVisibility(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9787")]
        [Description("Navigate to the portal URL - Wait for the Home Page to load - Login with a user with partial permissions (financial assessment page not included in permissions) - " +
            "Validate that the Authenticated sitemap is displayed without the financial assessment page")]
        public void WebsiteClientPortalNavigation_TestMethod03()
        {
            Guid websiteID = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteID, false, null, null, null, null); //deactivate 2 factor auth in the website

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser2@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad(false, true, true, false);

            mainMenu
                .WaitForMainMenuToLoad()

                .ValidateMemberHomeLinkVisibility(true)
                .ValidateFrequentlyAskedQuestionsLinkVisibility(true)
                .ValidateAnnouncementsLinkVisibility(true)
                .ValidateContactUsVisibility(true)

                .ValidateHomeLinkVisibility(false)
                .ValidateFinancialAssessmentVisibility(false);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5594

        [Test]
        [Property("JiraIssueID", "CDV6-9658")]
        [Description("Navigate to the portal URL - Click on the forgot password link - validate that the user is redirected to the forgot password page")]
        public void ForgotPassword_TestMethod01()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickForgotPasswordLink();

            forgotPasswordPage
                .WaitForForgotPasswordPageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9659")]
        [Description("Navigate to the portal URL - Click on the forgot password link - On the Forgot Password page insert a user email address - click on the reset password button - " +
            "Validate that a message is displayed to the user informing him that the if the email is valid then a reset email was sent to his account")]
        public void ForgotPassword_TestMethod02()
        {
            Guid websiteID = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            dbHelper.website.UpdateRobotSecurityType(websiteID, null); //deactivate robot security for the website

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickForgotPasswordLink();

            forgotPasswordPage
                .WaitForForgotPasswordPageToLoad()
                .InsertEmailAddress("website16user2@mail.com")
                .ClickResetPasswordButton()
                .ValidateConfirmationMessageVisible();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9660")]
        [Description("Navigate to the portal URL - Click on the forgot password link - On the Forgot Password page insert a user email address - click on the reset password button - " +
            "Validate that a Website User Password Reset record is created - " +
            "Validate that an email record is created and associated with the Person profile linked to the user")]
        public void ForgotPassword_TestMethod03()
        {
            var personid = new Guid("9dbd921b-58de-4e54-bb56-a57732b73ac3"); // Elvia Lancaster
            var websiteUserID = new Guid("c54cc3eb-c45f-eb11-a306-005056926fe4"); // StaffordshireCitizenPortalUser3@mail.com

            //remove all Website User Password Resets
            foreach (var resetPassId in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetPassId);

            //remove all emails associated with the person
            foreach (var emailid in dbHelper.email.GetEmailByRegardingID(websiteUserID))
                dbHelper.email.DeleteEmail(emailid);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickForgotPasswordLink();

            forgotPasswordPage
                .WaitForForgotPasswordPageToLoad()
                .InsertEmailAddress("StaffordshireCitizenPortalUser3@mail.com")
                .ClickResetPasswordButton()
                .ValidateConfirmationMessageVisible();

            var passwordResetRecords = dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID);
            Assert.AreEqual(1, passwordResetRecords.Count);
            string expectedResetLink = "https://phoenixqa-consumer.careworks.ie/reset-password?id=" + passwordResetRecords[0].ToString();

            var fields = dbHelper.websiteUserPasswordReset.GetByID(passwordResetRecords[0], "resetpasswordlink", "expireon");
            Assert.AreEqual(expectedResetLink, fields["resetpasswordlink"]);
            Assert.IsTrue(((DateTime)fields["expireon"]).ToLocalTime() > DateTime.Now);

            var emails = dbHelper.email.GetEmailByRegardingID(websiteUserID);
            Assert.AreEqual(1, emails.Count);

            var emailto = dbHelper.emailTo.GetByEmailAndRegardingID(emails[0], personid);
            Assert.AreEqual(1, emailto.Count);

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6140 & https://advancedcsg.atlassian.net/browse/CDV6-6318

        [Test]
        [Property("JiraIssueID", "CDV6-9732")]
        [Description("Precondition - website user has a 'Website User Password Reset' record that expires in a future date - " +
            "Navigate to the URL provided by in the 'Website User Password Reset' record - Validate that the Reset Password page is displayed.")]
        public void ResetPassword_TestMethod01()
        {
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);

            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9733")]
        [Description("Navigate to the Reset Password page with an id that will not match any password reset record - Validate that the reset password page is displayed with an error message")]
        public void ResetPassword_TestMethod02()
        {
            var resetPasswordLink = appURL + "reset-password?id=" + Guid.NewGuid().ToString();

            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordErrorPageToLoad("Enter your current and new password")
                .ValidateGeneralErrorMessageVisible()
                .ValidateGeneralErrorMessageText("The Password Reset Link that you are using is expired.");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9734")]
        [Description("Precondition - website user has a 'Website User Password Reset' record that expires in a future date - " +
            "Navigate to the URL provided by in the 'Website User Password Reset' record - " +
            "Insert a matching New Password and Repeat New Password - Tap on the Reset Password button - " +
            "Validate that the password has changed.")]
        public void ResetPassword_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset user password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("NewPassw0rd_!")
                .InsertRepeatNewPassword("NewPassw0rd_!")
                .ClickResetPasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible();

            var fields = dbHelper.websiteUser.GetByID(websiteUserID, "password");
            Assert.AreEqual("LpgUsCdjXJ4uWnbAQWHRqWYHlxpNwHb23n69f24zmLM=", fields["password"]); //Validate that the password was reseted
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9735")]
        [Description("Precondition - website user has a 'Website User Password Reset' record that expires in a future date - " +
            "Navigate to the URL provided by in the 'Website User Password Reset' record - " +
            "Insert a matching New Password and Repeat New Password - Tap on the Reset Password button - " +
            "Click on the Go to Home Page link - Validate that the user is redirected to the home page")]
        public void ResetPassword_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("NewPassw0rd_!")
                .InsertRepeatNewPassword("NewPassw0rd_!")
                .ClickResetPasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible()
                .ClickGoToHomePageLink();

            homePage
                .WaitForHomePageToLoad();

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9736")]
        [Description("Precondition - website user has a 'Website User Password Reset' record that expires in a future date - " +
            "Navigate to the URL provided by in the 'Website User Password Reset' record - " +
            "Insert a New Password that do not match the Repeat New Password - Tap on the Reset Password button - " +
            "Validate that an error is displayed to the user")]
        public void ResetPassword_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("NewPassw0rd_!")
                .InsertRepeatNewPassword("NotMatchingNewPassw0rd_!")
                .ClickResetPasswordButton()

                .ValidateErrorMessageVisible()
                .ValidateErrorMessageText("New Password did not match: Please try again.");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9737")]
        [Description("Precondition - website user has a 'Website User Password Reset' record that expires in a future date - " +
            "Navigate to the URL provided by in the 'Website User Password Reset' record - " +
            "Insert a matching New Password and Repeat New Password - Tap on the Reset Password button - " +
            "Validate that the 'Website User Password Reset' record is deleted")]
        public void ResetPassword_TestMethod07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("NewPassw0rd_!")
                .InsertRepeatNewPassword("NewPassw0rd_!")
                .ClickResetPasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible();

            var resetrecords = dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID);
            Assert.AreEqual(0, resetrecords.Count);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6306

        [Test]
        [Property("JiraIssueID", "CDV6-9699")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Password Length' is set to 5" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert 'New Password' with less than 5 characters - Validate that an error message is displayed to the user")]
        public void PasswordRules_MinimumPasswordLength_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("abcd")
                .InsertRepeatNewPassword("abcd")

                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(true)
                .ValidateRepeatNewPasswordErrorSpanVisible(true)

                .ValidateNewPasswordErrorSpanText("New Password is too short (minimum is 5 characters)");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9700")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Password Length' is set to 5" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert 'Repeat New Password' with less than 5 characters - Validate that an error message is displayed to the user")]
        public void PasswordRules_MinimumPasswordLength_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("abcde")
                .InsertRepeatNewPassword("abcd")

                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(true)

                .ValidateRepeatNewPasswordErrorSpanText("Repeat New Password is too short (minimum is 5 characters)");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9701")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Password Length' is set to 5" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert 'New Password' and 'Repeat New Password' with more than 5 characters - Tap on the reset button - Validate that the user password is changed")]
        public void PasswordRules_MinimumPasswordLength_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("NewPassw0rd_!")
                .InsertRepeatNewPassword("NewPassw0rd_!")
                .ClickResetPasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible();

            var fields = dbHelper.websiteUser.GetByID(websiteUserID, "password");
            Assert.AreEqual("LpgUsCdjXJ4uWnbAQWHRqWYHlxpNwHb23n69f24zmLM=", fields["password"]); //Validate that the password was reseted
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9702")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Password Length' is set to 5" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert 'New Password' with less than 5 characters - " +
            "Validate that the Warning Area (bottom) contains information regarding the invalid password length")]
        public void PasswordRules_MinimumPasswordLength_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("abcd")
                .InsertRepeatNewPassword("abcd")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(true)
                .ValidateRepeatNewPasswordErrorSpanVisible(true)

                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinLengthVisible(true)
                .ValidatePasswordPromptTitleText("Password Must be between 5 and 20 characters in length and contain:")
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")
                .ValidatePasswordPromptMinLengthIconValid(false);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6306

        [Test]
        [Property("JiraIssueID", "CDV6-9695")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Numeric Characters' is set to 1" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert the Current Password - Insert 'New Password' with no numeric characters - Validate that an error message is displayed to the user")]
        public void PasswordRules_MinimumNumericCharacters_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("abcde")
                .InsertRepeatNewPassword("abcde")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(false)

                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinNumIconValid(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9696")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Numeric Characters' is set to 1" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert the Current Password - Insert 'New Password' with one numeric characters - Validate that no error message is displayed to the user")]
        public void PasswordRules_MinimumNumericCharacters_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("ab1")
                .InsertRepeatNewPassword("ab1")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(true)
                .ValidateRepeatNewPasswordErrorSpanVisible(true)

                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinNumIconValid(true);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6310

        [Test]
        [Property("JiraIssueID", "CDV6-9704")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Special Characters' is set to 1" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert the Current Password - Insert 'New Password' with no special characters - Validate that an error message is displayed to the user")]
        public void PasswordRules_MinimumSpecialCharacters_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("abcde")
                .InsertRepeatNewPassword("abcde")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(false)

                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinSpecialCharIconValid(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9703")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Special Characters' is set to 1" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert the Current Password - Insert 'New Password' with one special characters - Validate that no error message is displayed to the user")]
        public void PasswordRules_MinimumSpecialCharacters_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("ab1?")
                .InsertRepeatNewPassword("ab1?")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(true)
                .ValidateRepeatNewPasswordErrorSpanVisible(true)

                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinSpecialCharIconValid(true);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6312

        [Test]
        [Property("JiraIssueID", "CDV6-9705")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Upper Characters' is set to 1" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert the Current Password - Insert 'New Password' with no Upper characters - Validate that an error message is displayed to the user")]
        public void PasswordRules_MinimumUpperCharacters_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("abce")
                .InsertRepeatNewPassword("abce")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(true)
                .ValidateRepeatNewPasswordErrorSpanVisible(true)

                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinUpperIconValid(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9706")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Upper Characters' is set to 1" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert the Current Password - Insert 'New Password' with one Upper characters - Validate that no error message is displayed to the user")]
        public void PasswordRules_MinimumUpperCharacters_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("Ab1?")
                .InsertRepeatNewPassword("Ab1?")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(true)
                .ValidateRepeatNewPasswordErrorSpanVisible(true)

                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinUpperIconValid(true);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6315

        [Test]
        [Property("JiraIssueID", "CDV6-9682")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password (website user has an expired password) - " +
            "Tap on the login button - Validate that the user is redirected to the reset password page")]
        public void PasswordRules_MaximumPasswordAge_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("243826c5-e45f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser5@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to a date that make it expired
            DateTime lastpasswordchangeddate = new DateTime(2020, 1, 1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser5@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9683")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password (website user has an expired password) - " +
            "Tap on the login button - wait for the change password page to load - insert a new password with less than 5 characters - " +
            "Validate that an error message is displayed to the user")]
        public void PasswordRules_MaximumPasswordAge_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("243826c5-e45f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser5@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to a date that make it expired
            DateTime lastpasswordchangeddate = new DateTime(2020, 1, 1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser5@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();
            
            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertNewPassword("a")
                .InsertRepeatNewPassword("a")
                .ClickChangePasswordButton()

                .ValidateNewPasswordErrorSpanVisible(true)
                .ValidateRepeatNewPasswordErrorSpanVisible(true)
                .ValidateNewPasswordErrorSpanText("New password is too short (minimum is 5 characters)")
                .ValidateRepeatNewPasswordErrorSpanText("Repeat New Password is too short (minimum is 5 characters)")

                .ValidateErrorMessageVisible()
                .ValidateErrorMessageText("The Password requires 5 Minimum length.")

                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinUpperIconValid(false)
                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinNumIconValid(false)
                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinSpecialCharIconValid(false)
                .ValidatePasswordPromptMinLengthVisible(true)
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")
                .ValidatePasswordPromptMinLengthIconValid(false)

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9684")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password (website user has an expired password) - " +
            "Tap on the login button - wait for the change password page to load - insert a new password and repeat the password with no Upper Case characters - " +
            "Validate that an error message is displayed to the user")]
        public void PasswordRules_MaximumPasswordAge_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("243826c5-e45f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser5@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to a date that make it expired
            DateTime lastpasswordchangeddate = new DateTime(2020, 1, 1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser5@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertNewPassword("abcde")
                .InsertRepeatNewPassword("abcde")
                .ClickChangePasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(false)

                .ValidateErrorMessageVisible()
                .ValidateErrorMessageText("The Password requires 1 Minimum Uppercase Letters.")

                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinUpperIconValid(false)
                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinNumIconValid(false)
                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinSpecialCharIconValid(false)
                .ValidatePasswordPromptMinLengthVisible(true)
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")
                .ValidatePasswordPromptMinLengthIconValid(true)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9685")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password (website user has an expired password) - " +
            "Tap on the login button - wait for the change password page to load - insert a new password and repeat the password with no numeric characters - " +
            "Validate that an error message is displayed to the user")]
        public void PasswordRules_MaximumPasswordAge_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("243826c5-e45f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser5@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to a date that make it expired
            DateTime lastpasswordchangeddate = new DateTime(2020, 1, 1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser5@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertNewPassword("Abcde")
                .InsertRepeatNewPassword("Abcde")
                .ClickChangePasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(false)

                .ValidateErrorMessageVisible()
                .ValidateErrorMessageText("The Password requires 1 Minimum Numeric Characters.")



                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinUpperIconValid(true)
                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinNumIconValid(false)
                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinSpecialCharIconValid(false)
                .ValidatePasswordPromptMinLengthVisible(true)
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")
                .ValidatePasswordPromptMinLengthIconValid(true)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9686")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password (website user has an expired password) - " +
            "Tap on the login button - wait for the change password page to load - insert a new password and repeat the password with no special characters - " +
            "Validate that an error message is displayed to the user")]
        public void PasswordRules_MaximumPasswordAge_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("243826c5-e45f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser5@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to a date that make it expired
            DateTime lastpasswordchangeddate = new DateTime(2020, 1, 1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser5@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertNewPassword("Abcde00")
                .InsertRepeatNewPassword("Abcde00")
                .ClickChangePasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(false)

                .ValidateErrorMessageVisible()
                .ValidateErrorMessageText("The Password requires 1 Minimum Special Characters.")

                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinUpperIconValid(true)
                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinNumIconValid(true)
                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinSpecialCharIconValid(false)
                .ValidatePasswordPromptMinLengthVisible(true)
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")
                .ValidatePasswordPromptMinLengthIconValid(true)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9687")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password (website user has an expired password) - " +
            "Tap on the login button - wait for the change password page to load - insert a valid new password and repeat the password - Tap on the Change password button - " +
            "Validate that a success message is displayed to the user and the Go to Home page link is visible")]
        public void PasswordRules_MaximumPasswordAge_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("243826c5-e45f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser5@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all password history records
            foreach (var historyRecordID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyRecordID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to a date that make it expired
            DateTime lastpasswordchangeddate = new DateTime(2020, 1, 1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser5@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertNewPassword("Passw0rd_!00")


                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinUpperIconValid(true)
                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinNumIconValid(true)
                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinSpecialCharIconValid(true)
                .ValidatePasswordPromptMinLengthVisible(true)
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")
                .ValidatePasswordPromptMinLengthIconValid(true)

                .InsertRepeatNewPassword("Passw0rd_!00")
                .ClickChangePasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9688")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password (website user has an expired password) - " +
            "Tap on the login button - wait for the change password page to load - insert a valid new password and repeat the password - Tap on the Change password button - " +
            "wait for the success message to be displayed - tap on the Go to Home Page link - Validate that the user is redirected to the member home page")]
        public void PasswordRules_MaximumPasswordAge_TestMethod07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("243826c5-e45f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser5@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all password history records
            foreach (var historyRecordID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyRecordID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to a date that make it expired
            DateTime lastpasswordchangeddate = new DateTime(2020, 1, 1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            //remove all password history records
            foreach (var historyRecordID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyRecordID);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser5@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertNewPassword("Passw0rd_!00")
                .InsertRepeatNewPassword("Passw0rd_!00")
                .ClickChangePasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible()
                .ClickGoToHomePageLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6315

        [Test]
        [Property("JiraIssueID", "CDV6-9679")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Enforce Password History' is set to 2 - User has 2 Website User Password History record - " +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert and confirm the new password using the one of the passwords stored in the history records - " +
            "Click on the change password button - Validate that the user is prevented from saving the record")]
        public void PasswordRules_EnforcePasswordHistory_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("08322d7b-e65f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser6@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //reset the password policies
            dbHelper.website.UpdatePasswordPolicy(websiteid, 100, 0, 2, 20);


            //remove all historical passwords
            foreach (var historyId in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyId);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //remove all historical passwords
            foreach (var historyId in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyId);

            //create password history record for Passw0rd_!0
            dbHelper.websiteUserPasswordHistory.CreateWebsiteUserPasswordHistory(websiteUserID, "Bz/XUUiAnXFpklRyTiCfN4zOhcDQqzpp4YqyrNBZDuI=");

            //create password history record for Passw0rd_!1
            dbHelper.websiteUserPasswordHistory.CreateWebsiteUserPasswordHistory(websiteUserID, "2k4CK0+H35gY2ti9umTzJmGcM/aa+5CCaUQPuk/0nd0=");




            //remove all password reset files
            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);


            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);




            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("Passw0rd_!0")
                .InsertRepeatNewPassword("Passw0rd_!0")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(false)

                .ValidateErrorMessageVisible()
                .ValidateErrorMessageText("The password you entered has been already used.");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9680")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Enforce Password History' is set to 2 - User has 2 Website User Password History record - " +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert and confirm the new password that is not stored in the historical records - " +
            "Click on the change password button - Validate that the user is able to change is password.")]
        public void PasswordRules_EnforcePasswordHistory_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("08322d7b-e65f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser6@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //reset the password policies
            dbHelper.website.UpdatePasswordPolicy(websiteid, 100, 0, 2, 20);


            //remove all historical passwords
            foreach (var historyId in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyId);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");



            //remove all historical passwords
            foreach (var historyId in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyId);

            //create password history record for Passw0rd_!0
            dbHelper.websiteUserPasswordHistory.CreateWebsiteUserPasswordHistory(websiteUserID, "Bz/XUUiAnXFpklRyTiCfN4zOhcDQqzpp4YqyrNBZDuI=");

            //create password history record for Passw0rd_!1
            dbHelper.websiteUserPasswordHistory.CreateWebsiteUserPasswordHistory(websiteUserID, "2k4CK0+H35gY2ti9umTzJmGcM/aa+5CCaUQPuk/0nd0=");




            //remove all password reset files
            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);


            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);




            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("Passw0rd_!2")
                .InsertRepeatNewPassword("Passw0rd_!2")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(false)

                .ValidateSuccessMessageVisible()
                .ValidateGoToHomePageLinkVisible();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9681")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Enforce Password History' is set to 2 - User has 2 Website User Password History record - " +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert and confirm the new password that is not stored in the historical records - " +
            "Click on the change password button - Validate that the user is able to change is password - " +
            "Validate that the original password is stored in the historical records")]
        public void PasswordRules_EnforcePasswordHistory_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("08322d7b-e65f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser6@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //reset the password policies
            dbHelper.website.UpdatePasswordPolicy(websiteid, 100, 0, 2, 20);


            //remove all historical passwords
            foreach (var historyId in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyId);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");



            //remove all historical passwords
            foreach (var historyId in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyId);

            //create password history record for Passw0rd_!0
            dbHelper.websiteUserPasswordHistory.CreateWebsiteUserPasswordHistory(websiteUserID, "Bz/XUUiAnXFpklRyTiCfN4zOhcDQqzpp4YqyrNBZDuI=");

            //create password history record for Passw0rd_!1
            dbHelper.websiteUserPasswordHistory.CreateWebsiteUserPasswordHistory(websiteUserID, "2k4CK0+H35gY2ti9umTzJmGcM/aa+5CCaUQPuk/0nd0=");




            //remove all password reset files
            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);


            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);




            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()


                .InsertNewPassword("Passw0rd_!2")
                .InsertRepeatNewPassword("Passw0rd_!2")
                .ClickResetPasswordButton()

                .ValidateNewPasswordErrorSpanVisible(false)
                .ValidateRepeatNewPasswordErrorSpanVisible(false)

                .ValidateSuccessMessageVisible()
                .ValidateGoToHomePageLinkVisible();


            foreach (var passwordHistoryRecordID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
            {
                var fields = dbHelper.websiteUserPasswordHistory.GetByID(passwordHistoryRecordID, "password");

                if (fields["password"].Equals("nodWuxwI4x+cPye7ucJnEmIomjxyyGdSf5aYtGT9SLM="))
                    return;
            }
            Assert.Fail("Old password was not stored as an historical record");

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6314

        [Test]
        [Property("JiraIssueID", "CDV6-9707")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - " +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Validate that the Password Complexity Prompt is displayed")]
        public void PasswordRules_PasswordComplexityPrompt_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("08322d7b-e65f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser6@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all password reset files
            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);




            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("a")

                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinLengthVisible(true)

                .ValidatePasswordPromptTitleText("Password Must be between 5 and 20 characters in length and contain:")
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")

                .ValidatePasswordPromptMinUpperIconValid(false)
                .ValidatePasswordPromptMinNumIconValid(false)
                .ValidatePasswordPromptMinSpecialCharIconValid(false)
                .ValidatePasswordPromptMinLengthIconValid(false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9708")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password (website user has an expired password) - " +
            "Tap on the login button - User is redirected to the change password page - Validate that the Password Complexity Prompt is displayed")]
        public void PasswordRules_PasswordComplexityPrompt_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("08322d7b-e65f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser6@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);


            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to a date that make it expired
            DateTime lastpasswordchangeddate = new DateTime(2020, 1, 1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser6@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()

                .InsertNewPassword("a")

                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinLengthVisible(true)

                .ValidatePasswordPromptTitleText("Password Must be between 5 and 20 characters in length and contain:")
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")

                .ValidatePasswordPromptMinUpperIconValid(false)
                .ValidatePasswordPromptMinNumIconValid(false)
                .ValidatePasswordPromptMinSpecialCharIconValid(false)
                .ValidatePasswordPromptMinLengthIconValid(false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9709")]
        [Description("Navigate to the portal URL - Click on the Register New Account button - Wait for the registration page to be displayed - Validate that the Password Complexity Prompt is displayed")]
        public void PasswordRules_PasswordComplexityPrompt_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertPassword("a")

                .ValidatePasswordPromptTitleVisible(true)
                .ValidatePasswordPromptMinUpperVisible(true)
                .ValidatePasswordPromptMinNumVisible(true)
                .ValidatePasswordPromptMinSpecialCharVisible(true)
                .ValidatePasswordPromptMinLengthVisible(true)

                .ValidatePasswordPromptTitleText("Password Must be between 5 and 20 characters in length and contain:")
                .ValidatePasswordPromptMinUpperText("A minimum of 1 capital letters")
                .ValidatePasswordPromptMinNumText("A minimum of 1 numeric characters")
                .ValidatePasswordPromptMinSpecialCharText("A minimum of 1 of the following special characters: #?!@$%^&*-")
                .ValidatePasswordPromptMinLengthText("A minimum of 5 characters")

                .ValidatePasswordPromptMinUpperIconValid(false)
                .ValidatePasswordPromptMinNumIconValid(false)
                .ValidatePasswordPromptMinSpecialCharIconValid(false)
                .ValidatePasswordPromptMinLengthIconValid(false);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6316

        [Test]
        [Property("JiraIssueID", "CDV6-9697")]
        [Description("Website user last password change is set to today´s data - " +
            "Navigate to the portal URL - Wait for the home page to load - Insert the username and password - Tap on the login button - " +
            "Wait for the member home page to load - Navigate to the change password page - " +
            "Validate that no field are displayed - Validate that a warning message is displayed says that the elapsed time to change the password is not over yet")]
        public void PasswordRules_MinimumPasswordAge_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("08322d7b-e65f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser6@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //reset the password policies
            dbHelper.website.UpdatePasswordPolicy(websiteid, 100, 1, 2, 20);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //update the website user Last Password Changed Date
            var lastpasswordchangeddate = DateTime.Now;
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser6@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickChangePasswordButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoadEmpty()
                .ValidateWarningMessageVisibility(true)
                .ValidateWarningMessageText("You cannot change your password within 1 days of setting your current password");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9698")]
        [Description("Website user last password change is set to two days in the past - " +
           "Navigate to the portal URL - Wait for the home page to load - Insert the username and password - Tap on the login button - " +
           "Wait for the member home page to load - Navigate to the change password page - " +
           "Validate that the page is displayed with all fields - Validate that no warning message is displayed ")]
        public void PasswordRules_MinimumPasswordAge_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("08322d7b-e65f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser6@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //reset the password policies
            dbHelper.website.UpdatePasswordPolicy(websiteid, 100, 1, 2, 20);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //update the website user Last Password Changed Date
            var lastpasswordchangeddate = DateTime.Now.AddDays(-2);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser6@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();


            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickChangePasswordButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .ValidateWarningMessageVisibility(false);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6282

        [Test]
        [Property("JiraIssueID", "CDV6-9718")]
        [Description("Navigate to the portal URL - Click in the Register button - Validate that the user is redirected to the Register page")]
        public void RegistrationPage_TestMethod01()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9719")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the Register page to load - Insert an email address - Validate that the consent message is displayed")]
        public void RegistrationPage_TestMethod02()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()
                .InsertEmailAddress("temmailaddress@mail.com")
                .ClickOnPasswordField()
                .ValidateEmailAddressFieldWarningVisible(true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9720")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the Register page to load - Insert an invalid email address - Validate that an error warning is displayed")]
        public void RegistrationPage_TestMethod03()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()
                .InsertEmailAddress("invalidemail")
                .ClickOnPasswordField()
                .ValidateEmailAddressFieldErrorText("Email address must be a valid email address");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9721")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the Register page to load - Tap on the Register button - " +
            "Validate that the error spans are displayed for the fields Email Address, Password, Repeat Password, First Name, Last Name, DOB, Gender, Ethnicity, Postcode")]
        public void RegistrationPage_TestMethod04()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()
                .ClickOnRegisterButton()

                .ValidateEmailAddressFieldErrorVisible(true)
                .ValidatePasswordFieldErrorVisible(true)
                .ValidateRepeatPasswordFieldErrorVisible(true)
                .ValidateFirstNameFieldErrorVisible(true)
                .ValidateLastNameFieldErrorVisible(true)
                .ValidateDateOfBirthFieldErrorVisible(true)
                .ValidateGenderFieldErrorVisible(true)
                .ValidateEthnicityFieldErrorVisible(true)
                .ValidatePostcodeFieldErrorVisible(true)

                .ValidateEmailAddressFieldErrorText("Email address is required")
                .ValidatePasswordFieldErrorText("Password is required")
                .ValidateRepeatPasswordFieldErrorText("Repeat Password is required")
                .ValidateFirstNameFieldErrorText("First Name is required")
                .ValidateLastNameFieldErrorText("Last Name is required")
                .ValidateDateOfBirthFieldErrorText("Date of Birth is required")
                .ValidateGenderFieldErrorText("Gender is required")
                .ValidateEthnicityFieldErrorText("Ethnicity is required")
                .ValidatePostcodeFieldErrorText("Postcode is required")

                ;
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6287

        [Test]
        [Property("JiraIssueID", "CDV6-9712")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - Set data in all fields - " +
            "Click on the save Register button - Validate that a new person and website user records are created")]
        public void RegistrationCreatingPersonRecord_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //remove any matching website user
            foreach (var websiteuserid in dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser7@mail.com"))
                dbHelper.websiteUser.DeleteWebsiteUser(websiteuserid);

            //remove any matching person record
            foreach (var personid in dbHelper.person.GetByPrimaryEmail("StaffordshireCitizenPortalUser7@mail.com"))
            {
                dbHelper.person.UpdateLinkedAddress(personid, null);

                foreach (var addressid in dbHelper.personAddress.GetByPersonId(personid))
                    dbHelper.personAddress.DeletePersonAddress(addressid);

                foreach (var portaltask in dbHelper.portalTask.GetByTargetUserId(personid))
                    dbHelper.portalTask.DeletePortalTask(portaltask);
                
                //remove all emails for the person
                foreach (var emailid in dbHelper.email.GetEmailByRegardingID(personid))
                    dbHelper.email.DeleteEmail(emailid);

                //remove all service provisions for the person
                foreach (var serviceProvisionid in dbHelper.serviceProvision.GetServiceProvisionByPersonID(personid))
                    dbHelper.serviceProvision.DeleteServiceProvision(serviceProvisionid);

                dbHelper.person.DeletePerson(personid);
            }



            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress("StaffordshireCitizenPortalUser7@mail.com")
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")

                .InsertFirstName("Antonyett")
                .InsertLastName("Brandon")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")
                .InsertNationalInsuranceNumber("1234567890")

                .InsertPropertyName("pna")
                .InsertPropertyNo("pno")
                .InsertStreet("st")
                .InsertVillageDistrict("vil")
                .InsertTownCity("tow")
                .InsertCounty("cou")
                .InsertPostcode("postc")
                .InsertHomePhone("123456")
                .InsertMobilePhone("654321")

                .ClickOnRegisterButton();

            registrationSuccessPage
                .WaitForRegistrationSuccessPageToLoad()
                .ValidateSuccessMessageText("An email has been sent to StaffordshireCitizenPortalUser7@mail.com to complete the registration. Please click the link in that email to continue. Emails may take up to 5 minutes to be delivered, please check your spam folder if the email has not arrived.");

            var personRecords = dbHelper.person.GetByPrimaryEmail("StaffordshireCitizenPortalUser7@mail.com");
            Assert.AreEqual(1, personRecords.Count);

            var fields = dbHelper.person.GetPersonById(personRecords[0], "ownerid", "inactive", "firstname", "lastname", "dateofbirth", "genderid", "homephone", "mobilephone", "fullname", "nationalinsurancenumber", "ethnicityid", "fulladdress", "propertyname", "addresstypeid", "addressline1", "addressline2", "addressline3", "addressline4", "addressline5", "postcode", "primaryemail", "nationalinsurancenumber", "linkedaddressid");
            Assert.AreEqual(new Guid("B6060DFA-7333-43B2-A662-3D9CADAB12E5"), fields["ownerid"]);
            Assert.AreEqual(false, fields["inactive"]);
            Assert.AreEqual("Antonyett", fields["firstname"]);
            Assert.AreEqual("Brandon", fields["lastname"]);
            Assert.AreEqual(new DateTime(2000, 1, 1), fields["dateofbirth"]);
            Assert.AreEqual(1, fields["genderid"]);
            Assert.AreEqual("123456", fields["homephone"]);
            Assert.AreEqual("654321", fields["mobilephone"]);
            Assert.AreEqual("Antonyett Brandon", fields["fullname"]);
            Assert.AreEqual("1234567890", fields["nationalinsurancenumber"]);
            Assert.AreEqual(new Guid("32173323-A43E-EA11-A2C8-005056926FE4"), fields["ethnicityid"]);
            Assert.AreEqual("pna, pno, st, vil, tow, cou, postc", fields["fulladdress"]);
            Assert.AreEqual("pna", fields["propertyname"]);
            Assert.AreEqual(10, fields["addresstypeid"]);
            Assert.AreEqual("pno", fields["addressline1"]);
            Assert.AreEqual("st", fields["addressline2"]);
            Assert.AreEqual("vil", fields["addressline3"]);
            Assert.AreEqual("tow", fields["addressline4"]);
            Assert.AreEqual("cou", fields["addressline5"]);
            Assert.AreEqual("postc", fields["postcode"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser7@mail.com", fields["primaryemail"]);
            Assert.AreEqual("1234567890", fields["nationalinsurancenumber"]);
            Assert.IsNotNull(fields["linkedaddressid"]);


            var websiteUserRecords = dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser7@mail.com");
            Assert.AreEqual(1, websiteUserRecords.Count);

            var websiteUserFields = dbHelper.websiteUser.GetByID(websiteUserRecords[0], "name", "inactive", "websiteid", "username", "password", "emailverified", "statusid", "profileid", "profileidtablename", "profileidname", "isaccountlocked");
            Assert.AreEqual("Antonyett Brandon", websiteUserFields["name"]);
            Assert.AreEqual(false, websiteUserFields["inactive"]);
            Assert.AreEqual(websiteid, websiteUserFields["websiteid"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser7@mail.com", websiteUserFields["username"]);
            Assert.IsNotNull(websiteUserFields["password"]);
            Assert.AreEqual(false, websiteUserFields["emailverified"]);
            Assert.AreEqual(2, websiteUserFields["statusid"]);
            Assert.AreEqual(personRecords[0], websiteUserFields["profileid"]);
            Assert.AreEqual("person", websiteUserFields["profileidtablename"]);
            Assert.AreEqual("Antonyett Brandon", websiteUserFields["profileidname"]);
            Assert.AreEqual(false, websiteUserFields["isaccountlocked"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9713")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - Set data in the mandatory fields only  - " +
            "Click on the save Register button - Validate that a new person and website user records are created")]
        public void RegistrationCreatingPersonRecord_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //remove any matching website user
            foreach (var websiteuserid in dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser7@mail.com"))
                dbHelper.websiteUser.DeleteWebsiteUser(websiteuserid);

            //remove any matching person record
            foreach (var personid in dbHelper.person.GetByPrimaryEmail("StaffordshireCitizenPortalUser7@mail.com"))
            {
                dbHelper.person.UpdateLinkedAddress(personid, null);

                foreach (var addressid in dbHelper.personAddress.GetByPersonId(personid))
                    dbHelper.personAddress.DeletePersonAddress(addressid);

                foreach (var portaltask in dbHelper.portalTask.GetByTargetUserId(personid))
                    dbHelper.portalTask.DeletePortalTask(portaltask);

                foreach (var emailrecord in dbHelper.email.GetEmailByRegardingID(personid))
                    dbHelper.email.DeleteEmail(emailrecord);

                dbHelper.person.DeletePerson(personid);
            }


            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress("StaffordshireCitizenPortalUser7@mail.com")
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")

                .InsertFirstName("Antonyett")
                .InsertLastName("Brandon")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")

                .InsertPostcode("postc")
                .InsertMobilePhone("1234")

                .ClickOnRegisterButton();

            registrationSuccessPage
                .WaitForRegistrationSuccessPageToLoad();

            var personRecords = dbHelper.person.GetByPrimaryEmail("StaffordshireCitizenPortalUser7@mail.com");
            Assert.AreEqual(1, personRecords.Count);

            var fields = dbHelper.person.GetPersonById(personRecords[0], "ownerid", "inactive", "firstname", "lastname", "dateofbirth", "genderid", "homephone", "mobilephone", "fullname", "nhsnumber", "ethnicityid", "fulladdress", "propertyname", "addresstypeid", "addressline1", "addressline2", "addressline3", "addressline4", "addressline5", "postcode", "primaryemail", "nationalinsurancenumber", "linkedaddressid");
            Assert.AreEqual(new Guid("B6060DFA-7333-43B2-A662-3D9CADAB12E5"), fields["ownerid"]);
            Assert.AreEqual(false, fields["inactive"]);
            Assert.AreEqual("Antonyett", fields["firstname"]);
            Assert.AreEqual("Brandon", fields["lastname"]);
            Assert.AreEqual(new DateTime(2000, 1, 1), fields["dateofbirth"]);
            Assert.AreEqual(1, fields["genderid"]);
            Assert.AreEqual(false, fields.ContainsKey("homephone"));
            Assert.AreEqual(true, fields.ContainsKey("mobilephone"));
            Assert.AreEqual("Antonyett Brandon", fields["fullname"]);
            Assert.AreEqual(false, fields.ContainsKey("nhsnumber"));
            Assert.AreEqual(new Guid("32173323-A43E-EA11-A2C8-005056926FE4"), fields["ethnicityid"]);
            Assert.AreEqual(false, fields.ContainsKey("propertyname"));
            Assert.AreEqual(10, fields["addresstypeid"]);
            Assert.AreEqual(false, fields.ContainsKey("addressline1"));
            Assert.AreEqual(false, fields.ContainsKey("addressline2"));
            Assert.AreEqual(false, fields.ContainsKey("addressline3"));
            Assert.AreEqual(false, fields.ContainsKey("addressline4"));
            Assert.AreEqual(false, fields.ContainsKey("addressline5"));
            Assert.AreEqual("postc", fields["postcode"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser7@mail.com", fields["primaryemail"]);
            Assert.AreEqual(false, fields.ContainsKey("nationalinsurancenumber"));
            Assert.IsNotNull(fields["linkedaddressid"]);


            var websiteUserRecords = dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser7@mail.com");
            Assert.AreEqual(1, websiteUserRecords.Count);

            var websiteUserFields = dbHelper.websiteUser.GetByID(websiteUserRecords[0], "name", "inactive", "websiteid", "username", "password", "emailverified", "statusid", "profileid", "profileidtablename", "profileidname", "isaccountlocked");
            Assert.AreEqual("Antonyett Brandon", websiteUserFields["name"]);
            Assert.AreEqual(false, websiteUserFields["inactive"]);
            Assert.AreEqual(websiteid, websiteUserFields["websiteid"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser7@mail.com", websiteUserFields["username"]);
            Assert.IsNotNull(websiteUserFields["password"]);
            Assert.AreEqual(false, websiteUserFields["emailverified"]);
            Assert.AreEqual(2, websiteUserFields["statusid"]);
            Assert.AreEqual(personRecords[0], websiteUserFields["profileid"]);
            Assert.AreEqual("person", websiteUserFields["profileidtablename"]);
            Assert.AreEqual("Antonyett Brandon", websiteUserFields["profileidname"]);
            Assert.AreEqual(false, websiteUserFields["isaccountlocked"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9714")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - Set data in the mandatory fields only - " +
            "Set a email address that is already in use by another user account - " +
            "Click on the save Register button - Validate that a toast error message is displayed")]
        public void RegistrationCreatingPersonRecord_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress("StaffordshireCitizenPortalUser8@mail.com") //another account already uses this email address
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")

                .InsertFirstName("Antonyett")
                .InsertLastName("Brandon")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")

                .InsertPostcode("postc")
                .InsertMobilePhone("123321")

                .ClickOnRegisterButton();

            registrationPage
                .WaitForToastMessageVisible()
                .ValidateForToastMessageText("User with same email address exist.");


            var websiteUserRecords = dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser8@mail.com");
            Assert.AreEqual(1, websiteUserRecords.Count);


        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5585

        [Test]
        [Property("JiraIssueID", "CDV6-9788")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - Validate that the Contact Us page is displayed")]
        public void WebsiteContactUsMessagingViaPortal_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser8@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad();

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9789")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - Validate that the right side panel displays the published points of contact")]
        public void WebsiteContactUsMessagingViaPortal_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var pointofcontact1 = new Guid("c9833efc-f25f-eb11-a306-005056926fe4");//AutomatedTests Portal POC 1
            var pointofcontact2 = new Guid("63eef727-f35f-eb11-a306-005056926fe4");//AutomatedTests Portal POC 2

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);


            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser8@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()

                .ValidateRightPanelContactPresent(pointofcontact1.ToString())
                .ValidatePointOfContactName(pointofcontact1.ToString(), "Staffordshire Citizen Portal POC 1")
                .ValidatePointOfContactEmailLink(pointofcontact1.ToString(), "PointOfContact1@mail.com")
                .ValidatePointOfContactPhoneNumber(pointofcontact1.ToString(), "965478284")
                .ValidatePointOfContactAddressLine(pointofcontact1.ToString(), "poc1 line 1, line 2")

                .ValidateRightPanelContactPresent(pointofcontact2.ToString())
                .ValidatePointOfContactName(pointofcontact2.ToString(), "Staffordshire Citizen Portal POC 2")
                .ValidatePointOfContactEmailLink(pointofcontact2.ToString(), "PointOfContact2@mail.com")
                .ValidatePointOfContactPhoneNumber(pointofcontact2.ToString(), "1234567")
                .ValidatePointOfContactAddressLine(pointofcontact2.ToString(), "poc2 line 1, line 2");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9790")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - Validate that the right side panel do not display draft/ended points of contact")]
        public void WebsiteContactUsMessagingViaPortal_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var pointofcontact3 = new Guid("b3e5512e-f35f-eb11-a306-005056926fe4");//AutomatedTests Portal POC 3
            var pointofcontact4 = new Guid("b7e5512e-f35f-eb11-a306-005056926fe4");//AutomatedTests Portal POC 4

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser8@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()

                .ValidateRightPanelContactNotPresent(pointofcontact3.ToString())
                .ValidateRightPanelContactNotPresent(pointofcontact4.ToString());
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9791")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - Validate that no error label is displayed")]
        public void WebsiteContactUsMessagingViaPortal_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser8@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()

                .ValidateContactErrorLabelVisibility(false)
                .ValidateYourNameErrorLabelVisibility(false)
                .ValidateYourEmailAddressErrorLabelVisibility(false)
                .ValidateSubjectErrorLabelVisibility(false)
                .ValidateMessageErrorLabelVisibility(false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9792")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - Click on the submit button -  Validate that the error labels are displayed for the mandatory fields")]
        public void WebsiteContactUsMessagingViaPortal_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser8@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()

                .ClickSubmitButton()

                .ValidateContactErrorLabelVisibility(true)
                .ValidateYourNameErrorLabelVisibility(false)
                .ValidateYourEmailAddressErrorLabelVisibility(false)
                .ValidateSubjectErrorLabelVisibility(true)
                .ValidateMessageErrorLabelVisibility(true)

                .ValidateContactErrorLabelText("Contact is required")
                .ValidateSubjectFieldErrorLabelText("Subject is required")
                .ValidateMessageFieldErrorLabelText("Message is required");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9793")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - set data in all mandatory fields - Click on the submit button - Validate that the website contact is created and associated with the website record")]
        public void WebsiteContactUsMessagingViaPortal_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all website contact records
            foreach (var contactid in dbHelper.websiteContact.GetByWebSiteIDAndSubject(websiteid, "Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1"))
                dbHelper.websiteContact.DeleteWebsiteContact(contactid);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()
                .SelectContact("Staffordshire Citizen Portal POC 2")
                .InsertYourName("Claude Palmer")
                .InsertYourEmailAddress("StaffordshireCitizenPortalUser8@mail.com")
                .InsertSubject("Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1")
                .InsertMessage("Message content goes here.")
                .ClickSubmitButton()

                .ValidateToastMessageVisibility(true)
                .ValidateToastMessageText("Your feedback has been successfully submitted. Your input is valued and will be reviewed by a member of staff. Thank you.");

            var records = dbHelper.websiteContact.GetByWebSiteIDAndSubject(websiteid, "Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1");
            Assert.AreEqual(1, records.Count);

            var fields = dbHelper.websiteContact.GetByID(records[0], "websitepointofcontactid", "name", "emailaddress", "subject", "message");
            Assert.AreEqual(new Guid("63eef727-f35f-eb11-a306-005056926fe4"), fields["websitepointofcontactid"]);
            Assert.AreEqual("Claude Palmer", fields["name"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser8@mail.com", fields["emailaddress"]);
            Assert.AreEqual("Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1", fields["subject"]);
            Assert.AreEqual("Message content goes here.", fields["message"]);
        }


        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6288

        [Test]
        [Property("JiraIssueID", "CDV6-9715")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - Set data in all fields - " +
            "Click on the save Register button - Validate that a new website user records are created")]
        public void RegistrationCreatingWebsiteUserRecord_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //remove any matching website user
            foreach (var websiteuserid in dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser7@mail.com"))
                dbHelper.websiteUser.DeleteWebsiteUser(websiteuserid);

            //remove any matching person record
            foreach (var personid in dbHelper.person.GetByPrimaryEmail("StaffordshireCitizenPortalUser7@mail.com"))
            {
                dbHelper.person.UpdateLinkedAddress(personid, null);

                foreach (var addressid in dbHelper.personAddress.GetByPersonId(personid))
                    dbHelper.personAddress.DeletePersonAddress(addressid);

                foreach (var portaltask in dbHelper.portalTask.GetByTargetUserId(personid))
                    dbHelper.portalTask.DeletePortalTask(portaltask);

                //remove all emails for the person
                foreach (var emailid in dbHelper.email.GetEmailByRegardingID(personid))
                    dbHelper.email.DeleteEmail(emailid);

                dbHelper.person.DeletePerson(personid);
            }


            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress("StaffordshireCitizenPortalUser7@mail.com")
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")

                .InsertFirstName("Antonyett")
                .InsertLastName("Brandon")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")
                .InsertNHSNo("9876543210")
                .InsertNationalInsuranceNumber("1234567890")

                .InsertPropertyName("pna")
                .InsertPropertyNo("pno")
                .InsertStreet("st")
                .InsertVillageDistrict("vil")
                .InsertTownCity("tow")
                .InsertCounty("cou")
                .InsertPostcode("postc")
                .InsertHomePhone("123456")
                .InsertMobilePhone("654321")

                .ClickOnRegisterButton();

            registrationSuccessPage
                .WaitForRegistrationSuccessPageToLoad();

            var personRecords = dbHelper.person.GetByPrimaryEmail("StaffordshireCitizenPortalUser7@mail.com");
            Assert.AreEqual(1, personRecords.Count);

            var websiteUserRecords = dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser7@mail.com");
            Assert.AreEqual(1, websiteUserRecords.Count);

            var websiteUserFields = dbHelper.websiteUser.GetByID(websiteUserRecords[0], "name", "inactive", "websiteid", "username", "password", "emailverified", "statusid", "profileid", "profileidtablename", "profileidname", "isaccountlocked");
            Assert.AreEqual("Antonyett Brandon", websiteUserFields["name"]);
            Assert.AreEqual(false, websiteUserFields["inactive"]);
            Assert.AreEqual(websiteid, websiteUserFields["websiteid"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser7@mail.com", websiteUserFields["username"]);
            Assert.IsNotNull(websiteUserFields["password"]);
            Assert.AreEqual(false, websiteUserFields["emailverified"]);
            Assert.AreEqual(2, websiteUserFields["statusid"]);
            Assert.AreEqual(personRecords[0], websiteUserFields["profileid"]);
            Assert.AreEqual("person", websiteUserFields["profileidtablename"]);
            Assert.AreEqual("Antonyett Brandon", websiteUserFields["profileidname"]);
            Assert.AreEqual(false, websiteUserFields["isaccountlocked"]);

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6283

        [Test]
        [Property("JiraIssueID", "CDV6-9716")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - " +
            "Insert a email address that is already in use by another user account - " +
            "Validate that the user is immediately warned about the email being in use.")]
        public void RegistrationEmailAddressCheck_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress("StaffordshireCitizenPortalUser8@mail.com") //another account already uses this email address
                .ClickOnPasswordField()

                .ValidateEmailInUserFieldMessageVisible(true)
                .ValidateEmailInUserSigninLinkVisible(true)
                .ValidateEmailInUserFieldMessageText("E-mail address already in use. An account already exists with the e-mail.\r\nAlready have an account? Sign In.")
                .ValidateEmailInUserSigninLinkText("Already have an account? Sign In.")
                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9717")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - " +
            "Insert a email address that is already in use by another user account - " +
            "Wait for the email in use message to be displayed - click on the sign in redirect link - validate that the user is redirected to the home page.")]
        public void RegistrationEmailAddressCheck_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress("StaffordshireCitizenPortalUser8@mail.com") //another account already uses this email address
                .ClickOnPasswordField()

                .ValidateEmailInUserFieldMessageVisible(true)
                .ValidateEmailInUserSigninLinkVisible(true)
                .ClickEmailInUserSigninLink();

            homePage
                .WaitForHomePageToLoad();
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6290

        [Test]
        [Property("JiraIssueID", "CDV6-9815")]
        [Description("Navigate to the portal URL (Website.Email Verification Required = No and Website.User Approval Required = No) - " +
            "Click in the Register button - Wait for the registration page to load - Set data in all fields - " +
            "Click on the save Register button - Validate that a new website user record is created with status set to Approved.")]
        public void WebsiteUserAutomaticApproval_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //update Email Verification Required and User Approval Required
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            var email = "StaffordshireCitizenPortalUser" + DateTime.Now.ToString("yyyyMMddHHmmss") + "@mail.com";


            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress(email)
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")
                .SelectHowToreceivePIN("Email")

                .InsertFirstName("Antonyett")
                .InsertLastName("Brandon")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")
                .InsertNHSNo("9876543210")
                .InsertNationalInsuranceNumber("1234567890")

                .InsertPropertyName("pna")
                .InsertPropertyNo("pno")
                .InsertStreet("st")
                .InsertVillageDistrict("vil")
                .InsertTownCity("tow")
                .InsertCounty("cou")
                .InsertPostcode("postc")
                .InsertHomePhone("123456")
                .InsertMobilePhone("654321")

                .ClickOnRegisterButton();

            registrationSuccessPage
                .WaitForRegistrationSuccessPageToLoad();

            var websiteUserRecords = dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, email);
            Assert.AreEqual(1, websiteUserRecords.Count);

            int expectedStatus = 2; //Approved
            var websiteUserFields = dbHelper.websiteUser.GetByID(websiteUserRecords[0], "statusid");
            Assert.AreEqual(expectedStatus, websiteUserFields["statusid"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9816")]
        [Description("Set the website user 'Email Verified' to 'No' - Remove all email verification records from the user and create a new one - " +
            "Access the Email Verification link address - Validate that the email verification page is displayed.")]
        public void WebsiteUserAutomaticApproval_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("142acd88-f85f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser9@mail.com

            //update Email Verification Required and User Approval Required
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //set status to Waiting Approval
            dbHelper.websiteUser.UpdateStatus(websiteUserID, 1);

            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);

            //remove all verification emails
            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);

            //Create a new verification record
            var seton = DateTime.UtcNow;
            var emailVerificationID = dbHelper.websiteUserEmailVerification.CreateWebsiteUserEmailVerification(websiteUserID, seton, appURL + "email-verification?id=");

            //set link
            var validationLink = appURL + "email-verification?id=" + emailVerificationID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(emailVerificationID, validationLink);

            emailVerificationPage
                .GoToEmailVerificationPage(validationLink)
                .WaitForEmailVerificationPageToLoad()
                .ValidateVerifyEmailButtonVisible(true)
                .ClickVerifyEmailButton()
                .ValidateVerifyEmailButtonVisible(false)
                .ValidateMessageAreaText("Congratulations, your account has been verified. Click on the following button to go to the home page and log in again");

            int expectedStatus = 2; //Approved
            var websiteUserFields = dbHelper.websiteUser.GetByID(websiteUserID, "statusid");
            Assert.AreEqual(expectedStatus, websiteUserFields["statusid"]);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-5587

        [Test]
        [Property("JiraIssueID", "CDV6-9803")]
        [Description("Navigate to the portal URL - Wait for the Home Page to load - Click on the feedback Icon - validate that the feedback dialog is displayed")]
        public void WebsiteFeedbackViaPortal_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickFeedbackIcon();

            feedbackDialog
                .WaitForFeedbackDialogToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9804")]
        [Description("Navigate to the portal URL - Wait for the Home Page to load - Click on the feedback Icon - Wait for the dialog to load - " +
            "Click on the submit button - Validate that all mandatory fields have errors displayed")]
        public void WebsiteFeedbackViaPortal_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickFeedbackIcon();

            feedbackDialog
                .WaitForFeedbackDialogToLoad()
                .ClickSubmitButton()

                .ValidateNameFieldErrorVisibility(true)
                .ValidateEmailFieldErrorVisibility(true)
                .ValidateWebsiteFeedbackTypeFieldErrorVisibility(true)
                .ValidateMessageFieldErrorVisibility(true)

                .ValidateNameFieldErrorText("Name is required")
                .ValidateEmailFieldErrorText("Email is required")
                .ValidateWebsiteFeedbackTypeFieldErrorText("Feedback Type is required")
                .ValidateMessageFieldErrorText("Feedback is required")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9805")]
        [Description("Navigate to the portal URL - Wait for the Home Page to load - Click on the feedback Icon - Wait for the dialog to load - " +
            "Set date in all fields - Click on the submit button - Validate that a new feedback record is created in caredirector")]
        public void WebsiteFeedbackViaPortal_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            foreach (var feedbackid in dbHelper.websiteFeedback.GetByWebSiteIDAndEmail(websiteid, "StaffordshireCitizenPortalUser8@mail.com"))
                dbHelper.websiteFeedback.DeleteWebsiteFeedback(feedbackid);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickFeedbackIcon();

            feedbackDialog
                .WaitForFeedbackDialogToLoad()

                .InsertName("Margaret Jonson")
                .InsertEmail("StaffordshireCitizenPortalUser8@mail.com")
                .SelectWebsiteFeedbackType("Generic Opinion")
                .InsertMessage("Message goes here")

                .ClickSubmitButton()

                .ValidateToastMessageVisibility(true)
                .ValidateToastMessageText("Your feedback has been successfully submitted. Your input is valued and will be reviewed by a member of staff. Thank you.");

            var feedbackRecords = dbHelper.websiteFeedback.GetByWebSiteIDAndEmail(websiteid, "StaffordshireCitizenPortalUser8@mail.com");
            Assert.AreEqual(1, feedbackRecords.Count);

            var ExpectedFeedbackType = new Guid("56546cc7-bf29-eb11-a2cd-005056926fe4"); //Generic Opinion
            var fields = dbHelper.websiteFeedback.GetByID(feedbackRecords[0], "name", "email", "message", "websitefeedbacktypeid");
            Assert.AreEqual("Margaret Jonson", fields["name"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser8@mail.com", fields["email"]);
            Assert.AreEqual(ExpectedFeedbackType, fields["websitefeedbacktypeid"]);
            Assert.AreEqual("Message goes here", fields["message"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9806")]
        [Description("Navigate to the portal URL - Wait for the Home Page to load - Click on the feedback Icon - Wait for the dialog to load - " +
            "Set date in all fields - insert an invalid email address - Click on the submit button - Validate that no feedback record is submitted.")]
        public void WebsiteFeedbackViaPortal_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            foreach (var feedbackid in dbHelper.websiteFeedback.GetByWebSiteIDAndEmail(websiteid, "StaffordshireCitizenPortalUser8@mail.com"))
                dbHelper.websiteFeedback.DeleteWebsiteFeedback(feedbackid);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickFeedbackIcon();

            feedbackDialog
                .WaitForFeedbackDialogToLoad()

                .InsertName("Margaret Jonson")
                .InsertEmail("MargaretJonson")
                .SelectWebsiteFeedbackType("Generic Opinion")
                .InsertMessage("Message goes here")

                .ClickSubmitButton()

                .ValidateNameFieldErrorVisibility(false)
                .ValidateEmailFieldErrorVisibility(true)
                .ValidateWebsiteFeedbackTypeFieldErrorVisibility(false)
                .ValidateMessageFieldErrorVisibility(false)

                .ValidateEmailFieldErrorText("Email must be a valid email address");

            var feedbackRecords = dbHelper.websiteFeedback.GetByWebSiteIDAndEmail(websiteid, "StaffordshireCitizenPortalUser8@mail.com");
            Assert.AreEqual(0, feedbackRecords.Count);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8067

        [Test]
        [Property("JiraIssueID", "CDV6-9343")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert the Username and Password - Tap on the login button - " +
            "Wait for the member home page to load - Validate that the about me menu is displayed")]
        public void AboutMeMenu_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            dbHelper.website.UpdatePasswordPolicy(websiteid, 365, 0, 0, 20);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser9@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ValidateChangePasswordButtonVisible(false)
                .ValidateEditDetailsButtonVisible(false)
                .ValidateDeactivateAccounttButtonVisible(false)
                .ValidateLogOutButtonVisible(false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9344")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert the Username and Password - Tap on the login button - " +
            "Wait for the member home page to load - Click on the About Me User Name button - Validate that the sub-menu is displayed")]
        public void AboutMeMenu_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            dbHelper.website.UpdatePasswordPolicy(websiteid, 365, 0, 0, 20);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser9@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ValidateChangePasswordButtonVisible(true)
                .ValidateEditDetailsButtonVisible(true)
                .ValidateDeactivateAccounttButtonVisible(true)
                .ValidateLogOutButtonVisible(true);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8068

        [Test]
        [Property("JiraIssueID", "CDV6-9667")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password - Wait for the member home page to load - " +
            "Tap on the about me menu button - Click on the Change Password button - wait for the change password page to load - insert the old password, new password and repeat the password - " +
            "Tap on the Change password button - wait for the success message to be displayed - " +
            "tap on the Go to Home Page link - Validate that the user is redirected to the member home page")]
        public void LoggedInHomepageChangePassword_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset user password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to the current UTC date
            DateTime lastpasswordchangeddate = DateTime.UtcNow.AddDays(-10);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser4@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickChangePasswordButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertCurrentPassword("Passw0rd_!")
                .InsertNewPassword("Passw0rd_!00")
                .InsertRepeatNewPassword("Passw0rd_!00")
                .ClickChangePasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible()
                .ClickGoToHomePageLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6305


        [Test]
        [Property("JiraIssueID", "CDV6-9722")]
        [Description("Navigate to the portal home page (Website Email Verification Required = No) - " +
            "Insert a Username and Password (user account is approved and 'Email Verified' = No) - Click on the login button - " +
            "validate that the user is redirected to the member-home page")]
        public void RegistrationResentVerificationEmail_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser10@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }




        [Test]
        [Property("JiraIssueID", "CDV6-9723")]
        [Description("Navigate to the portal home page - Validate that the Resend Verification Email link is not displayed by default")]
        public void RegistrationResentVerificationEmail_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ValidateSendVerificationEmailLinkVisible(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9724")]
        [Description("Navigate to the portal home page - Insert a Username and Password (user account is approved but 'Email Verified' = No) - " +
            "Click on the login button - " +
            "Validate that the user is prevented from completing the login - Validate that a resend email verification link is displayed")]
        public void RegistrationResentVerificationEmail_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, true, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);


            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);



            foreach (var emailid in dbHelper.email.GetEmailByRegardingID(websiteUserID))
                dbHelper.email.DeleteEmail(emailid);

            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser14@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("Your account has not yet been verified. A verification email was sent to StaffordshireCitizenPortalUser14@mail.com when your account was created. Click the following link to resend the email.")
                .ValidateSendVerificationEmailLinkVisible(true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9725")]
        [Description("Navigate to the portal home page - Insert a Username and Password (user account is approved but 'Email Verified' = No) - " +
            "Click on the login button - " +
            "wait for the resend email verification link to be displayed - click on the reset email verification link - " +
            "Validate that the error message and resend links get hidden - " +
            "Validate that a new warning message is displayed with text 'A new verification email has been sent to your email address.' - " +
            "Validate that a new websiteUserEmailVerification and Email records are generated.")]
        public void RegistrationResentVerificationEmail_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, true, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);


            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);



            foreach (var emailid in dbHelper.email.GetEmailByRegardingID(websiteUserID))
                dbHelper.email.DeleteEmail(emailid);

            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser14@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateSendVerificationEmailLinkVisible(true)
                .ClickSendVerificationEmailLink()
                .ValidateWarningMessage("A new verification email has been sent to your email address.");

            var emailRecords = dbHelper.email.GetEmailByRegardingID(websiteUserID);
            Assert.AreEqual(1, emailRecords.Count);

            var verificationRecords = dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID);
            Assert.AreEqual(1, verificationRecords.Count);
        }



        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-7194

        [Test]
        [Property("JiraIssueID", "CDV6-9771")]
        [Description("Portal website has 'Enable Two Factor Authentication' set to 'Yes' - Website User has 'Two Factor Authentication Type' set to 'Email' - " +
            "Navigate to the portal URL - Insert the username and password - " +
            "Validate that the message 'Please use the PIN that was sent to you.' is displayed in the login widget - " +
            "Validate that a Website User Pin record is created - Validate that a email record is created and associated with the website user")]
        public void TwoFactorAuthentication_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("1e8a16fa-8860-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser11@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 2, 10, 4, 5);


            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var email in dbHelper.email.GetEmailByRegardingID(websiteuserid))
                dbHelper.email.DeleteEmail(email);

            foreach (var sms in dbHelper.sms.GetSMSByRecipientId(websiteuserid))
                dbHelper.sms.DeleteSMS(sms);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser11@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateWarningMessage("Please use the PIN that was sent to your email. Click the following link to resend the PIN.");


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            var emails = dbHelper.email.GetEmailByRegardingID(websiteuserid);
            Assert.AreEqual(1, emails.Count);

            var allsms = dbHelper.sms.GetSMSByRecipientId(websiteuserid);
            Assert.AreEqual(0, allsms.Count);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9772")]
        [Description("Portal website has 'Enable Two Factor Authentication' set to 'Yes' - Website User has 'Two Factor Authentication Type' set to 'SMS' - " +
            "Navigate to the portal URL - Insert the username and password - " +
            "Validate that the message 'Please use the PIN that was sent to you.' is displayed in the login widget - " +
            "Validate that a Website User Pin record is created - Validate that a SMS record is created and associated with the website user")]
        public void TwoFactorAuthentication_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com
            var personid = new Guid("7260bea1-e3c1-4293-a04c-7bd279a8b588"); //Dallas Bruce

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var email in dbHelper.email.GetEmailByRegardingID(personid))
                dbHelper.email.DeleteEmail(email);

            foreach (var sms in dbHelper.sms.GetSMSByRecipientId(personid))
                dbHelper.sms.DeleteSMS(sms);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.");


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            var emails = dbHelper.email.GetEmailByRegardingID(personid);
            Assert.AreEqual(0, emails.Count);

            var allsms = dbHelper.sms.GetSMSByRecipientId(personid);
            Assert.AreEqual(1, allsms.Count);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9773")]
        [Description("Portal website has 'Enable Two Factor Authentication' set to 'Yes' - Website User do not have the 'Two Factor Authentication Type' property set - " +
            "Navigate to the portal URL - Insert the username and password - " +
            "Validate that the message 'Please use the PIN that was sent to you.' is displayed in the login widget - " +
            "Validate that a Website User Pin record is created - Validate that the default 2 factor authentication method is selected")]
        public void TwoFactorAuthentication_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("1e86f681-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser13@mail.com
            var personId = new Guid("5c07fde3-31e6-4125-9247-687489fca289"); //Shane Lowe

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 2, 10, 4, 5);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var email in dbHelper.email.GetEmailByRegardingID(personId))
                dbHelper.email.DeleteEmail(email);

            foreach (var sms in dbHelper.sms.GetSMSByRecipientId(personId))
                dbHelper.sms.DeleteSMS(sms);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser13@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.");


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            var emails = dbHelper.email.GetEmailByRegardingID(personId);
            Assert.AreEqual(0, emails.Count);

            var allsms = dbHelper.sms.GetSMSByRecipientId(personId);
            Assert.AreEqual(1, allsms.Count);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-7195

        [Test]
        [Property("JiraIssueID", "CDV6-9775")]
        [Description("Navigate to the portal URL - Insert the username and password - Wait for the 'Please use the PIN that was sent to you.' message - " +
            "Insert the PIN Code - Validate that the user is redirected to the member home page.")]
        public void TwoFactorAuthenticationLogin_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var email in dbHelper.email.GetEmailByRegardingID(websiteuserid))
                dbHelper.email.DeleteEmail(email);

            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinCode = (string)fields["pin"];

            homePage
                .InsertPIN(pinCode)
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();


        }

        [Test]
        [Property("JiraIssueID", "CDV6-9776")]
        [Description("Navigate to the portal URL - Insert the username and password - Wait for the 'Please use the PIN that was sent to you.' message - " +
            "Insert an incorrect PIN Code - " +
            "Validate that an error message is displayed preventing the user from login. - " +
            "Validate that the 'failedpinattemptcount' field for the website user is increased by 1.")]
        public void TwoFactorAuthenticationLogin_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);


            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var email in dbHelper.email.GetEmailByRegardingID(websiteuserid))
                dbHelper.email.DeleteEmail(email);

            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            homePage
                .InsertPIN("0000")
                .ClickValidatePinButton()

                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("Please provide a valid PIN.");

            var fields = dbHelper.websiteUser.GetByID(websiteuserid, "failedpinattemptcount");
            Assert.AreEqual(1, fields["failedpinattemptcount"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9777")]
        [Description("Navigate to the portal URL - Insert the username and password - Wait for the 'Please use the PIN that was sent to you.' message - " +
            "Reset the website user 'failedpinattemptcount' to 7 - Insert an incorrect PIN Code - " +
            "Validate that an error message is displayed preventing the user from login. - " +
            "Validate that the login page will hide the Pin field and the Validate Pin button and will display the login fields")]
        public void TwoFactorAuthenticationLogin_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 8);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var email in dbHelper.email.GetEmailByRegardingID(websiteuserid))
                dbHelper.email.DeleteEmail(email);

            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 7);

            homePage
                .InsertPIN("0000")
                .ClickValidatePinButton()

                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("Maximum number of invalid attempts reached for PIN. Please login again.")
                .WaitForHomePageToLoad();

            var fields = dbHelper.websiteUser.GetByID(websiteuserid, "failedpinattemptcount");
            Assert.AreEqual(8, fields["failedpinattemptcount"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9778")]
        [Description("Navigate to the portal URL - Insert the username and password - Wait for the 'Please use the PIN that was sent to you.' message - " +
            "Reset the website user 'failedpinattemptcount' to 7 - Insert an incorrect PIN Code - " +
            "User is redirected to the login container - Insert the user name and password and tap on the login button again - " +
            "Validate that the message 'Please use the PIN that was sent to you.' is displayed again - " +
            "Validate that a new pin code was generated - " +
            "validate that the failedpinattemptcount is reset to NULL.")]
        public void TwoFactorAuthenticationLogin_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 8);


            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var email in dbHelper.email.GetEmailByRegardingID(websiteuserid))
                dbHelper.email.DeleteEmail(email);

            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            //reset pin attempts to 7
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 7);

            homePage
                .InsertPIN("0000")
                .ClickValidatePinButton()

                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("Maximum number of invalid attempts reached for PIN. Please login again.");

            //remove all pins. later a new one should be generated
            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            homePage
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible()
                ;

            var fields = dbHelper.websiteUser.GetByID(websiteuserid, "failedpinattemptcount");
            Assert.IsFalse(fields.ContainsKey("failedpinattemptcount"));

            var userpinds = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9779")]
        [Description("Navigate to the portal URL - Insert the username and password - Wait for the 'Please use the PIN that was sent to you.' message - " +
            "Reset the website user 'failedpinattemptcount' to 7 - Insert an incorrect PIN Code - " +
            "User is redirected to the login container - Insert the user name and password and tap on the login button again - " +
            "on the Pin page insert the newly generated Pin - Validate that the user is redirected to the member home page.")]
        public void TwoFactorAuthenticationLogin_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 8);


            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var email in dbHelper.sms.GetSMSByRecipientId(websiteuserid))
                dbHelper.sms.DeleteSMS(email);

            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()

                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();

            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 7);

            homePage
                .InsertPIN("0000")
                .ClickValidatePinButton()

                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("Maximum number of invalid attempts reached for PIN. Please login again.")

                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();

            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(2, userpins.Count);

            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinCode = (string)fields["pin"];

            homePage
                .InsertPIN(pinCode.ToString())
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-7197

        [Test]
        [Property("JiraIssueID", "CDV6-9774")]
        [Description("Navigate to the portal URL - Insert the username and password - CD will generate a PIN record - " +
            "Update the expire on date and set it in the past - In the Home page insert the expired pin - " +
            "Validate that the user is prevented from completing the login")]
        public void TwoFactorAuthenticationExpiredPin_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var smsid in dbHelper.sms.GetSMSByRecipientId(websiteuserid))
                dbHelper.sms.DeleteSMS(smsid);

            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            dbHelper.websiteUserPin.UpdateWebsiteUserPin(userpins[0], DateTime.Now.AddDays(-1));

            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinCode = (string)fields["pin"];

            homePage
                .InsertPIN(pinCode.ToString())
                .ClickValidatePinButton()

                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("The PIN you have supplied has expired. Please login again.");

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-7196

        [Test]
        [Property("JiraIssueID", "CDV6-9780")]
        [Description("Navigate to the portal URL - Insert the username and password - CD will generate a PIN record - " +
            "In the Home page click on the ReIssue pin link - Validate that a new pin record is generated")]
        public void TwoFactorAuthenticationResetPin_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var smsid in dbHelper.sms.GetSMSByRecipientId(websiteuserid))
                dbHelper.sms.DeleteSMS(smsid);


            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()

                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);


            homePage
                .ClickReIssuePinLink()
                .ValidateWarningMessage("Please use the new PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();

            System.Threading.Thread.Sleep(3000);

            userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(2, userpins.Count);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9781")]
        [Description("Navigate to the portal URL - Insert the username and password - CD will generate a PIN record - " +
            "In the Home page click on the ReIssue pin link - Validate that a new pin record is generated - " +
            "Use the most recent Pin record to complete the login process")]
        public void TwoFactorAuthenticationResetPin_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var smsid in dbHelper.sms.GetSMSByRecipientId(websiteuserid))
                dbHelper.sms.DeleteSMS(smsid);



            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()

                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);


            homePage
                .ClickReIssuePinLink()
                .ValidateWarningMessage("Please use the new PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();

            System.Threading.Thread.Sleep(3000);

            userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(2, userpins.Count);

            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinCode = (string)fields["pin"];

            homePage
                .InsertPIN(pinCode.ToString())
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9782")]
        [Description("Navigate to the portal URL - Insert the username and password - CD will generate a PIN record - " +
            "Delete the newly generated Pin record (simulate the 'Clear Expired Pin Records' schedule job) - In the Home page click on the ReIssue pin link - " +
            "Validate that the app displays an error message (missing pin), hides the validate pin area and displays the login area")]
        public void TwoFactorAuthenticationResetPin_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var smsid in dbHelper.sms.GetSMSByRecipientId(websiteuserid))
                dbHelper.sms.DeleteSMS(smsid);



            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()

                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);

            dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpins[0]);

            homePage
                .ClickReIssuePinLink()
                .WaitForHomePageToLoad()
                .ValidateErrorMessage("PIN record not found. Please login again");

            System.Threading.Thread.Sleep(3000);

            userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(0, userpins.Count);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9783")]
        [Description("Navigate to the portal URL - Insert the username and password - CD will generate a PIN record - " +
            "In the Home page click on the ReIssue pin link - Validate that a new pin record is generated - " +
            "Insert the first generated Pin record in the Pin textbox and tap on the Validate Pin button - Validate that the user is able to login." +
            "(Recently there was a change done by Tevinder so that every time a user clicks on the reset pin button the same pin record is generated over and over again )")]
        public void TwoFactorAuthenticationResetPin_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("b3ba6612-8b60-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser12@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            foreach (var userpin in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpin);

            foreach (var smsid in dbHelper.sms.GetSMSByRecipientId(websiteuserid))
                dbHelper.sms.DeleteSMS(smsid);



            //reset pin attempts to 0
            dbHelper.websiteUser.UpdateWebsiteUser(websiteuserid, 0);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()

                .InsertUserName("StaffordshireCitizenPortalUser12@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .ValidateWarningMessage("Please use the PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);


            homePage
                .ClickReIssuePinLink()
                .ValidateWarningMessage("Please use the new PIN that was sent to your phone. Click the following link to resend the PIN.")
                .WaitForPinFieldVisible()
                .WaitForValidatePinButtonVisible();

            System.Threading.Thread.Sleep(3000);

            userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(2, userpins.Count);

            var fields = dbHelper.websiteUserPin.GetByID(userpins[1], "pin"); //get the 1st generated pin
            var pinCode = (string)fields["pin"];

            homePage
                .InsertPIN(pinCode.ToString())
                .ClickValidatePinButton();

            //.ValidateErrorMessageVisible()
            //.ValidateErrorMessage("Please provide a valid PIN.");

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-7981

        [Test]
        [Property("JiraIssueID", "CDV6-9645")]
        [Description("Set the website user 'Email Verified' to 'No' - Remove all email verification records from the user and create a new one - " +
            "Access the Email Verification link address - Validate that the email verification page is displayed.")]
        public void EmailVerification_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);


            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);

            //remove all verification emails
            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);

            //Create a new verification record
            var seton = DateTime.UtcNow;
            var emailVerificationID = dbHelper.websiteUserEmailVerification.CreateWebsiteUserEmailVerification(websiteUserID, seton, appURL + "email-verification?id=");

            //set link
            var validationLink = appURL + "email-verification?id=" + emailVerificationID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(emailVerificationID, validationLink);

            emailVerificationPage
                .GoToEmailVerificationPage(validationLink)
                .WaitForEmailVerificationPageToLoad()
                .ValidateVerifyEmailButtonVisible(true)
                .ClickVerifyEmailButton()
                .ValidateVerifyEmailButtonVisible(false)
                .ValidateMessageAreaText("Congratulations, your account has been verified. Click on the following button to go to the home page and log in again");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9646")]
        [Description("Set the website user 'Email Verified' to 'No' - Remove all email verification records from the user and create a new one - " +
            "Access the Email Verification link address - Validate that the Website User 'Email Verified' field will be set to Yes.")]
        public void EmailVerification_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);



            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);

            //remove all verification emails
            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);

            //Create a new verification record
            var seton = DateTime.UtcNow;
            var emailVerificationID = dbHelper.websiteUserEmailVerification.CreateWebsiteUserEmailVerification(websiteUserID, seton, appURL + "email-verification?id=");

            //set link
            var validationLink = appURL + "email-verification?id=" + emailVerificationID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(emailVerificationID, validationLink);

            emailVerificationPage
                .GoToEmailVerificationPage(validationLink)
                .WaitForEmailVerificationPageToLoad()
                .ValidateVerifyEmailButtonVisible(true)
                .ClickVerifyEmailButton()
                .ValidateVerifyEmailButtonVisible(false)
                .ValidateMessageAreaText("Congratulations, your account has been verified. Click on the following button to go to the home page and log in again");

            var fields = dbHelper.websiteUser.GetByID(websiteUserID, "emailverified");
            Assert.AreEqual(true, fields["emailverified"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9647")]
        [Description("Set the website user 'Email Verified' to 'No' - Remove all email verification records from the user and create a new one - " +
            "Access the Email Verification link address - Validate that the 'Website User Email Verification' record is deleted.")]
        public void EmailVerification_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);


            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);

            //remove all verification emails
            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);

            //Create a new verification record
            var seton = DateTime.UtcNow;
            var emailVerificationID = dbHelper.websiteUserEmailVerification.CreateWebsiteUserEmailVerification(websiteUserID, seton, appURL + "email-verification?id=");

            //set link
            var validationLink = appURL + "email-verification?id=" + emailVerificationID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(emailVerificationID, validationLink);

            emailVerificationPage
                .GoToEmailVerificationPage(validationLink)
                .WaitForEmailVerificationPageToLoad()
                .ValidateVerifyEmailButtonVisible(true)
                .ClickVerifyEmailButton()
                .ValidateVerifyEmailButtonVisible(false)
                .ValidateMessageAreaText("Congratulations, your account has been verified. Click on the following button to go to the home page and log in again");

            var verificationRecords = dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID);
            Assert.AreEqual(0, verificationRecords.Count);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9648")]
        [Description("Set the website user 'Email Verified' to 'No' - Remove all email verification records from the user and create a new one - " +
            "Access the Email Verification link address - Click on 'Go To Home Page' button.")]
        public void EmailVerification_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);



            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);

            //remove all verification emails
            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);

            //Create a new verification record
            var seton = DateTime.UtcNow;
            var emailVerificationID = dbHelper.websiteUserEmailVerification.CreateWebsiteUserEmailVerification(websiteUserID, seton, appURL + "email-verification?id=");

            //set link
            var validationLink = appURL + "email-verification?id=" + emailVerificationID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(emailVerificationID, validationLink);

            emailVerificationPage
                .GoToEmailVerificationPage(validationLink)
                .WaitForEmailVerificationPageToLoad()
                .ValidateVerifyEmailButtonVisible(true)
                .ClickVerifyEmailButton()
                .ValidateVerifyEmailButtonVisible(false)
                .ValidateMessageAreaText("Congratulations, your account has been verified. Click on the following button to go to the home page and log in again")
                .ClickGoToHomePageButton();

            homePage
                .WaitForHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9649")]
        [Description("Set the website user 'Email Verified' to 'No' - Remove all email verification records from the user and create a new one - " +
            "Access the Email Verification link address using an id that will not match any email verification record - Validate that an error message is displayed to the user.")]
        public void EmailVerification_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);



            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);

            //remove all verification emails
            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);


            //set link
            var validationLink = appURL + "email-verification?id=" + Guid.NewGuid().ToString();

            emailVerificationPage
                .GoToEmailVerificationPage(validationLink)
                .WaitForEmailVerificationPageToLoad()
                .ValidateVerifyEmailButtonVisible(true)
                .ClickVerifyEmailButton()
                .ValidateVerifyEmailButtonVisible(false)
                .ValidateErrorMessageAreaText("Email verification record not found. This could be either because email has been already verified or because link id is not correct")
                .ClickGoToHomePageButton();

            homePage
                .WaitForHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9650")]
        [Description("Set the website user 'Email Verified' to 'No' - Remove all email verification records from the user and create 2 new records - " +
            "Access the Email Verification link address using an id that will match one email verification record - " +
            "Validate that all 'Website User Email Verification' records are deleted.")]
        public void EmailVerification_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);



            //set Email Verified to No
            dbHelper.websiteUser.ResetEmailVerifiedField(websiteUserID, false);

            //remove all verification emails
            foreach (var verificationid in dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserEmailVerification.DeleteWebsiteUserEmailVerification(verificationid);

            //Create a new verification record
            var seton = DateTime.UtcNow;
            var emailVerificationID1 = dbHelper.websiteUserEmailVerification.CreateWebsiteUserEmailVerification(websiteUserID, seton, appURL + "email-verification?id=");
            var emailVerificationID2 = dbHelper.websiteUserEmailVerification.CreateWebsiteUserEmailVerification(websiteUserID, seton, appURL + "email-verification?id=");

            //set link
            var validationLink1 = appURL + "email-verification?id=" + emailVerificationID1.ToString();
            var validationLink2 = appURL + "email-verification?id=" + emailVerificationID2.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(emailVerificationID1, validationLink1);
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(emailVerificationID2, validationLink2);

            emailVerificationPage
                .GoToEmailVerificationPage(validationLink2)
                .WaitForEmailVerificationPageToLoad()
                .ValidateVerifyEmailButtonVisible(true)
                .ClickVerifyEmailButton()
                .ValidateVerifyEmailButtonVisible(false)
                .ValidateMessageAreaText("Congratulations, your account has been verified. Click on the following button to go to the home page and log in again");

            var verificationRecords = dbHelper.websiteUserEmailVerification.GetByWebSiteUserID(websiteUserID);
            Assert.AreEqual(0, verificationRecords.Count);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-6284

        [Test]
        [Property("JiraIssueID", "CDV6-9726")]
        [Description("Open Portal Website 17 - Navigate to the Registration page - Validate that the registration page loads (with How to Receive PIN field visible)")]
        public void RegistrationTwoFactorAuthenticationMethodSelection_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("76c8173a-9460-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser14@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9727")]
        [Description("Open Portal Website 17 - Navigate to the Registration page - Select Email for 'How to receive PIN' field - Click on the Register button - Validate that the Mobile Phone Error label is still displayed (field is allways mandatory)")]
        public void RegistrationTwoFactorAuthenticationMethodSelection_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()
                .SelectHowToreceivePIN("Email")
                .ClickOnRegisterButton()
                .ValidateMobilePhoneFieldErrorVisible(true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9728")]
        [Description("Open Portal Website 17 - Navigate to the Registration page - Select SMS for 'How to receive PIN' field - Click on the Register button - Validate that the Mobile Phone Error label is displayed")]
        public void RegistrationTwoFactorAuthenticationMethodSelection_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()
                .SelectHowToReceivePINInMainField("SMS")
                .ClickOnRegisterButton()
                .ValidateMobilePhoneFieldErrorVisible(true)
                .ValidateMobilePhoneFieldErrorText("Mobile Phone is required")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9729")]
        [Description("Open Portal Website 17 - Navigate to the Registration page - Click on the Register button - Validate that the How to Receive PIN Error label is displayed")]
        public void RegistrationTwoFactorAuthenticationMethodSelection_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()
                .ClickOnRegisterButton()
                .ValidateHowToReceivePINFieldErrorVisible(true)
                .ValidateHowToReceivePINFieldErrorText("How to Receive PIN is required");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9730")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - Set data in the mandatory fields only  - " +
            "Click on the save Register button - Validate that a new person and website user records are created")]
        public void RegistrationTwoFactorAuthenticationMethodSelection_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);


            //remove any matching website user
            foreach (var websiteuserid in dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "Joonnytbrandoner@largemail.com"))
                dbHelper.websiteUser.DeleteWebsiteUser(websiteuserid);

            //remove any matching person record
            foreach (var personid in dbHelper.person.GetByPrimaryEmail("Joonnytbrandoner@largemail.com"))
            {
                dbHelper.person.UpdateLinkedAddress(personid, null);

                foreach (var addressid in dbHelper.personAddress.GetByPersonId(personid))
                    dbHelper.personAddress.DeletePersonAddress(addressid);

                foreach (var portaltask in dbHelper.portalTask.GetByTargetUserId(personid))
                    dbHelper.portalTask.DeletePortalTask(portaltask);

                foreach (var emailid in dbHelper.email.GetEmailByRegardingID(personid))
                    dbHelper.email.DeleteEmail(emailid);

                dbHelper.person.DeletePerson(personid);
            }



            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress("Joonnytbrandoner@largemail.com")
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")
                .SelectHowToreceivePIN("Email")

                .InsertFirstName("Joonny")
                .InsertLastName("Brandoner")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")

                .InsertPostcode("postc")
                .InsertMobilePhone("1234")

                .ClickOnRegisterButton();

            registrationSuccessPage
                .WaitForRegistrationSuccessPageToLoad();

            var personRecords = dbHelper.person.GetByPrimaryEmail("Joonnytbrandoner@largemail.com");
            Assert.AreEqual(1, personRecords.Count);

            var fields = dbHelper.person.GetPersonById(personRecords[0], "ownerid", "inactive", "firstname", "lastname", "dateofbirth", "genderid", "homephone", "mobilephone", "fullname", "nhsnumber", "ethnicityid", "fulladdress", "propertyname", "addresstypeid", "addressline1", "addressline2", "addressline3", "addressline4", "addressline5", "postcode", "primaryemail", "nationalinsurancenumber", "linkedaddressid");
            Assert.AreEqual(new Guid("B6060DFA-7333-43B2-A662-3D9CADAB12E5"), fields["ownerid"]);
            Assert.AreEqual(false, fields["inactive"]);
            Assert.AreEqual("Joonny", fields["firstname"]);
            Assert.AreEqual("Brandoner", fields["lastname"]);
            Assert.AreEqual(new DateTime(2000, 1, 1), fields["dateofbirth"]);
            Assert.AreEqual(1, fields["genderid"]);
            Assert.AreEqual(false, fields.ContainsKey("homephone"));
            Assert.AreEqual(true, fields.ContainsKey("mobilephone"));
            Assert.AreEqual("Joonny Brandoner", fields["fullname"]);
            Assert.AreEqual(false, fields.ContainsKey("nhsnumber"));
            Assert.AreEqual(new Guid("32173323-A43E-EA11-A2C8-005056926FE4"), fields["ethnicityid"]);
            //Assert.AreEqual("pna, pno, st, vil, tow, cou, postc", fields["fulladdress"]);
            Assert.AreEqual(false, fields.ContainsKey("propertyname"));
            Assert.AreEqual(10, fields["addresstypeid"]);
            Assert.AreEqual(false, fields.ContainsKey("addressline1"));
            Assert.AreEqual(false, fields.ContainsKey("addressline2"));
            Assert.AreEqual(false, fields.ContainsKey("addressline3"));
            Assert.AreEqual(false, fields.ContainsKey("addressline4"));
            Assert.AreEqual(false, fields.ContainsKey("addressline5"));
            Assert.AreEqual("postc", fields["postcode"]);
            Assert.AreEqual("Joonnytbrandoner@largemail.com", fields["primaryemail"]);
            Assert.AreEqual(false, fields.ContainsKey("nationalinsurancenumber"));
            Assert.IsNotNull(fields["linkedaddressid"]);


            var websiteUserRecords = dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "Joonnytbrandoner@largemail.com");
            Assert.AreEqual(1, personRecords.Count);

            var websiteUserFields = dbHelper.websiteUser.GetByID(websiteUserRecords[0], "inactive", "websiteid", "username", "password", "emailverified", "statusid", "profileid", "profileidtablename", "profileidname", "isaccountlocked");
            Assert.AreEqual(false, websiteUserFields["inactive"]);
            Assert.AreEqual(websiteid, websiteUserFields["websiteid"]);
            Assert.AreEqual("Joonnytbrandoner@largemail.com", websiteUserFields["username"]);
            Assert.IsNotNull(websiteUserFields["password"]);
            Assert.AreEqual(false, websiteUserFields["emailverified"]);
            Assert.AreEqual(2, websiteUserFields["statusid"]);
            Assert.AreEqual(personRecords[0], websiteUserFields["profileid"]);
            Assert.AreEqual("person", websiteUserFields["profileidtablename"]);
            Assert.AreEqual("Joonny Brandoner", websiteUserFields["profileidname"]);
            Assert.AreEqual(false, websiteUserFields["isaccountlocked"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9731")]
        [Description("Open Portal Website 17 - Navigate to the Registration page - Select SMS for 'How to receive PIN' field - Click on the Register button - " +
            "Validate that the Mobile Phone Error label is displayed - Set 'How to receive PIN' to Email - Validate that the Mobile Phone Error label is hidden ")]
        public void RegistrationTwoFactorAuthenticationMethodSelection_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()
                .SelectHowToReceivePINInMainField("SMS")
                .ClickOnRegisterButton()
                .ValidateMobilePhoneFieldErrorVisible(true)
                .ValidateMobilePhoneFieldErrorText("Mobile Phone is required")
                .SelectHowToReceivePINInMainField("Email")
                .ValidateMobilePhoneFieldErrorVisible(false);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8071

        [Test]
        [Property("JiraIssueID", "CDV6-9373")]
        [Description("Open Portal Website - Login with a portal website user - Navigate to the Deactivate Account page - " +
            "Validate that the deactivate account page is displayed")]
        public void DeactivateAccount_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("1acbc3cf-b260-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser15@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //re-activate the user account
            dbHelper.websiteUser.UpdateStatus(websiteUserID, 2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser15@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickDeactivateAccountButton();

            deactivateAccountPage
                .WaitForRegistrationSuccessPageToLoad()
                .VaidateWarningMessageVisibility(true)
                .VaidateWarningMessageText("Deactivating your account will result in you no longer having access to your record. To continue and deactivate your account, click Confirm");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9374")]
        [Description("Open Portal Website - Login with a portal website user - Navigate to the Deactivate Account page - " +
            "Click on the Confirm button - Validate that the user is redirected to the home page - Validate that the user account is deactivated")]
        public void DeactivateAccount_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("1acbc3cf-b260-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser15@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //re-activate the user account
            dbHelper.websiteUser.UpdateStatus(websiteUserID, 2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser15@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickDeactivateAccountButton();

            deactivateAccountPage
                .WaitForRegistrationSuccessPageToLoad()
                .ClickConfirmButton();

            homePage
                .WaitForHomePageToLoad();

            var fields = dbHelper.websiteUser.GetByID(websiteUserID, "statusid");
            Assert.AreEqual(4, fields["statusid"]); //validate that the account is de-activated

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8201

        [Test]
        [Property("JiraIssueID", "CDV6-9654")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the 'My Attachments' widget is displayed in the member home page.")]
        public void ExposeAttachments_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9655")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the 'Attachments' marked with 'Available on Citizen Portal' set to Yes are displayed")]
        public void ExposeAttachments_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateAttachmentRecordDisplayed("Attachment 003")
                .ValidateAttachmentCreatedOnInformationVisibility("Attachment 003", false)
                .ValidateAttachmentRecordDisplayed("Attachment 001")
                .ValidateAttachmentCreatedOnInformationVisibility("Attachment 001", false)

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9656")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the 'Attachments' marked with 'Available on Citizen Portal' set to No are not displayed")]
        public void ExposeAttachments_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateAttachmentRecordNotDisplayed("Attachment 02")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9657")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on a attachment Record - Validate that the created on information is displayed")]
        public void ExposeAttachments_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickAttachmentRecord("Attachment 003")

                .ValidateAttachmentRecordDisplayed("Attachment 003")
                .ValidateAttachmentCreatedOnInformationVisibility("Attachment 003", true)
                .ValidateAttachmentCreatedOnText("Attachment 003", "Created On: 09/02/2021 10:49:37")

                ;
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8070

        [Test]
        [Property("JiraIssueID", "CDV6-9640")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the member home page to load - " +
            "Navigate to the Edit Details page - Validate that the Edit Details page is displayed")]
        public void EditDetails_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("23d6635e-4f61-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser16@mail.com
            var personID = new Guid("9cd27d1e-1594-4377-9920-11840ec9c136"); //Bernard Roth
            var ethnicity = new Guid("6c8fb74f-f534-e911-a2c5-005056926fe4"); //English


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //reset the person Personal Details
            dbHelper.person.UpdatePersonalDetails(personID, "Bernard", "Roth", new DateTime(1966, 5, 4), 1, ethnicity, "231 659 9044", "1234567890");

            //reset the person Contact Details
            dbHelper.person.UpdateContactDetails(personID, "Bromley", "169114", "Thornton Road,", "London Vlg", "London", "Greater London", "BR1 1HG", "721675263", "601989914");

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser16@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditDetailsButton();

            personDetailsPage
                .WaitForPersonDetailsPageToLoad()

                .ValidateFirstName("Bernard")
                .ValidateLastName("Roth")
                .ValidateDateOfBirth("1966-05-04")
                .ValidateGenderSelectedText("Male")
                .ValidateEthnicitySelectedText("English")
                .ValidateNHSNo("1234567890")
                .ValidateNationalInsuranceNumber("1234567890")

                .ValidatePropertyName("Bromley")
                .ValidatePropertyNo("169114")
                .ValidateStreet("Thornton Road,")
                .ValidateVillageDistrict("London Vlg")
                .ValidateTownCity("London")
                .ValidateCounty("Greater London")
                .ValidatePostcode("BR1 1HG")
                .ValidateHomePhone("721675263")
                .ValidateMobilePhone("601989914");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9641")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the member home page to load - " +
            "Navigate to the Edit Details page - Update all fields in the personal details section - Tap on the submit button - " +
            "Validate that all data is saved against CareDirector")]
        public void EditDetails_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("23d6635e-4f61-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser16@mail.com
            var personID = new Guid("9cd27d1e-1594-4377-9920-11840ec9c136"); //Bernard Roth
            var ethnicity = new Guid("6c8fb74f-f534-e911-a2c5-005056926fe4"); //English


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //reset the person Personal Details
            dbHelper.person.UpdatePersonalDetails(personID, "Bernard", "Roth", new DateTime(1966, 5, 4), 1, ethnicity, "231 659 9044", "1234567890");

            //reset the person Contact Details
            dbHelper.person.UpdateContactDetails(personID, "Bromley", "169114", "Thornton Road,", "London Vlg", "London", "Greater London", "BR1 1HG", "721675263", "601989914");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser16@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditDetailsButton();

            personDetailsPage
                .WaitForPersonDetailsPageToLoad()

                .InsertFirstName("the Bernard")
                .InsertLastName("the Roth")

                .InsertDateOfBirth("01/01/2000")

                .ClickOnGenderTopField()
                .InsertGenderSearchText("Female")
                .ClickOnGenderOption("Female")

                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")

                .InsertNHSNo("231 659 9049")
                .InsertNationalInsuranceNumber("1234567899")

                .InsertPropertyName("the Bromley")
                .InsertPropertyNo("12")
                .InsertStreet("the Thornton Road")
                .InsertVillageDistrict("the London Vlg")
                .InsertTownCity("the London")
                .InsertCounty("the Greater London")
                .InsertPostcode("0 BR1 1HG")
                .InsertHomePhone("7216752630")
                .InsertMobilePhone("6019899140");
            personDetailsPage
                .ClickOnSubmitButton();
            personDetailsPage
                .ValidateToastMessageVisible();


            var fields = dbHelper.person.GetPersonById(personID, "firstname", "lastname", "dateofbirth", "genderid", "ethnicityid", "nhsnumber", "nationalinsurancenumber",
                "propertyname", "addressline1", "addressline2", "addressline3", "addressline4", "addressline5", "postcode", "homephone", "mobilephone");

            var expectedEthnicity = new Guid("32173323-a43e-ea11-a2c8-005056926fe4"); //African

            Assert.AreEqual("the Bernard", fields["firstname"]);
            Assert.AreEqual("the Roth", fields["lastname"]);
            Assert.AreEqual(new DateTime(2000, 1, 1), fields["dateofbirth"]);
            Assert.AreEqual(2, fields["genderid"]);
            Assert.AreEqual(expectedEthnicity, fields["ethnicityid"]);
            Assert.AreEqual("231 659 9044", fields["nhsnumber"]);
            Assert.AreEqual("1234567899", fields["nationalinsurancenumber"]);

            Assert.AreEqual("the Bromley", fields["propertyname"]);
            Assert.AreEqual("12", fields["addressline1"]);
            Assert.AreEqual("the Thornton Road", fields["addressline2"]);
            Assert.AreEqual("the London Vlg", fields["addressline3"]);
            Assert.AreEqual("the London", fields["addressline4"]);
            Assert.AreEqual("the Greater London", fields["addressline5"]);
            Assert.AreEqual("0 BR1 1HG", fields["postcode"]);
            Assert.AreEqual("7216752630", fields["homephone"]);
            Assert.AreEqual("6019899140", fields["mobilephone"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9642")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the member home page to load - " +
            "Navigate to the Edit Details page - Update all fields in the personal details section - Tap on the submit button - " +
            "Validate that a success toast message is displayed")]
        public void EditDetails_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("23d6635e-4f61-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser16@mail.com
            var personID = new Guid("9cd27d1e-1594-4377-9920-11840ec9c136"); //Bernard Roth
            var ethnicity = new Guid("6c8fb74f-f534-e911-a2c5-005056926fe4"); //English


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //reset the person Personal Details
            dbHelper.person.UpdatePersonalDetails(personID, "Bernard", "Roth", new DateTime(1966, 5, 4), 1, ethnicity, "231 659 9044", "1234567890");

            //reset the person Contact Details
            dbHelper.person.UpdateContactDetails(personID, "Bromley", "169114", "Thornton Road,", "London Vlg", "London", "Greater London", "BR1 1HG", "721675263", "601989914");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser16@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditDetailsButton();

            personDetailsPage
                .WaitForPersonDetailsPageToLoad()

                .InsertFirstName("the Bernard")
                .InsertLastName("the Roth")

                .InsertDateOfBirth("01/01/2000")

                .ClickOnGenderTopField()
                .InsertGenderSearchText("Female")
                .ClickOnGenderOption("Female")

                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")

                .InsertNHSNo("231 659 9049")
                .InsertNationalInsuranceNumber("1234567899")

                .InsertPropertyName("the Bromley")
                .InsertPropertyNo("12")
                .InsertStreet("the Thornton Road")
                .InsertVillageDistrict("the London Vlg")
                .InsertTownCity("the London")
                .InsertCounty("the Greater London")
                .InsertPostcode("0 BR1 1HG")
                .InsertHomePhone("7216752630")
                .InsertMobilePhone("6019899140")

                .ClickOnSubmitButton()

                .ValidateToastMessageVisible()
                .ValidateToastMessageText("Your profile has been successfully updated.");

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8106

        [Test]
        [Property("JiraIssueID", "CDV6-9672")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the member home page to load - " +
            "Tap on the logout button - Validate that the user logout and is redirected to the home page")]
        public void LogoutOption_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickLogOutButton();

            homePage
                .WaitForHomePageToLoad();
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8069

        [Test]
        [Property("JiraIssueID", "CDV6-9644")]
        [Description("Login in the portal environment - On the member home page navigate to the change password page - wait for the change password page to load - " +
            "insert a valid new password and repeat the password - Tap on the Change password button - " +
            "wait for the success message to be displayed - Validate that a new email record is created and linked to the website user record.")]
        public void EmailPasswordChangeConfirmation_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("9928c8c3-fa8e-481f-a424-d235bb5cb92e"); //Roy Noble
            var websiteUserID = new Guid("243826c5-e45f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser5@mail.com

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //reset the password policies
            dbHelper.website.UpdatePasswordPolicy(websiteid, 100, 0, 2, 20);

            //remove all password history records
            foreach (var historyRecordID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyRecordID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //remove all password history records
            foreach (var historyRecordID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(historyRecordID);

            //reset the Last Password Changed Date to the current date
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, DateTime.Now.AddDays(-1));

            //remove all email records for the users
            foreach (var email in dbHelper.email.GetEmailByRegardingID(websiteUserID))
                dbHelper.email.DeleteEmail(email);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser5@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickChangePasswordButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertCurrentPassword("Passw0rd_!")
                .InsertNewPassword("Passw0rd_!00")
                .InsertRepeatNewPassword("Passw0rd_!00")
                .ClickChangePasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible()
                .ClickGoToHomePageLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            //get all emails for the user
            var emails = dbHelper.email.GetEmailByRegardingID(websiteUserID);
            Assert.AreEqual(1, emails.Count);

            //validate the subject and notes fields
            var fields = dbHelper.email.GetEmailByID(emails[0], "subject", "notes");
            Assert.AreEqual("Password Change", fields["subject"]);
            Assert.IsTrue(((string)fields["notes"]).Contains("Your password has been changed at"));

            //validate that the email was sent to the website person record
            var emailsTo = dbHelper.emailTo.GetByEmailAndRegardingID(emails[0], personID);
            Assert.AreEqual(1, emailsTo.Count);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8073

        [Test]
        [Property("JiraIssueID", "CDV6-9643")]
        [Description("Login with a portal website user - Navigate to the Deactivate Account page - " +
            "Click on the Confirm button - Validate that the user is redirected to the home page - " +
            "Validate that a new email record is created and linked to the website user record.")]
        public void EmailDeactivationOfAccountConfirmation_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("27ec6f8f-37e0-4ccb-aaf6-ef29702a00d5"); //Darrel Burke
            var websiteUserID = new Guid("1acbc3cf-b260-eb11-a307-005056926fe4"); //StaffordshireCitizenPortalUser15@mail.com



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //re-activate the user account
            dbHelper.websiteUser.UpdateStatus(websiteUserID, 2);


            //remove all email records for the users
            foreach (var email in dbHelper.email.GetEmailByRegardingID(websiteUserID))
                dbHelper.email.DeleteEmail(email);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser15@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickDeactivateAccountButton();

            deactivateAccountPage
                .WaitForRegistrationSuccessPageToLoad()
                .ClickConfirmButton();

            homePage
                .WaitForHomePageToLoad();



            //get all emails for the user
            var emails = dbHelper.email.GetEmailByRegardingID(websiteUserID);
            Assert.AreEqual(1, emails.Count);

            //validate the subject and notes fields
            var fields = dbHelper.email.GetEmailByID(emails[0], "subject", "notes");
            Assert.AreEqual("Account Deactivated", fields["subject"]);
            Assert.IsTrue(((string)fields["notes"]).Contains("Your account has been deactivated"));

            //validate that the email was sent to the website person record
            var emailsTo = dbHelper.emailTo.GetByEmailAndRegardingID(emails[0], personID);
            Assert.AreEqual(1, emailsTo.Count);

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8112

        [Test]
        [Property("JiraIssueID", "CDV6-9673")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the 'My Assessments' widget is displayed in the member home page.")]
        public void MyAssessments_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9674")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that non canceled Case Forms Are displayed in the My Assessments area")]
        public void MyAssessments_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateAssessmentRecordDisplayed("CDA - Care and Support Plan")
                .ValidateAssessmentStartDateInformationVisibility("CDA - Care and Support Plan", false)
                .ValidateAssessmentStatusInformationVisibility("CDA - Care and Support Plan", false)

                .ValidateAssessmentRecordDisplayed("CDA - Care Act Assessment")
                .ValidateAssessmentStartDateInformationVisibility("CDA - Care Act Assessment", false)
                .ValidateAssessmentStatusInformationVisibility("CDA - Care Act Assessment", false)

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9675")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the 'Assessments' with canceled status are not displayed")]
        public void MyAssessments_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickMyAssessmentsLoadMoreRecordsButton()
                .ValidateAssessmentRecordNotDisplayed("CIN Plan")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9676")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on a Assessment Record - Validate that the Start Date and Status information is displayed")]
        public void MyAssessments_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickAssessmentRecord("CDA - Care and Support Plan")

                .ValidateAssessmentRecordDisplayed("CDA - Care and Support Plan")
                .ValidateAssessmentStartDateInformationVisibility("CDA - Care and Support Plan", true)
                .ValidateAssessmentStatusInformationVisibility("CDA - Care and Support Plan", true)
                .ValidateAssessmentStartDateText("CDA - Care and Support Plan", "Start Date: 12/01/2021")
                .ValidateAssessmentStatusText("CDA - Care and Support Plan", "Status: In Progress")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9677")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load (User has more than 10 active case form records) - " +
            "Validate that only 10 records are displayed by default")]
        public void MyAssessments_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateAssessmentRecordDisplayed("Automated UI Test Document 3")
                .ValidateAssessmentRecordDisplayed("CDA - Care and Support Plan")
                .ValidateAssessmentRecordDisplayed("CDA - Care Act Assessment")
                .ValidateAssessmentRecordDisplayed("Automated UI Test Document - CMS Questions")
                .ValidateAssessmentRecordDisplayed("Auto Doc")
                .ValidateAssessmentRecordDisplayed("Assessment_2")
                .ValidateAssessmentRecordDisplayed("Assessment_1")
                .ValidateAssessmentRecordDisplayed("Assessment Form")
                .ValidateAssessmentRecordDisplayed("Allergy_Nov27")
                .ValidateAssessmentRecordDisplayed("Automated UI Test Document 1")

                .ValidateAssessmentRecordNotDisplayed("Automated UI Test Document 2")
                .ValidateAssessmentRecordNotDisplayed("Adult Care and Support Plan")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9678")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load (User has more than 10 active case form records) - " +
            "Tap on the Load more records button for the My Assessments widget - " +
            "Validate that only 2nd page of case form results is displayed")]
        public void MyAssessments_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickMyAssessmentsLoadMoreRecordsButton()

                .ValidateAssessmentRecordDisplayed("Automated UI Test Document 3")
                .ValidateAssessmentRecordDisplayed("CDA - Care and Support Plan")
                .ValidateAssessmentRecordDisplayed("CDA - Care Act Assessment")
                .ValidateAssessmentRecordDisplayed("Automated UI Test Document - CMS Questions")
                .ValidateAssessmentRecordDisplayed("Auto Doc")
                .ValidateAssessmentRecordDisplayed("Assessment_2")
                .ValidateAssessmentRecordDisplayed("Assessment_1")
                .ValidateAssessmentRecordDisplayed("Assessment Form")
                .ValidateAssessmentRecordDisplayed("Allergy_Nov27")
                .ValidateAssessmentRecordDisplayed("Adult Care and Support Plan")
                .ValidateAssessmentRecordDisplayed("Automated UI Test Document 2")
                .ValidateAssessmentRecordDisplayed("Automated UI Test Document 1")

                ;
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8203 & https://advancedcsg.atlassian.net/browse/CDV6-8205

        [Test]
        [Property("JiraIssueID", "CDV6-9345")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the 'My Attachments' widget is displayed in the member home page.")]
        public void AddingAttachmentToPersonViaPortal_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9346")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Validate that the user is redirected to the attachment page.")]
        public void AddingAttachmentToPersonViaPortal_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .ValidateFilePickerHelpText("Maximum size: 1024 KB. Valid extensions: .bmp, .doc, .docm, .docx, .htm, .jpeg, .jpg, .m4a, .mht, .mov, .mp4, .msg, .ods, .odt, .pdf, .png, .ppt, .pptx, .pub, .rtf, .snp, .tif, .tiff, .txt, .url, .xls, .xlsb, .xlsx")
                .ValidateSuccessMessageVisibility(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9347")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Wait for the attachment page to load - tap in the submit button - " +
            "validate that an error message is displayed due to the fact that no file was attached.")]
        public void AddingAttachmentToPersonViaPortal_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .ClickSubmitButton()
                .ValidateFilePickerHelpTextVisibility(false)
                .ValidateSuccessMessageVisibility(false)
                .ValidateFilePickerErrorMessageVisibility(true)
                .ValidateFilePickerErrorMessageText("File is required")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9348")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Wait for the attachment page to load - tap in the submit button - " +
            "validate that an error message is displayed - tap on the reset button - validate that the error message is removed")]
        public void AddingAttachmentToPersonViaPortal_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .ClickSubmitButton()
                .ValidateFilePickerHelpTextVisibility(false)
                .ValidateSuccessMessageVisibility(false)
                .ValidateFilePickerErrorMessageVisibility(true)
                .ClickResetButton()
                .ValidateFilePickerHelpTextVisibility(true)
                .ValidateSuccessMessageVisibility(false)
                .ValidateFilePickerErrorMessageVisibility(false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9349")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Wait for the attachment page to load - Select a file to be uploaded - " +
            "Validate that the file picker text area displays the file name")]
        public void AddingAttachmentToPersonViaPortal_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .PickFile(TestContext.CurrentContext.TestDirectory + "\\Files\\" + "DocToUpload.txt")
                .ValidateFilePickerTextAreaText("DocToUpload.txt")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9350")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Wait for the attachment page to load - Select a file to be uploaded - " +
            "Tap on the reset button - Validate that the file picker text area displays no text")]
        public void AddingAttachmentToPersonViaPortal_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .PickFile(TestContext.CurrentContext.TestDirectory + "\\Files\\" + "DocToUpload.txt")
                .ClickResetButton()
                .ValidateFilePickerTextAreaText("Browse...")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9351")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Wait for the attachment page to load - Select a file to be uploaded - " +
            "Tap on the submit button - Validate that the success message is displayed and all other elements are hidden")]
        public void AddingAttachmentToPersonViaPortal_TestMethod07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .PickFile(TestContext.CurrentContext.TestDirectory + "\\Files\\" + "DocToUpload.txt")
                .ClickSubmitButton();

            attachmentPage
                .WaitForSuccessMessageToLoad()
                .ValidateSuccessMessageText("Upload successful");
            ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9352")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Wait for the attachment page to load - Select a file to be uploaded - " +
            "Tap on the submit button - Validate that a new person attachment is created and linked to the person record.")]
        public void AddingAttachmentToPersonViaPortal_TestMethod08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .PickFile(TestContext.CurrentContext.TestDirectory + "\\Files\\" + "DocToUpload.txt")
                .ClickSubmitButton()
                .WaitForSuccessMessageToLoad()
                .ValidateSuccessMessageText("Upload successful");

            var attachments = dbHelper.personAttachment.GetByPersonID(personID);
            Assert.AreEqual(1, attachments.Count);

            var documentTypeid = new Guid("62d55830-0466-eb11-a308-005056926fe4"); //All Attached Documents
            var documentSubTypeid = new Guid("20f7f73e-0466-eb11-a308-005056926fe4"); //Independent Living Grant

            var fields = dbHelper.personAttachment.GetByID(attachments[0], "title", "documenttypeid", "documentsubtypeid", "fileid");
            Assert.AreEqual("DocToUpload.txt", fields["title"]);
            Assert.AreEqual(documentTypeid, fields["documenttypeid"]);
            Assert.AreEqual(documentSubTypeid, fields["documentsubtypeid"]);
            Assert.IsNotNull(fields["fileid"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9353")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Wait for the attachment page to load - Select a file to be uploaded - " +
            "Click on the reset button - Select a different file - " +
            "Click on the submit button - Validate that a new person attachment is created and linked to the person record (name should match the last selected file).")]
        public void AddingAttachmentToPersonViaPortal_TestMethod09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .PickFile(TestContext.CurrentContext.TestDirectory + "\\Files\\" + "DocToUpload.txt")
                .ClickResetButton()
                .PickFile(TestContext.CurrentContext.TestDirectory + "\\Files\\" + "Document.txt")
                .ClickSubmitButton()
                .WaitForSuccessMessageToLoad()
                .ValidateSuccessMessageText("Upload successful");

            var attachments = dbHelper.personAttachment.GetByPersonID(personID);
            Assert.AreEqual(1, attachments.Count);

            var documentTypeid = new Guid("62d55830-0466-eb11-a308-005056926fe4"); //All Attached Documents
            var documentSubTypeid = new Guid("20f7f73e-0466-eb11-a308-005056926fe4"); //Independent Living Grant

            var fields = dbHelper.personAttachment.GetByID(attachments[0], "title", "documenttypeid", "documentsubtypeid", "fileid", "availableoncitizenportal", "createdonportal");
            Assert.AreEqual("Document.txt", fields["title"]);
            Assert.AreEqual(documentTypeid, fields["documenttypeid"]);
            Assert.AreEqual(documentSubTypeid, fields["documentsubtypeid"]);
            Assert.IsNotNull(fields["fileid"]);
            Assert.AreEqual(true, fields["availableoncitizenportal"]);
            Assert.AreEqual(true, fields["createdonportal"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9354")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on the add new attachment button - Wait for the attachment page to load - Select a file to be uploaded (size should exceed the maximum allowed size) - " +
            "Tap on the submit button - Validate that the user is prevented from uploading the file")]
        public void AddingAttachmentToPersonViaPortal_TestMethod10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //Set AttachmentLimitDates to null
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, null);

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForAttachmentPageToLoad()
                .PickFile(TestContext.CurrentContext.TestDirectory + "\\Files\\" + "LargeDocToUpload.txt")
                .ClickSubmitButton()

                .ValidateToastMessageVisibility(true)
                .ValidateToastMessageText("The submitted file exceeds the maximum allowed size of 1024 KB")
                ;

            var attachments = dbHelper.personAttachment.GetByPersonID(personID);
            Assert.AreEqual(0, attachments.Count);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9355")]
        [Description("Open Portal Website - Login with a portal website user (user has uploaded 10 documents in the lat 24 hours) - " +
            "Wait for the home page to load - Click on the add new attachment button - Wait for the attachment page to load - " +
            "Validate that all elements on the page are hidden except for a warning message.")]
        public void AddingAttachmentToPersonViaPortal_TestMethod11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("df233231-2866-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser20@mail.com
            var personID = new Guid("4c2c6528-2874-45e9-b307-7d113e8507f5"); //Stanley Simmons
            var websiteSettingId = new Guid("21a33183-9c60-eb11-a311-0050569231cf");//Attachments.MaximumUserUploadsPerXHours

            //reset Attachments.MaximumUserUploadsPerXHours to 10
            dbHelper.websiteSetting.UpdateWebsiteSettingValue(websiteSettingId, "10");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);


            var AttachmentLimitDates = new StringBuilder();
            AttachmentLimitDates.Append("<ArrayOfDateTime>");
            for (var i = 10; i >= 1; i--)
                AttachmentLimitDates.Append("<dateTime>" + DateTime.Now.AddHours(i * -1).ToString("o") + "</dateTime>");
            AttachmentLimitDates.Append("</ArrayOfDateTime>");

            //Set AttachmentLimitDates
            dbHelper.websiteUser.UpdateAttachmentLimitDates(websiteUserID, AttachmentLimitDates.ToString());

            //remove all attachments from the user
            foreach (var attID in dbHelper.personAttachment.GetByPersonID(personID))
                dbHelper.personAttachment.DeletePersonAttachment(attID);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser20@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentAddNewRecordButton();

            attachmentPage
                .WaitForWarningMessageToLoad();

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8311

        [Test]
        [Property("JiraIssueID", "CDV6-9689")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Lowercase Characters' is set to 3" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert 'New Password' with less than 3 lowercase characters - Validate that an error message is displayed to the user")]
        public void PasswordRules_MinimumLowercaseCharacters_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("abC?0")
                .InsertRepeatNewPassword("abC?0")

                .ClickResetPasswordButton()

                .ValidatePasswordPromptMinLowerVisible(true)
                .ValidatePasswordPromptMinLowerText("A minimum of 3 lower case letters")
                .ValidatePasswordPromptMinLowerIconValid(false)
                .ValidateErrorMessageText("Password must contain a minimum of 3 lower case letters");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9690")]
        [Description("Precondition - Website User has a 'Website User Password Reset' record - Website 'Minimum Lowercase Characters' is set to 3" +
            "Navigate to the URL provided in the 'Website User Password Reset' record - " +
            "Insert 'New Password' and 'Repeat New Password' with 3 lowercase characters - Tap on the reset button - Validate that the user password is changed")]
        public void PasswordRules_MinimumLowercaseCharacters_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "Some error ...", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);


            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("NewPassw0rd_!")
                .InsertRepeatNewPassword("NewPassw0rd_!")
                .ClickResetPasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible();

            var fields = dbHelper.websiteUser.GetByID(websiteUserID, "password");
            Assert.AreEqual("LpgUsCdjXJ4uWnbAQWHRqWYHlxpNwHb23n69f24zmLM=", fields["password"]); //Validate that the password was reseted
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9691")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password - Wait for the member home page to load (Website 'Minimum Lowercase Characters' is set to 3) - " +
            "Tap on the about me menu button - Click on the Change Password button - wait for the change password page to load - insert the old password, new password (with less than 3 lowercase characters) and repeat the password (with less than 3 lowercase characters) - " +
            "Tap on the Change password button - Validate that an error message is displayed to the user")]
        public void PasswordRules_MinimumLowercaseCharacters_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset user password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to the current UTC date
            DateTime lastpasswordchangeddate = DateTime.UtcNow.AddDays(-1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser4@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickChangePasswordButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertCurrentPassword("Passw0rd_!")
                .InsertNewPassword("abC?0")
                .InsertRepeatNewPassword("abC?0")
                .ClickChangePasswordButton();

            changePasswordPage
                .ValidateErrorMessageVisible()
                .ValidateErrorMessageText("The Password requires 3 Minimum Lowercase Letters.")
                .ValidatePasswordPromptMinLowerVisible(true)
                .ValidatePasswordPromptMinLowerText("A minimum of 3 lower case letters")
                .ValidatePasswordPromptMinLowerIconValid(false);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9692")]
        [Description("Navigate to the portal URL - Wait for the home page to load - Insert a username and password - Wait for the member home page to load - " +
            "Tap on the about me menu button - Click on the Change Password button - wait for the change password page to load - insert the old password, new password and repeat the password - " +
            "Tap on the Change password button - wait for the success message to be displayed - " +
            "tap on the Go to Home Page link - Validate that the user is redirected to the member home page")]
        public void PasswordRules_MinimumLowercaseCharacters_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset user password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //reset the last Last Password Changed Date to the current UTC date
            DateTime lastpasswordchangeddate = DateTime.UtcNow.AddDays(-1);
            dbHelper.websiteUser.ResetLastPasswordChangedDate(websiteUserID, lastpasswordchangeddate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser4@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickChangePasswordButton();

            changePasswordPage
                .WaitForChangePasswordPageToLoad()
                .InsertCurrentPassword("Passw0rd_!")
                .InsertNewPassword("Passw0rd_!00")
                .InsertRepeatNewPassword("Passw0rd_!00")
                .ClickChangePasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible()
                .ClickGoToHomePageLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9693")]
        [Description("Navigate to the portal URL (Website 'Minimum Lowercase Characters' is set to 3) - Click in the Register button - " +
            "Wait for the registration page to load - Set data in the mandatory fields only - Set a password with less than 3 lower case characters - " +
            "Click on the save Register button - Validate that a new person and website user records are created")]
        public void PasswordRules_MinimumLowercaseCharacters_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            var email = "StaffordshireCitizenPortalUser" + DateTime.Now.ToString("yyyyMMddHHmmss") + "@mail.com";

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress(email)
                .InsertPassword("abC0?")
                .InsertRepeatPassword("abC0?")

                .InsertFirstName("Antonyett")
                .InsertLastName("Brandon")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")

                .InsertPostcode("postc")
                .InsertMobilePhone("12332123")

                .ClickOnRegisterButton()

                .ValidateErrorMessageVisible()
                .ValidateErrorMessageText("Password must contain a minimum of 3 lower case letters")
                .ValidatePasswordPromptMinLowerVisible(true)
                .ValidatePasswordPromptMinLowerText("A minimum of 3 lower case letters")
                .ValidatePasswordPromptMinLowerIconValid(false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9694")]
        [Description("Navigate to the portal URL (Website 'Minimum Lowercase Characters' is set to 3) - Click in the Register button - " +
            "Wait for the registration page to load - Set data in the mandatory fields only - Set a valid password - " +
            "Click on the save Register button - Validate that a new person and website user records are created")]
        public void PasswordRules_MinimumLowercaseCharacters_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //reset the Password Complexity Information
            dbHelper.website.UpdatePasswordComplexity(websiteid, 5, 1, 1, 1, "#?!@$%^&*-", 3);

            //remove any matching website user
            foreach (var websiteuserid in dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser7@mail.com"))
                dbHelper.websiteUser.DeleteWebsiteUser(websiteuserid);

            //remove any matching person record
            foreach (var personid in dbHelper.person.GetByPrimaryEmail("StaffordshireCitizenPortalUser7@mail.com"))
            {
                dbHelper.person.UpdateLinkedAddress(personid, null);

                foreach (var addressid in dbHelper.personAddress.GetByPersonId(personid))
                    dbHelper.personAddress.DeletePersonAddress(addressid);

                foreach (var portaltask in dbHelper.portalTask.GetByTargetUserId(personid))
                    dbHelper.portalTask.DeletePortalTask(portaltask);

                //remove all emails for the person
                foreach (var emailid in dbHelper.email.GetEmailByRegardingID(personid))
                    dbHelper.email.DeleteEmail(emailid);

                dbHelper.person.DeletePerson(personid);

            }


            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress("StaffordshireCitizenPortalUser7@mail.com")
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")

                .InsertFirstName("Antonyett")
                .InsertLastName("Brandon")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")

                .InsertPostcode("postc")
                .InsertMobilePhone("123321")

                .ValidatePasswordPromptMinLowerVisible(true)
                .ValidatePasswordPromptMinLowerText("A minimum of 3 lower case letters")
                .ValidatePasswordPromptMinLowerIconValid(true)

                .ClickOnRegisterButton();

            registrationSuccessPage
                .WaitForRegistrationSuccessPageToLoad();

            var personRecords = dbHelper.person.GetByPrimaryEmail("StaffordshireCitizenPortalUser7@mail.com");
            Assert.AreEqual(1, personRecords.Count);

            var fields = dbHelper.person.GetPersonById(personRecords[0], "ownerid", "inactive", "firstname", "lastname", "dateofbirth", "genderid", "homephone", "mobilephone", "fullname", "nhsnumber", "ethnicityid", "fulladdress", "propertyname", "addresstypeid", "addressline1", "addressline2", "addressline3", "addressline4", "addressline5", "postcode", "primaryemail", "nationalinsurancenumber", "linkedaddressid");
            Assert.AreEqual(new Guid("B6060DFA-7333-43B2-A662-3D9CADAB12E5"), fields["ownerid"]);
            Assert.AreEqual(false, fields["inactive"]);
            Assert.AreEqual("Antonyett", fields["firstname"]);
            Assert.AreEqual("Brandon", fields["lastname"]);
            Assert.AreEqual(new DateTime(2000, 1, 1), fields["dateofbirth"]);
            Assert.AreEqual(1, fields["genderid"]);
            Assert.AreEqual(false, fields.ContainsKey("homephone"));
            Assert.AreEqual(true, fields.ContainsKey("mobilephone"));
            Assert.AreEqual("Antonyett Brandon", fields["fullname"]);
            Assert.AreEqual(false, fields.ContainsKey("nhsnumber"));
            Assert.AreEqual(new Guid("32173323-A43E-EA11-A2C8-005056926FE4"), fields["ethnicityid"]);
            Assert.AreEqual(false, fields.ContainsKey("propertyname"));
            Assert.AreEqual(10, fields["addresstypeid"]);
            Assert.AreEqual(false, fields.ContainsKey("addressline1"));
            Assert.AreEqual(false, fields.ContainsKey("addressline2"));
            Assert.AreEqual(false, fields.ContainsKey("addressline3"));
            Assert.AreEqual(false, fields.ContainsKey("addressline4"));
            Assert.AreEqual(false, fields.ContainsKey("addressline5"));
            Assert.AreEqual("postc", fields["postcode"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser7@mail.com", fields["primaryemail"]);
            Assert.AreEqual(false, fields.ContainsKey("nationalinsurancenumber"));
            Assert.IsNotNull(fields["linkedaddressid"]);


            var websiteUserRecords = dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, "StaffordshireCitizenPortalUser7@mail.com");
            Assert.AreEqual(1, personRecords.Count);

            var websiteUserFields = dbHelper.websiteUser.GetByID(websiteUserRecords[0], "inactive", "websiteid", "username", "password", "emailverified", "statusid", "profileid", "profileidtablename", "profileidname", "isaccountlocked");
            Assert.AreEqual(false, websiteUserFields["inactive"]);
            Assert.AreEqual(websiteid, websiteUserFields["websiteid"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser7@mail.com", websiteUserFields["username"]);
            Assert.IsNotNull(websiteUserFields["password"]);
            Assert.AreEqual(false, websiteUserFields["emailverified"]);
            Assert.AreEqual(2, websiteUserFields["statusid"]);
            Assert.AreEqual(personRecords[0], websiteUserFields["profileid"]);
            Assert.AreEqual("person", websiteUserFields["profileidtablename"]);
            Assert.AreEqual("Antonyett Brandon", websiteUserFields["profileidname"]);
            Assert.AreEqual(false, websiteUserFields["isaccountlocked"]);

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8206

        [Test]
        [Property("JiraIssueID", "CDV6-9651")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "CLick on an existing Attachment View button - Validate that the Attachment page displays the attachment file information")]
        public void ExposeAttachments_DownloadingFile_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var attachment01Id = new Guid("80a433f0-a067-eb11-a308-005056926fe4"); //Attachment 001
            var attachment02Id = new Guid("3ec253fc-a067-eb11-a308-005056926fe4"); //Attachment 002

            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser21@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentViewButton(attachment01Id.ToString());

            attachmentPage
                .WaitForExistingAttachmentPageToLoad()
                .ValidateAttachmentTitleText("Attachment 001")
                .ValidateAttachmentFileNameText("Document.txt (13 B)");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9652")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "CLick on an existing Attachment View button (with docx attached file) - Wait for the attachment page to load - " +
            "Click on the download button - Validate that the attached file is downloaded to the default browser download directory")]
        public void ExposeAttachments_DownloadingFile_TestMethod02()
        {
            var attachment01Id = new Guid("80a433f0-a067-eb11-a308-005056926fe4"); //Attachment 001
            var attachment02Id = new Guid("3ec253fc-a067-eb11-a308-005056926fe4"); //Attachment 002

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser21@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentViewButton(attachment02Id.ToString());

            attachmentPage
                .WaitForExistingAttachmentPageToLoad()
                .ValidateAttachmentTitleText("Attachment 002")
                .ValidateAttachmentFileNameText("Document.docx (11.58 KB)")
                .ClickDownloadButton();

            System.Threading.Thread.Sleep(3000);
            bool fileexists = System.IO.File.Exists(DownloadsDirectory + "\\download.docx");
            Assert.IsTrue(fileexists);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9653")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "CLick on an existing Attachment View button (with txt attached file) - Wait for the attachment page to load - " +
            "Click on the download button - Validate that the attached file opens in a new window.")]
        public void ExposeAttachments_DownloadingFile_TestMethod03()
        {
            var attachment01Id = new Guid("80a433f0-a067-eb11-a308-005056926fe4"); //Attachment 001
            var documentFileID = new Guid("85407d86-1fd2-ed11-a336-005056926fe4"); //Document.txt

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser21@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAttachmentViewButton(attachment01Id.ToString());

            attachmentPage
                .WaitForExistingAttachmentPageToLoad()
                .ValidateAttachmentTitleText("Attachment 001")
                .ClickDownloadButton();

            System.Threading.Thread.Sleep(3000);

            //get all browsers windows for the test session
            var allWindows = this.GetAllWindows();
            var currentWindow = this.GetCurrentWindow();

            //Get the window that is not the one being controlled at the moment
            var newOpenWindow = allWindows.Where(c => !c.Equals(currentWindow)).FirstOrDefault();

            //switch to the new window and get it´s URL
            this.SwitchWindow(newOpenWindow);
            var currentWindowURL = this.GetCurrentWindowURL();

            //Assert the url address
            Assert.AreEqual(this.appURL + "api/attachment/download?type=personattachment&fileType=Document&id=" + documentFileID + "&fileName=Document.txt", currentWindowURL);
        }


        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8107

        [Test]
        [Property("JiraIssueID", "CDV6-9668")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the My To Do List widget is displayed")]
        public void LoggedInHomepageToDoList_TestMethod01()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser21@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9669")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the My To Do List widget records are displayed")]
        public void LoggedInHomepageToDoList_TestMethod02()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser21@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateMyToDoListRecordDisplayed("To-do list - task 1")
                .ValidateMyToDoListRecordDisplayed("To-do list - task 2")
                .ValidateMyToDoListDueDateVisibility("To-do list - task 1", false)
                .ValidateMyToDoListDueDateVisibility("To-do list - task 2", false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9670")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - Click on a To Do List record - " +
            "Validate that the Due Date information is displayed")]
        public void LoggedInHomepageToDoList_TestMethod03()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser21@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickMyToDoListRecord("To-do list - task 1")
                .ValidateMyToDoListRecordDisplayed("To-do list - task 1")
                .ValidateMyToDoListRecordDisplayed("To-do list - task 2")
                .ValidateMyToDoListDueDateVisibility("To-do list - task 1", true)
                .ValidateMyToDoListDueDateVisibility("To-do list - task 2", false)
                .ValidateMyToDoListDueDateText("To-do list - task 1", "Due Date: 18/03/2021");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9671")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that to do list records with status of 'Completed' are not displayed ")]
        public void LoggedInHomepageToDoList_TestMethod04()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser21@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateRecordNotDisplayed("To-do list - task 3");
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-7315

        [Test]
        [Property("JiraIssueID", "CDV6-9738")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - Set data in all fields - " +
            "Click on the save Register button - " +
            "Validate that a new person record is created - " +
            "Validate that 2 new portal task records are created (for initial Assessment and financial Assessment)")]
        public void SampleWorkflowsToPopulateToDolist_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var PortalCreateInitialAssessmentWFId = new Guid("76b54cb7-406d-eb11-a309-005056926fe4"); //Portal - Create Initial Assessment
            var PortalCreateFinancialAssessmentWFId = new Guid("0a355f4b-406d-eb11-a309-005056926fe4"); //Portal - Create Financial Assessment
            var teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5"); //CareDirector QA
            var email = "StaffordshireCitizenPortalUser" + DateTime.Now.ToString("ddMMyyyyHHmmss")  + "@mail.com";

            //remove any matching website user
            foreach (var websiteuserid in dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, email))
                dbHelper.websiteUser.DeleteWebsiteUser(websiteuserid);

            //remove any matching person record
            foreach (var personid in dbHelper.person.GetByPrimaryEmail(email))
            {
                //remove any case linked to the person
                foreach (var caseid in dbHelper.Case.GetCasesByPersonID(personid))
                {
                    foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseid))
                        dbHelper.caseForm.DeleteCaseForm(caseformid);

                    foreach (var caseinvolvementid in dbHelper.CaseInvolvement.GetByCaseID(caseid))
                        dbHelper.CaseInvolvement.DeleteCaseInvolvement(caseinvolvementid);

                    foreach (var casestatushistoryid in dbHelper.CaseStatusHistory.GetByCaseID(caseid))
                        dbHelper.CaseStatusHistory.DeleteCaseStatusHistory(casestatushistoryid);

                    dbHelper.Case.DeleteCase(caseid);
                }

                //remove all financial assessments
                foreach (var financialassessmentid in dbHelper.financialAssessment.GetFinancialAssessmentByPersonID(personid.ToString()))
                    dbHelper.financialAssessment.DeleteFinancialAssessment(financialassessmentid);

                //remove any portal task linked to the person
                foreach (var addressid in dbHelper.portalTask.GetByTargetUserId(personid))
                    dbHelper.portalTask.DeletePortalTask(addressid);

                dbHelper.person.UpdateLinkedAddress(personid, null);

                foreach (var addressid in dbHelper.personAddress.GetByPersonId(personid))
                    dbHelper.personAddress.DeletePersonAddress(addressid);

                foreach (var emailid in dbHelper.email.GetEmailByRegardingID(personid))
                    dbHelper.email.DeleteEmail(emailid);

                dbHelper.person.DeletePerson(personid);
            }



            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress(email)
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")

                .InsertFirstName("Antonyett")
                .InsertLastName("Brandoner")
                .ClickDateOfBirthField()
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000")
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")
                .InsertNHSNo("9876543210")
                .InsertNationalInsuranceNumber("1234567890")

                .InsertPropertyName("pna")
                .InsertPropertyNo("pno")
                .InsertStreet("st")
                .InsertVillageDistrict("vil")
                .InsertTownCity("tow")
                .InsertCounty("cou")
                .InsertPostcode("postc")
                .InsertHomePhone("123456")
                .InsertMobilePhone("654321")

                .ClickOnRegisterButton();

            registrationSuccessPage
                .WaitForRegistrationSuccessPageToLoad();

            var personRecords = dbHelper.person.GetByPrimaryEmail(email);
            Assert.AreEqual(1, personRecords.Count);

            var websiteUserRecords = dbHelper.websiteUser.GetByWebSiteIDAndUserName(websiteid, email);
            Assert.AreEqual(1, websiteUserRecords.Count);

            var portalTasks = dbHelper.portalTask.GetByTargetUserId(personRecords[0]);
            Assert.AreEqual(2, portalTasks.Count);


            var portalTask1 = dbHelper.portalTask.GetByTargetUserIdAndWorkflowId(personRecords[0], PortalCreateInitialAssessmentWFId)[0];
            var fields = dbHelper.portalTask.GetByID(portalTask1, "websiteid", "name", "portaltaskstatusid", "ownerid");
            Assert.AreEqual(websiteid, fields["websiteid"]);
            Assert.AreEqual("Create Initial Assessment portal task", fields["name"]);
            Assert.AreEqual(1, fields["portaltaskstatusid"]);
            Assert.AreEqual(teamid, fields["ownerid"]);

            var portalTask2 = dbHelper.portalTask.GetByTargetUserIdAndWorkflowId(personRecords[0], PortalCreateFinancialAssessmentWFId)[0];
            fields = dbHelper.portalTask.GetByID(portalTask2, "websiteid", "name", "portaltaskstatusid", "ownerid");
            Assert.AreEqual(websiteid, fields["websiteid"]);
            Assert.AreEqual("Create Financial Assessment portal task", fields["name"]);
            Assert.AreEqual(1, fields["portaltaskstatusid"]);
            Assert.AreEqual(teamid, fields["ownerid"]);

        }



        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8333

        [Test]
        [Property("JiraIssueID", "CDV6-9770")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on a To Do List record view button (Action = View Record) - " +
            "Validate that the user is redirected to the record page")]
        public void ToDoList_PortalTaskAction_ViewRecord_TestMethod03()
        {
            var portalTaskID = new Guid("87d671d2-4d80-ec11-a330-f90a4322a942");//Dean Franks View Record Task
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);


            //set the status to New
            dbHelper.portalTask.UpdateStatus(portalTaskID, 1);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser21@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickMyToDoListViewRecordButton(portalTaskID.ToString());

            attachmentPage
                .WaitForExistingAttachmentPageToLoad()
                .ValidateAttachmentTitleText("Dean Franks person attachment 03")
                .ValidateAttachmentFileNameText("DocToUpload.txt (19.14 KB)");

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8712

        [Test]
        [Property("JiraIssueID", "CDV6-9710")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - Click on a View Assessment Button for an assessment that contains a print template with 'Valid for Print History on Close' = Yes - " +
            "Wait for the assessment page to load - tap on the View In PDF button - Validate that the PDF popup is displayed")]
        public void PrintAssessment_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("f1b4ae77-9f64-eb11-a308-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSaveAndNextButton("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-69")
                .ClickViewInPDFButton("QA-DS-69");

            var allWindowsHandles = this.GetAllWindows();
            Assert.AreEqual(2, allWindowsHandles.Count);

            var currentWindowHandle = this.GetCurrentWindow();
            var popupWindowHandle = allWindowsHandles.Where(c => !c.Equals(currentWindowHandle)).FirstOrDefault();
            this.SwitchWindow(popupWindowHandle);

            pdfPopupPage
                .WaitForPdfPopupPageToLoad();

            System.Threading.Thread.Sleep(3000);
            bool fileExists = fileIOHelper.ValidateIfFileExists(this.DownloadsDirectory, "download.pdf");
            Assert.IsTrue(fileExists);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9711")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on a View Assessment Button for an assessment that do not contains any print template with 'Valid for Print History on Close' = Yes - " +
            "Wait for the assessment page to load - tap on the View In PDF button - " +
            "Validate that the PDF popup is displayed with an error message - " +
            "CODE UPDATE --> now the View in PDF button is only visible if it has pdf templates")]
        public void PrintAssessment_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var websiteUserID = new Guid("866b3c24-235f-eb11-a305-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("5a717285-9f64-eb11-a308-005056926fe4"); //Automated UI Test Document 3

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser1@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 3")
                .WaitForSectionToLoad("QA-DS-134")
                //.ClickViewInPDFButton("QA-DS-134");
                .ValidateViewInPDFButtonVisibility("QA-DS-134", false);

            //var allWindowsHandles = this.GetAllWindows();
            //Assert.AreEqual(2, allWindowsHandles.Count);

            //var currentWindowHandle = this.GetCurrentWindow();
            //var popupWindowHandle = allWindowsHandles.Where(c => !c.Equals(currentWindowHandle)).FirstOrDefault();
            //this.SwitchWindow(popupWindowHandle);

            //pdfPopupPage
            //    .WaitForPdfPopupPageToLoadWithErrorMessage("{\"errorMessage\":\"The record you are attempting to access cannot be displayed because it is either deleted or your security privileges prevent access.\",\"errorCode\":\"RecordNotFoundNoArguments\"}");
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8694

        [Test]
        [Property("JiraIssueID", "CDV6-9356")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment that contains all available question types) - " +
            "Wait for the home page to load - Click on a View Assessment Button - Validate that the user is redirected to the Assessment page")]
        public void Assessments_RenderQuestionsInPortal_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9357")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment that contains all available question types) - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate that all Section links are displayed on the right side")]
        public void Assessments_RenderQuestionsInPortal_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")

                .ValidateSectionLinkText("QA-DS-66", "Section 1")
                .ValidateSectionLinkText("QA-DS-69", "Section 2")
                ;
        }





        [Test]
        [Property("JiraIssueID", "CDV6-9358")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate that the Section 1 title is displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ValidateSectionTitleText("QA-DS-66", "Section 1");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9359")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate that all sub-sections titles (inside Section 1) are displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSubSectionToLoad("QA-DS-68")
                .ValidateSubSectionTitleText("QA-DS-68", "Section 1.1")

                .WaitForSubSectionToLoad("QA-DS-67")
                .ValidateSubSectionTitleText("QA-DS-67", "Section 1.2")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9360")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate that the Section 1 Question titles are displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")

                .ValidateQuestionTitleText("QA-DSQ-148", "WF Multiple Choice")
                .ValidateQuestionTitleText("QA-DSQ-143", "WF Decimal")
                .ValidateQuestionTitleText("QA-DSQ-149", "WF Multiple Response")
                .ValidateQuestionTitleText("QA-DSQ-150", "WF Numeric")
                .ValidateQuestionTitleText("QA-DSQ-142", "WF Date")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9361")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate that the Sub Section 1.1 Question titles are displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSubSectionToLoad("QA-DS-68")

                .ValidateSubSectionQuestionTitleText("QA-DSQ-151", "WF Paragraph")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9362")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate that the Sub Section 1.2 Question titles are displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSubSectionToLoad("QA-DS-67")

                .ValidateSubSectionQuestionTitleText("QA-DSQ-152", "WF PickList")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9363")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate that the Section 1 'WF Multiple Choice' question options are displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")

                .ValidateRadioButtonQuestionTextVisibility("QA-DQ-169", "Option 1", true)
                .ValidateRadioButtonQuestionTextVisibility("QA-DQ-169", "Option 2", true)
                .ValidateRadioButtonQuestionTextVisibility("QA-DQ-169", "Option 3", true)

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9364")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate Section 1 question answers")]
        public void Assessments_RenderQuestionsInPortal_TestMethod09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")

                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", "e92f3c2d-3f52-e911-a2c5-005056926fe4", false)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", "f12f3c2d-3f52-e911-a2c5-005056926fe4", true)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", "4a306139-3f52-e911-a2c5-005056926fe4", false)

                .ValidateMosaicQuestionInputValue("QA-DQ-164", "23.19")

                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 1", true)
                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 2", false)
                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 3", true)

                .ValidateMosaicQuestionInputValue("QA-DQ-171", "17")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-163", "2021-03-12T00:00:00")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9365")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate Sub Section 1.1 question answers")]
        public void Assessments_RenderQuestionsInPortal_TestMethod10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicQuestionInputValue("QA-DQ-172", "line 1\r\nline 2")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9366")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate Sub Section 1.2 question answers")]
        public void Assessments_RenderQuestionsInPortal_TestMethod11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")

                .ValidatePicklistQuestionSelectedText("QA-DQ-173", "Christian")

                ;
        }







        [Test]
        [Property("JiraIssueID", "CDV6-9367")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - Click on the Section 2 Link - " +
            "Validate that the Section 2 title is displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")

                .ClickSectionLink("QA-DS-69")

                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9368")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - Click on the Section 2 Link - " +
            "Validate that the Section 2 Question titles are displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod13()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateQuestionTitleText("QA-DSQ-153", "WF Short Answer")

                .ValidateTableWithHeaderQuestion_TableTitle("QA-DSQ-155", "Test HQ")
                .ValidateTableWithHeaderQuestion_QuestionHeadingVisibility("QA-DSQ-155", "Location", true)
                .ValidateTableWithHeaderQuestion_QuestionHeadingVisibility("QA-DSQ-155", "Test Dec", true)

                .ValidateTableWithPrimaryQuestion_TableTitle("QA-DSQ-157", "Table PQ")
                .ValidateTableWithPrimaryQuestion_RowHeadingVisibility("QA-DSQ-157", "Question 1", true)
                .ValidateTableWithPrimaryQuestion_RowSubHeadingVisibility("QA-DSQ-157", "Question 1 - Sub Heading", true)
                .ValidateTableWithPrimaryQuestion_QuestionHeadingVisibility("QA-DSQ-157", "Contribution Notes", true)
                .ValidateTableWithPrimaryQuestion_QuestionHeadingVisibility("QA-DSQ-157", "Role", true)
                .ValidateTableWithPrimaryQuestion_RowHeadingVisibility("QA-DSQ-157", "Question 2", true)
                .ValidateTableWithPrimaryQuestion_RowSubHeadingVisibility("QA-DSQ-157", "Question 2 - Sub Heading", true)

                .ValidateTableWithQuestionsPerCell_TableTitle("QA-DSQ-158", "Test QPC")
                .ValidateTableWithQuestionsPerCell_QuestionHeading("QA-DSQ-158", "Outcome", true)
                .ValidateTableWithQuestionsPerCell_QuestionHeading("QA-DSQ-158", "Type of Involvement", true)
                .ValidateTableWithQuestionsPerCell_QuestionHeading("QA-DSQ-158", "WF Time", true)
                .ValidateTableWithQuestionsPerCell_QuestionHeading("QA-DSQ-158", "Who", true)

                .ValidateQuestionTitleText("QA-DSQ-159", "WF Boolean")
                .ValidateQuestionTitleText("QA-DSQ-160", "WF Text")
                .ValidateQuestionTitleText("QA-DSQ-161", "WF Time")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9369")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - Click on the Section 2 Link - " +
            "Validate that the Section 2 'WF Boolean' question options are displayed")]
        public void Assessments_RenderQuestionsInPortal_TestMethod14()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateRadioButtonQuestionTextVisibility("QA-DQ-186", "Yes", true)
                .ValidateRadioButtonQuestionTextVisibility("QA-DQ-186", "No", true)

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9370")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automated UI Test Document 1') - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - Click on the Section 2 Link - " +
            "Validate Section 2 question answers")]
        public void Assessments_RenderQuestionsInPortal_TestMethod15()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("de166c54-2083-eb11-a31a-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-174", "line 1 ...")

                .ValidateMosaicQuestionInputValue("QA-DQ-177", "location 1")
                .ValidateMosaicQuestionInputValue("QA-DQ-178", "6.00")
                .ValidateMosaicQuestionInputValue("QA-DQ-179", "location 2")
                .ValidateMosaicQuestionInputValue("QA-DQ-180", "19.00")

                .ValidateMosaicQuestionInputValue("QA-DQ-253", "Contribution Notes 1 Line 1\r\nContribution Notes 1 Line 2")
                .ValidateMosaicQuestionInputValue("QA-DQ-255", "Role 1 ...")
                .ValidateMosaicQuestionInputValue("QA-DQ-254", "Contribution Notes 2 Line 1\r\nContribution Notes 2 Line 2")
                .ValidateMosaicQuestionInputValue("QA-DQ-256", "Role 2 ...")

                .ValidateMosaicQuestionInputValue("QA-DQ-185", "Outcome 1 ...")
                .ValidateMosaicQuestionInputValue("QA-DQ-258", "Type of Involvement 1 ...")
                .ValidateMosaicTimeQuestionInputValue("QA-DQ-260", "07:50")
                .ValidateMosaicQuestionInputValue("QA-DQ-262", "Who 1 ...")

                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-186", "1", true)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-186", "0", false)

                .ValidateMosaicTimeQuestionInputValue("QA-DQ-188", "20:00");
            ;
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8701

        [Test]
        [Property("JiraIssueID", "CDV6-9764")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 1' ) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Validate that the 'Assessment submitted successfully.' message is displayed - " +
            "Validate that the Case Form Status change to 'Complete'")]
        public void SubmitAssessment_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateAlertMessageVisibility("Assessment submitted successfully.", true);

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();


            var statusid = (int)dbHelper.caseForm.GetCaseFormByID(assessmentid, "assessmentstatusid")["assessmentstatusid"];
            Assert.AreEqual(2, statusid); //Case Form Status should be set to Complete

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9765")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 1' ) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Navigate back to the home page - Re-open the assessment  - Navigate to Section 2 - " +
            "Validate that the submit button is no longer displayed")]
        public void SubmitAssessment_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateAlertMessageVisibility("Assessment submitted successfully.", true);

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateSubmitButtonVisibility(false, "QA-DS-69");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9766")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 1' ) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Validate that the 'Assessment submitted successfully.' message is displayed - " +
            "validate that the assessment record is no longer visible")]
        public void SubmitAssessment_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateAlertMessageVisibility("Assessment submitted successfully.", true)

                .ValidateSectionLinkTextVisibility("QA-DS-66", false)
                .ValidateSectionLinkTextVisibility("QA-DS-69", false)
                .ValidateSectionVisibility("QA-DS-66", false)
                .ValidateSectionVisibility("QA-DS-69", false)
                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9767")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 5' without any answer set) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Validate that an error message is displayed to the user ")]
        public void SubmitAssessment_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("100b911b-ae88-eb11-a320-005056926fe4"); //Automated UI Test Document 5
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659",
                documentid, "Automated UI Test Document 5", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")

                .WaitForSectionToLoad("QA-DS-295")
                .ClickSectionLink("QA-DS-296")
                .WaitForSectionToLoad("QA-DS-296")

                .ClickSubmitButton("QA-DS-296");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")
                .ValidateWarningMessageVisibility(true)
                .ValidateWarningSectionInformationVisibility(1, true)
                .ValidateWarningQuestionInformationVisibility(1, 1, true)
                .ValidateWarningSectionInformationVisibility(2, true)
                .ValidateWarningQuestionInformationVisibility(2, 1, true)
                .ValidateWarningQuestionInformationVisibility(2, 2, true)
                .ValidateWarningMessageText("The following Questions are mandatory and have to be answered before the assessment can be submitted")
                .ValidateWarningSectionInformationText(1, "Section 1")
                .ValidateWarningQuestionInformationText(1, 1, "WF Decimal")
                .ValidateWarningSectionInformationText(2, "Section 2")
                .ValidateWarningQuestionInformationText(2, 1, "WF Date")
                .ValidateWarningQuestionInformationText(2, 2, "WF Numeric")
                ;


        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8924

        [Test]
        [Property("JiraIssueID", "CDV6-9375")]
        [Description("Testing document rules - Execute Client Side Rules")]
        public void DocumentRules_TestMethod001()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 1 - Rule Type Testing - Client Side - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("Rule Activated - UI Testing - 1 - Rule Type Testing - Client Side - 0001")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9376")]
        [Description("Testing document rules - Execute Server Side Rules")]
        public void DocumentRules_TestMethod002()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 2 - Rule Type Testing - Server Side - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("Rule Activated - UI Testing - 2 - Rule Type Testing - Server Side - 0001")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        #region Rule Event

        [Test]
        [Property("JiraIssueID", "CDV6-9377")]
        [Description("Testing document rules - Test a Load Document Rule event")]
        public void DocumentRules_TestMethod003()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 3 - Rule Events Testing - Load Document - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-174", "")

                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9378")]
        [Description("Testing document rules - Test a Load Section Rule event")]
        public void DocumentRules_TestMethod004()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 4 - Rule Events Testing - Load Section - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            assessmentPage
                .ValidateSubSectionLinkVisibility("QA-DS-68", false) //left menu link should not be visible
                .ValidateSubSectionVisibility("QA-DS-68", false) //section area should not be displayed
                .ValidateSubSectionQuestionTitleVisibility("QA-DSQ-151", false) //question inside the section should not be displayed
                .ValidateMosaicQuestionInputVisibility("QA-DQ-172", false); //question input should not be displayed

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9379")]
        [Description("Testing document rules - Test a Change Field Rule event (Positive Scenario)")]
        public void DocumentRules_TestMethod005_1()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Portal Testing - 5 - Rule Events Testing - Change Field - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateQuestionTitleVisibility("QA-DSQ-149", true) //WF Multiple Response should be visible
                .ValidateMultiResponseQuestionVisibility("QA-DQ-170", true) //WF Multiple Response should be visible

                .InsertQuestionInputValue("QA-DQ-164", "13945.71") //WF Decimal
                .InsertQuestionInputValue("QA-DQ-171", "10") //WF Numeric
                .InsertQuestionInputValue("QA-DQ-172", "some text") //WF Paragraph


                .ValidateQuestionTitleVisibility("QA-DSQ-149", false) //Now the WF Multiple Response should not be visible
                .ValidateMultiResponseQuestionVisibility("QA-DQ-170", false) //Now WF Multiple Response should not be visible
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9380")]
        [Description("Testing document rules - Test a Change Field Rule event (Negative Scenario)")]
        public void DocumentRules_TestMethod005_2()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Portal Testing - 5 - Rule Events Testing - Change Field - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateQuestionTitleVisibility("QA-DSQ-149", true) //WF Multiple Response should be visible
                .ValidateMultiResponseQuestionVisibility("QA-DQ-170", true) //WF Multiple Response should be visible

                .InsertQuestionInputValue("QA-DQ-164", "13945") //WF Decimal
                .InsertQuestionInputValue("QA-DQ-171", "10") //WF Numeric
                .InsertQuestionInputValue("QA-DQ-172", "some text") //WF Paragraph


                .ValidateQuestionTitleVisibility("QA-DSQ-149", true) //WF Multiple Response should still be visible
                .ValidateMultiResponseQuestionVisibility("QA-DQ-170", true) //WF Multiple Response should still be visible
                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9381")]
        [Description("Testing document rules - Test a Before Saving Document Rule event (Positive Scenario)")]
        public void DocumentRules_TestMethod006_1()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 6 - Rule Events Testing - Before Saving Document - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .InsertQuestionInputValue("QA-DQ-172", "some text")
                .ClickSaveAndNextButton("QA-DS-66");

            assessmentPage
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateQuestionWarningVisibility("QA-DQ-164", true)
                .ValidateQuestionWarningText("QA-DQ-164", "WF Decimal is required")
                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9382")]
        [Description("Testing document rules - Test a Before Saving Document Rule event (Negative Scenario)")]
        public void DocumentRules_TestMethod006_2()
        {

            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 6 - Rule Events Testing - Before Saving Document - 0001XXX");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .InsertQuestionInputValue("QA-DQ-172", "some text")
                .ClickSaveAndNextButton("QA-DS-66");

            assessmentPage
                .WaitForSectionToLoad("QA-DS-69");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9383")]
        [Description("Testing document rules - Test a After Saving Document Rule event (Positive Scenario)")]
        public void DocumentRules_TestMethod007_1()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 7 - Rule Events Testing - After Saving Document - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .InsertQuestionInputValue("QA-DQ-172", "some text...")
                .ClickSaveAndNextButton("QA-DS-66");

            assessmentPage
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateWarningMessageBaseVisibility(true)
                .ValidateWarningMessageBaseText("UI Testing - 7 - Rule Events Testing - After Saving Document - 0001 - Condition Activated");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9384")]
        [Description("Testing document rules - Test a After Saving Document Rule event (Negative Scenario)")]
        public void DocumentRules_TestMethod007_2()
        {

            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 7 - Rule Events Testing - After Saving Document - 0001X");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .InsertQuestionInputValue("QA-DQ-172", "some text...")
                .ClickSaveAndNextButton("QA-DS-66");

            assessmentPage
                .WaitForSectionToLoad("QA-DS-69")
                .ClickSaveAndPreviousButton("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateMosaicQuestionInputValue("QA-DQ-172", "some text...");
        }

        ///--->Those 2 tests cannot be executed in the portal as it is not posible to complete sections on the portal side
        //[Test]
        //[Property("JiraIssueID", "")]
        //[Description("Testing document rules - Test a On Complete of Section Rule event (Positive Scenario)")]
        //public void DocumentRules_TestMethod008_1()
        //{
        //    var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
        //    var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
        //    var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
        //    var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
        //    var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
        //    var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
        //    int assessmentstatusid = 1; //In Progress
        //    var startDate = new DateTime(2021, 3, 19);

        //    //Set website Email Verification Required to No
        //    dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

        //    //Reset two factor authentication for the website
        //    dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

        //    //remove any matching case form
        //    foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
        //        dbHelper.caseForm.DeleteCaseForm(caseformid);

        //    //create a new case form record
        //    var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

        //    //get the Document Question Identifier for 'WF Short Answer'
        //    var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

        //    //set the answer for the question
        //    var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
        //    dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 8 - Rule Events Testing - On Complete of Section - 0001");


        //    homePage
        //        .GoToHomePage()
        //        .WaitForHomePageToLoad()
        //        .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
        //        .InsertPassword("Passw0rd_!")
        //        .ClickLoginButton();

        //    memberHomePage
        //        .WaitForMemberHomePageToLoad()
        //        .ClickAssessmentViewDetailsButton(assessmentid.ToString());

        //    assessmentPage
        //        .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
        //        .WaitForSectionToLoad("QA-DS-66")

        //        .ClickSectionLink("QA-DS-69")
        //        .WaitForSectionToLoad("QA-DS-69")
        //        .ValidateSectionTitleText("QA-DS-69", "Section 2")
        //        .ClickSubmitButton("QA-DS-69");

        //    warningDialog
        //       .WaitForWarningDialogToLoad()

        //       .ValidateDialogTitleVisibility(true)
        //       .ValidateDialogMessageVisibility(true)

        //       .ValidateDialogTitleText("Complete Assessment")
        //       .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
        //       .ClickOkButton();

        //    assessmentPage
        //        .WaitForAssessmentPageToLoad("Automated UI Test Document 5")

        //    alertPopup
        //        .WaitForAlertPopupToLoad()
        //        .ValidateAlertText("Complete operation have been cancelled by OnComplete Rules")
        //        .TapOKButton();

        //    assessmentPage
        //        .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
        //        .WaitForSectionToLoad("QA-DS-69")
        //        .ValidateSectionTitleText("QA-DS-69", "Section 2");


        //}

        //[Test]
        //[Property("JiraIssueID", "")]
        //[Description("Testing document rules - Test a On Complete of Section Rule event (Negative Scenario)")]
        //public void DocumentRules_TestMethod008_2()
        //{
        //    var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
        //    var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
        //    var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
        //    var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
        //    var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
        //    var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
        //    int assessmentstatusid = 1; //In Progress
        //    var startDate = new DateTime(2021, 3, 19);

        //    //Set website Email Verification Required to No
        //    dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

        //    //Reset two factor authentication for the website
        //    dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

        //    //remove any matching case form
        //    foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
        //        dbHelper.caseForm.DeleteCaseForm(caseformid);

        //    //create a new case form record
        //    var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

        //    //get the Document Question Identifier for 'WF Short Answer'
        //    var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

        //    //set the answer for the question
        //    var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
        //    dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 8 - Rule Events Testing - On Complete of Section - 0001_Invalid");


        //    homePage
        //        .GoToHomePage()
        //        .WaitForHomePageToLoad()
        //        .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
        //        .InsertPassword("Passw0rd_!")
        //        .ClickLoginButton();

        //    memberHomePage
        //        .WaitForMemberHomePageToLoad()
        //        .ClickAssessmentViewDetailsButton(assessmentid.ToString());

        //    assessmentPage
        //        .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
        //        .WaitForSectionToLoad("QA-DS-66")

        //        .ClickSectionLink("QA-DS-69")
        //        .WaitForSectionToLoad("QA-DS-69")
        //        .ValidateSectionTitleText("QA-DS-69", "Section 2")
        //        .ClickSubmitButton("QA-DS-69")

        //        .ValidateAlertMessageVisibility("Assessment submitted successfully.", true)

        //        .ValidateSectionLinkTextVisibility("QA-DS-66", false)
        //        .ValidateSectionLinkTextVisibility("QA-DS-69", false)
        //        .ValidateSectionVisibility("QA-DS-66", false)
        //        .ValidateSectionVisibility("QA-DS-69", false);
        //}

        [Test]
        [Property("JiraIssueID", "CDV6-9385")]
        [Description("Testing document rules - Test a On Complete of Assessment Rule event (Positive Scenario)")]
        public void DocumentRules_TestMethod009_1()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 9 - Rule Events Testing - On Complete of Assessment - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")
                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateWarningMessageBaseVisibility(true)
                .ValidateWarningMessageBaseText("UI Testing - 9 - Rule Events Testing - On Complete of Assessment - 0001 - Cancel Save Activated");

            var statusid = (int)dbHelper.caseForm.GetCaseFormByID(assessmentid, "assessmentstatusid")["assessmentstatusid"];
            Assert.AreEqual(1, statusid); //Case Form Status should NOT be set to Complete

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9386")]
        [Description("Testing document rules - Test a On Complete of Assessment Rule event (Negative Scenario)")]
        public void DocumentRules_TestMethod009_2()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 9 - Rule Events Testing - On Complete of Assessment - 0001_Invalid");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")
                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateAlertMessageVisibility("Assessment submitted successfully.", true)

                .ValidateSectionLinkTextVisibility("QA-DS-66", false)
                .ValidateSectionLinkTextVisibility("QA-DS-69", false)
                .ValidateSectionVisibility("QA-DS-66", false)
                .ValidateSectionVisibility("QA-DS-69", false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9387")]
        [Description("Testing document rules - Test a Print Document Rule Event (Positive Scenario)")]
        public void DocumentRules_TestMethod011_1()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 11 - Rule Events Testing - Print Document - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());
            System.Threading.Thread.Sleep(1500);
            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickViewInPDFButton("QA-DS-66");


            fileIOHelper.WaitForFileToExist(DownloadsDirectory, "download.pdf", 30);
            string pdfText = pdfHelper.GetAllTextFromPDF(DownloadsDirectory, "download.pdf");
            Assert.IsFalse(pdfText.Contains("WF Date"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9388")]
        [Description("Testing document rules - Test a Print Document Rule Event (Nagative Scenario)")]
        public void DocumentRules_TestMethod011_2()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 11 - Rule Events Testing - Print Document - 0001_INVALID");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickViewInPDFButton("QA-DS-66");

            System.Threading.Thread.Sleep(3000);

            fileIOHelper.WaitForFileToExist(DownloadsDirectory, "download.pdf", 30);
            string pdfText = pdfHelper.GetAllTextFromPDF(DownloadsDirectory, "download.pdf");
            Assert.IsTrue(pdfText.Contains("UI Testing - 11 - Rule Events Testing - Print Document - 0001_INVALID"));
            Assert.IsFalse(pdfText.Contains("Rule Activated - 11 - Rule Events Testing - Print Document"));
        }

        #endregion

        #region Rule Conditions Testing

        #region Date Questions

        [Test]
        [Property("JiraIssueID", "CDV6-9389")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Does Not Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod013_1()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 13 - Rule Conditions Testing - Date Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9397")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Does Not Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod013_2()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0001");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, DateTime.Now);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9398")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod013_3()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0002");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, DateTime.Now);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 13 - Rule Conditions Testing - Date Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9399")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Contains Data (Nagative Scenario)")]
        public void DocumentRules_TestMethod013_4()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0002");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9400")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Equals (Positive Scenario)")]
        public void DocumentRules_TestMethod013_5()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0003");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 9, 1));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 13 - Rule Conditions Testing - Date Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9401")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Equals (Negative Scenario)")]
        public void DocumentRules_TestMethod013_6()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0003");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 9, 2));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9402")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Does Not Equal (Positive Scenario)")]
        public void DocumentRules_TestMethod013_7()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0004");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 8, 14));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 13 - Rule Conditions Testing - Date Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9403")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Does Not Equal (Negative Scenario)")]
        public void DocumentRules_TestMethod013_8()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0004");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 8, 15));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9404")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Is Greater Than (Positive Scenario)")]
        public void DocumentRules_TestMethod013_9()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0005");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 8, 17));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 13 - Rule Conditions Testing - Date Question - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9390")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Is Greater Than (Negative Scenario)")]
        public void DocumentRules_TestMethod013_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0005");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 8, 16));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9391")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Is Greater Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod013_11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0006");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 8, 20));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 13 - Rule Conditions Testing - Date Question - 0006 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9392")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Is Greater Than or Equal To (Negative Scenario)")]
        public void DocumentRules_TestMethod013_12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0006");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 8, 19));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9393")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Is Less Than (Positive Scenario)")]
        public void DocumentRules_TestMethod013_13()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0007");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 7, 9));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 13 - Rule Conditions Testing - Date Question - 0007 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9394")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Is Less Than (Negative Scenario)")]
        public void DocumentRules_TestMethod013_14()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0007");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 7, 10));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9395")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Is Less Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod013_15()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0008");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 7, 5));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 13 - Rule Conditions Testing - Date Question - 0008 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9396")]
        [Description("Testing document rules - Rule Conditions Testing - Date Question - Is Less Than or Equal To (Negative Scenario)")]
        public void DocumentRules_TestMethod013_16()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the question
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "UI Testing - 13 - Rule Conditions Testing - Date Question - 0008");

            //get the Document Question Identifier for 'WF Date Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 7, 6));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        #endregion

        #region Decimal Question

        [Test]
        [Property("JiraIssueID", "CDV6-9405")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Equals (Positive Scenario)")]
        public void DocumentRules_TestMethod014_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0001");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 12.3m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9406")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Equals (Negative Scenario)")]
        public void DocumentRules_TestMethod014_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0001");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 12.4m);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9407")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Does Not Equal (Positive Scenario)")]
        public void DocumentRules_TestMethod014_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0002");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 7.4m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9408")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Does Not Equal (Negative Scenario)")]
        public void DocumentRules_TestMethod014_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0002");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 7.3m);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9409")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Does Not Contain Data (Positive Scenario)")]
        public void DocumentRules_TestMethod014_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0003");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9410")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Does Not Contain Data (Negative Scenario)")]
        public void DocumentRules_TestMethod014_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0003");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 0.3m);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9411")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod014_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0004");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 7.4m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9412")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod014_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0004");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9413")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Between (Positive Scenario)")]
        public void DocumentRules_TestMethod014_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0005");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 1m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9414")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Between (Positive Scenario)")]
        public void DocumentRules_TestMethod014_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0005");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 3.5m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9415")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Between (Positive Scenario)")]
        public void DocumentRules_TestMethod014_11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0005");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9416")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Between (Negative Scenario)")]
        public void DocumentRules_TestMethod014_12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0005");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.1m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9417")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Between (Negative Scenario)")]
        public void DocumentRules_TestMethod014_13()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0005");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 0.9m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9418")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Not Between (Positive Scenario)")]
        public void DocumentRules_TestMethod014_14()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0006");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.1m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0006 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9419")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Not Between (Positive Scenario)")]
        public void DocumentRules_TestMethod014_15()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0006");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 9.7m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0006 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9420")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Not Between (Negative Scenario)")]
        public void DocumentRules_TestMethod014_16()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0006");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.2m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9421")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Not Between (Negative Scenario)")]
        public void DocumentRules_TestMethod014_17()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0006");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 7.4m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9422")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Not Between (Negative Scenario)")]
        public void DocumentRules_TestMethod014_18()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0006");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 9.2m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9423")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Greater Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod014_19()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0007");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 4m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0007 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9424")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Greater Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod014_20()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0007");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 4.09m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0007 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9425")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Greater Than or Equal To (Negative Scenario)")]
        public void DocumentRules_TestMethod014_21()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0007");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 3.9m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9426")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Greater Than (Positive Scenario)")]
        public void DocumentRules_TestMethod014_22()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0008");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.91m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0008 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9427")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Greater Than (Negative Scenario)")]
        public void DocumentRules_TestMethod014_23()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0008");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.9m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9428")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Greater Than (Negative Scenario)")]
        public void DocumentRules_TestMethod014_24()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0008");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.8m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9429")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Less Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod014_25()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0009");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 7.5m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0009 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9430")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Less Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod014_26()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0009");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 7.4m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0009 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9431")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Less Than or Equal To (Negative Scenario)")]
        public void DocumentRules_TestMethod014_27()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0009");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 7.51m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9432")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Less Than (Positive Scenario)")]
        public void DocumentRules_TestMethod014_28()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0010");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 9.89m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0010 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9433")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Less Than (Negative Scenario)")]
        public void DocumentRules_TestMethod014_29()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0010");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 9.9m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9434")]
        [Description("Testing document rules - Rule Conditions Testing - Decimal Question - Is Less Than (Negative Scenario)")]
        public void DocumentRules_TestMethod014_30()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 14 - Rule Conditions Testing - Decimal Question - 0010");

            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 10.5m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }


        #endregion

        #region Multiple Choice Question

        [Test]
        [Property("JiraIssueID", "CDV6-9435")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - In (Positive Scenario)")]
        public void DocumentRules_TestMethod015_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0001");

            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9436")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - In (Positive Scenario)")]
        public void DocumentRules_TestMethod015_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0001");

            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option3);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9437")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - In (Negative Scenario)")]
        public void DocumentRules_TestMethod015_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0001");

            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option1);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9438")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Not In (Positive Scenario)")]
        public void DocumentRules_TestMethod015_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0002");

            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9439")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Not In (Negative Scenario)")]
        public void DocumentRules_TestMethod015_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0002");

            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option3);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9440")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Not In (Negative Scenario)")]
        public void DocumentRules_TestMethod015_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0002");

            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option1);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9441")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Does Not Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod015_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0003");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9442")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Does Not Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod015_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0003");

            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option3);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9443")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod015_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0004");

            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9444")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod015_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("E92F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");
            var multipleChoice_Option3 = new Guid("4A306139-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 15 - Rule Conditions Testing - Multiple Choice Question - 0004");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }


        #endregion

        #region Multiple Response Question

        [Test]
        [Property("JiraIssueID", "CDV6-9445")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - In (Positive Scenario)")]
        public void DocumentRules_TestMethod016_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0001");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day2, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9446")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - In (Positive Scenario)")]
        public void DocumentRules_TestMethod016_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0001");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day3, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9447")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - In (Positive Scenario)")]
        public void DocumentRules_TestMethod016_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0001");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day2, true);
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day3, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9448")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - In (Negative Scenario)")]
        public void DocumentRules_TestMethod016_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0001");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day1, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9449")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - In (Negative Scenario)")]
        public void DocumentRules_TestMethod016_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9450")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Not In (Positive Scenario)")]
        public void DocumentRules_TestMethod016_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0002");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day2, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9451")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Not In (Positive Scenario)")]
        public void DocumentRules_TestMethod016_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0002");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9452")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Not In (Nagative Scenario)")]
        public void DocumentRules_TestMethod016_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0002");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day1, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9453")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Not In (Nagative Scenario)")]
        public void DocumentRules_TestMethod016_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0002");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day3, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9454")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Not In (Nagative Scenario)")]
        public void DocumentRules_TestMethod016_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0002");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day1, true);
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day3, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }


        [Test]
        [Property("JiraIssueID", "CDV6-9455")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Does Not Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod016_11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0003");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9456")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Does Not Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod016_12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0003");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day2, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }



        [Test]
        [Property("JiraIssueID", "CDV6-9457")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod016_13()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0004");

            //get the Document Question Identifier for 'WF Multiple Response Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID2, multipleresponse_Day2, true);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9458")]
        [Description("Testing document rules - Rule Conditions Testing - Multiple Choice Question - Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod016_14()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 16 - Rule Conditions Testing - Multiple Response Question - 0004");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        #endregion

        #region Numeric Question

        [Test]
        [Property("JiraIssueID", "CDV6-9459")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Equals (Positive Scenario)")]
        public void DocumentRules_TestMethod018_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0001");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 7);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9460")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Equals (Negative Scenario)")]
        public void DocumentRules_TestMethod018_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0001");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 8);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9461")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Does Not Equal (Positive Scenario)")]
        public void DocumentRules_TestMethod018_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0002");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 7);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9462")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Does Not Equal (Negative Scenario)")]
        public void DocumentRules_TestMethod018_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0002");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 4);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9463")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Does Not Contain Data (Positive Scenario)")]
        public void DocumentRules_TestMethod018_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0003");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9464")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Does Not Contain Data (Negative Scenario)")]
        public void DocumentRules_TestMethod018_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0003");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 4);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9465")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Contain Data (Positive Scenario)")]
        public void DocumentRules_TestMethod018_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0004");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 4);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9466")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Contain Data (Negative Scenario)")]
        public void DocumentRules_TestMethod018_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0004");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9467")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Between (Positive Scenario)")]
        public void DocumentRules_TestMethod018_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0005");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9468")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Between (Positive Scenario)")]
        public void DocumentRules_TestMethod018_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0005");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 4);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9469")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Between (Positive Scenario)")]
        public void DocumentRules_TestMethod018_11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0005");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9470")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Between (Negative Scenario)")]
        public void DocumentRules_TestMethod018_12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0005");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 1);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9471")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Between (Negative Scenario)")]
        public void DocumentRules_TestMethod018_13()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0005");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 6);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9472")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Not Between (Positive Scenario)")]
        public void DocumentRules_TestMethod018_14()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0006");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 4);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0006 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9473")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Not Between (Positive Scenario)")]
        public void DocumentRules_TestMethod018_15()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0006");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 9);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0006 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9474")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Not Between (Negative Scenario)")]
        public void DocumentRules_TestMethod018_16()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0006");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9475")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Not Between (Negative Scenario)")]
        public void DocumentRules_TestMethod018_17()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0006");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 7);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9476")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Not Between (Negative Scenario)")]
        public void DocumentRules_TestMethod018_18()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0006");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 8);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }






        [Test]
        [Property("JiraIssueID", "CDV6-9477")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Greater Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod018_19()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0007");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 40);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0007 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9478")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Greater Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod018_20()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0007");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 41);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0007 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9479")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Greater Than or Equal To (Negative Scenario)")]
        public void DocumentRules_TestMethod018_21()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0007");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 39);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9480")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Greater Than (Positive Scenario)")]
        public void DocumentRules_TestMethod018_22()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0008");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 16);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0008 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9481")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Greater Than (Negative Scenario)")]
        public void DocumentRules_TestMethod018_23()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0008");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 15);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9482")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Greater Than (Negative Scenario)")]
        public void DocumentRules_TestMethod018_24()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0008");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 14);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9483")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Less Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod018_25()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0009");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 31);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0009 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9484")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Less Than or Equal To (Positive Scenario)")]
        public void DocumentRules_TestMethod018_26()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0009");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 30);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0009 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9485")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Less Than or Equal To (Negative Scenario)")]
        public void DocumentRules_TestMethod018_27()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0009");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 32);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9486")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Less Than (Positive Scenario)")]
        public void DocumentRules_TestMethod018_28()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0010");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 49);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0010 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9487")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Less Than (Negative Scenario)")]
        public void DocumentRules_TestMethod018_29()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0010");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 50);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9488")]
        [Description("Testing document rules - Rule Conditions Testing - Numeric Question - Is Less Than (Negative Scenario)")]
        public void DocumentRules_TestMethod018_30()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 18 - Rule Conditions Testing - Numeric Question - 0010");

            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID2, 51);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }


        #endregion

        #region Paragraph Question

        [Test]
        [Property("JiraIssueID", "CDV6-9489")]
        [Description("Testing document rules - Rule Conditions Testing - Paragraph Question - Does Not Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod019_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9490")]
        [Description("Testing document rules - Rule Conditions Testing - Paragraph Question - Does Not Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod019_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0001");

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "value 1");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9491")]
        [Description("Testing document rules - Rule Conditions Testing - Paragraph Question - Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod019_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0002");

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "value 1");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9492")]
        [Description("Testing document rules - Rule Conditions Testing - Paragraph Question - Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod019_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0002");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9493")]
        [Description("Testing document rules - Rule Conditions Testing - Paragraph Question - Equals (Positive Scenario)")]
        public void DocumentRules_TestMethod019_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0003");

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "Value 1\r\nValue 2");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9494")]
        [Description("Testing document rules - Rule Conditions Testing - Paragraph Question - Equals (Negative Scenario)")]
        public void DocumentRules_TestMethod019_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0003");

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "Value 1");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9495")]
        [Description("Testing document rules - Rule Conditions Testing - Paragraph Question - Does Not Equal (Positive Scenario)")]
        public void DocumentRules_TestMethod019_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0004");

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "Value 1");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9496")]
        [Description("Testing document rules - Rule Conditions Testing - Paragraph Question - Does Not Equal (Negative Scenario)")]
        public void DocumentRules_TestMethod019_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 19 - Rule Conditions Testing - Paragraph Question - 0004");

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "Value 1\r\nValue 2");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        #endregion

        #region PickList Question

        [Test]
        [Property("JiraIssueID", "CDV6-9497")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - In (Positive Scenario)")]
        public void DocumentRules_TestMethod020_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0001");

            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Budist);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 20 - Rule Conditions Testing - PickList Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9498")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - In (Positive Scenario)")]
        public void DocumentRules_TestMethod020_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0001");

            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Christian);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 20 - Rule Conditions Testing - PickList Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9499")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - In (Negative Scenario)")]
        public void DocumentRules_TestMethod020_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0001");

            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Atheist);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9500")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - Not In (Positive Scenario)")]
        public void DocumentRules_TestMethod020_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0002");

            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Christian);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 20 - Rule Conditions Testing - PickList Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9501")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - Not In (Positive Scenario)")]
        public void DocumentRules_TestMethod020_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0002");

            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Jedi);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 20 - Rule Conditions Testing - PickList Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9502")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - Not In (Negative Scenario)")]
        public void DocumentRules_TestMethod020_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0002");

            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Atheist);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9503")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - Does Not Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod020_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0003");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 20 - Rule Conditions Testing - PickList Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9504")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - Does Not Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod020_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0003");

            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Atheist);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9505")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod020_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0004");

            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Atheist);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 20 - Rule Conditions Testing - PickList Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9506")]
        [Description("Testing document rules - Rule Conditions Testing - PickList Question - Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod020_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 20 - Rule Conditions Testing - PickList Question - 0004");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        #endregion

        #region Boolean Question

        [Test]
        [Property("JiraIssueID", "CDV6-9507")]
        [Description("Testing document rules - Rule Conditions Testing - Boolean Question - Does Not Contain Data (Positive Scenario)")]
        public void DocumentRules_TestMethod021_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            //By default when a new assessment is created the TrueFalseAnswer column in the DB is set to 'null'. 
            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9508")]
        [Description("Testing document rules - Rule Conditions Testing - Boolean Question - Does Not Contain Data (Negative Scenario)")]
        public void DocumentRules_TestMethod021_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0001");

            //get the Document Question Identifier for 'WF Boolean Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, true);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9509")]
        [Description("Testing document rules - Rule Conditions Testing - Boolean Question - Contain Data (Positive Scenario)")]
        public void DocumentRules_TestMethod021_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0002");

            //get the Document Question Identifier for 'WF Boolean Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9510")]
        [Description("Testing document rules - Rule Conditions Testing - Boolean Question - Contain Data (Negative Scenario)")]
        public void DocumentRules_TestMethod021_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0002");

            //set the answer for the WF Boolean question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, false);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9511")]
        [Description("Testing document rules - Rule Conditions Testing - Boolean Question - Equals (Positive Scenario)")]
        public void DocumentRules_TestMethod021_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0003");

            //get the Document Question Identifier for 'WF Boolean Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9512")]
        [Description("Testing document rules - Rule Conditions Testing - Boolean Question - Equals (Negative Scenario)")]
        public void DocumentRules_TestMethod021_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0003");

            //get the Document Question Identifier for 'WF Boolean Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, false);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9513")]
        [Description("Testing document rules - Rule Conditions Testing - Boolean Question - Does Not Equals (Positive Scenario)")]
        public void DocumentRules_TestMethod021_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0004");

            //get the Document Question Identifier for 'WF Boolean Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, false);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9514")]
        [Description("Testing document rules - Rule Conditions Testing - Boolean Question - Does Not Equals (Negative Scenario)")]
        public void DocumentRules_TestMethod021_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 21 - Rule Conditions Testing - Boolean Question - 0004");

            //get the Document Question Identifier for 'WF Boolean Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, true);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        #endregion

        #region Short Answer Question

        [Test]
        [Property("JiraIssueID", "CDV6-9515")]
        [Description("Testing document rules - Rule Conditions Testing - Short Answer Question - Does Not Contain Data (Positive Scenario)")]
        public void DocumentRules_TestMethod022_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID1, "UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9516")]
        [Description("Testing document rules - Rule Conditions Testing - Short Answer Question - Does Not Contain Data (Negative Scenario)")]
        public void DocumentRules_TestMethod022_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);
            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID1, "UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0001");


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "some value ...");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9517")]
        [Description("Testing document rules - Rule Conditions Testing - Short Answer Question - Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod022_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID1, "UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0002");

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "some value ...");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9518")]
        [Description("Testing document rules - Rule Conditions Testing - Short Answer Question - Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod022_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);
            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID1, "UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0002");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9519")]
        [Description("Testing document rules - Rule Conditions Testing - Short Answer Question - Equals (Positive Scenario)")]
        public void DocumentRules_TestMethod022_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID1, "UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0003");

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "V1");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9520")]
        [Description("Testing document rules - Rule Conditions Testing - Short Answer Question - Equals (Nagative Scenario)")]
        public void DocumentRules_TestMethod022_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID1, "UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0003");

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "V2");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }





        [Test]
        [Property("JiraIssueID", "CDV6-9521")]
        [Description("Testing document rules - Rule Conditions Testing - Short Answer Question - Does Not Equal (Positive Scenario)")]
        public void DocumentRules_TestMethod022_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID1, "UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0004");

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "V2");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9522")]
        [Description("Testing document rules - Rule Conditions Testing - Short Answer Question - Does Not Equal (Positive Scenario)")]
        public void DocumentRules_TestMethod022_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID1, "UI Testing - 22 - Rule Conditions Testing - Short Answer Question - 0004");

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "V1");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        #endregion

        #region Time Question

        [Test]
        [Property("JiraIssueID", "CDV6-9523")]
        [Description("Testing document rules - Rule Conditions Testing - Time Question - Equals (Positive Scenario)")]
        public void DocumentRules_TestMethod023_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 23 - Rule Conditions Testing - Time Question - 0001");

            //get the Document Question Identifier for 'WF Time Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 13, 15, 0));



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 23 - Rule Conditions Testing - Time Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9524")]
        [Description("Testing document rules - Rule Conditions Testing - Time Question - Equals (Negative Scenario)")]
        public void DocumentRules_TestMethod023_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 23 - Rule Conditions Testing - Time Question - 0001");

            //get the Document Question Identifier for 'WF Time Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2021, 3, 24, 13, 16, 0));




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9525")]
        [Description("Testing document rules - Rule Conditions Testing - Time Question - Does Not Equal (Positive Scenario)")]
        public void DocumentRules_TestMethod023_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 23 - Rule Conditions Testing - Time Question - 0002");

            //get the Document Question Identifier for 'WF Time Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2021, 3, 24, 13, 15, 0));



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 23 - Rule Conditions Testing - Time Question - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9526")]
        [Description("Testing document rules - Rule Conditions Testing - Time Question - Does Not Equal (Negative Scenario)")]
        public void DocumentRules_TestMethod023_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 23 - Rule Conditions Testing - Time Question - 0002");

            //get the Document Question Identifier for 'WF Time Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2021, 3, 24, 13, 20, 0));




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9527")]
        [Description("Testing document rules - Rule Conditions Testing - Time Question - Does Not Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod023_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 23 - Rule Conditions Testing - Time Question - 0003");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 23 - Rule Conditions Testing - Time Question - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9528")]
        [Description("Testing document rules - Rule Conditions Testing - Time Question - Does Not Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod023_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 23 - Rule Conditions Testing - Time Question - 0003");

            //get the Document Question Identifier for 'WF Time Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2021, 3, 24, 13, 20, 0));




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }





        [Test]
        [Property("JiraIssueID", "CDV6-9529")]
        [Description("Testing document rules - Rule Conditions Testing - Time Question - Contains Data (Positive Scenario)")]
        public void DocumentRules_TestMethod023_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 23 - Rule Conditions Testing - Time Question - 0004");

            //get the Document Question Identifier for 'WF Time Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2021, 3, 24, 13, 15, 0));



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 23 - Rule Conditions Testing - Time Question - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9530")]
        [Description("Testing document rules - Rule Conditions Testing - Time Question - Contains Data (Negative Scenario)")]
        public void DocumentRules_TestMethod023_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 23 - Rule Conditions Testing - Time Question - 0004");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }


        #endregion

        #region Table Questions

        [Test]
        [Property("JiraIssueID", "CDV6-9531")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - PQ - Row 1 (Positive Scenario)")]
        public void DocumentRules_TestMethod024_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0001");

            //get the Document Question Identifier for 'Question 1' - 'Contribution Notes' 
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-253")[0];

            //set the answer for the 'Question 1' - 'Contribution Notes' 
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "V1\r\nV2");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 24 - Rule Conditions Testing - Table Questions - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9532")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - PQ - Row 1 (Negative Scenario)")]
        public void DocumentRules_TestMethod024_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0001");

            //get the Document Question Identifier for 'Question 1' - 'Contribution Notes' 
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-253")[0];

            //set the answer for the 'Question 1' - 'Contribution Notes' 
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "some value ...");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9533")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - PQ - Row 2 (Positive Scenario)")]
        public void DocumentRules_TestMethod024_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0002");

            //get the Document Question Identifier for 'Question 2' - 'Role' 
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-256")[0];

            //set the answer for the 'Question 2' - 'Role' 
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "V2");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 24 - Rule Conditions Testing - Table Questions - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9534")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - PQ - Row 2 (Negative Scenario)")]
        public void DocumentRules_TestMethod024_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0002");

            //get the Document Question Identifier for 'Question 2' - 'Role' 
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-256")[0];

            //set the answer for the 'Question 2' - 'Role' 
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "V1");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9535")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - HQ - Row 1 (Positive Scenario)")]
        public void DocumentRules_TestMethod024_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0003");

            //get the Document Question Identifier for 'Test HQ' - 'Location' - 'Raw 1'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-177")[0];

            //set the answer for the 'Test HQ' - 'Location' - 'Raw 1'
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "Value 1");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 24 - Rule Conditions Testing - Table Questions - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9536")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - HQ - Row 1 (Negative Scenario)")]
        public void DocumentRules_TestMethod024_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0003");

            //get the Document Question Identifier for 'Test HQ' - 'Location' - 'Raw 1'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-177")[0];

            //set the answer for the 'Test HQ' - 'Location' - 'Raw 1'
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "Value X");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9537")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - HQ - Row 2 (Positive Scenario)")]
        public void DocumentRules_TestMethod024_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0004");

            //get the Document Question Identifier for 'Test HQ' - 'Test Dec' - 'Raw 2'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-180")[0];

            //set the answer for the 'Test HQ' - 'Test Dec' - 'Raw 2'
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.3m);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 24 - Rule Conditions Testing - Table Questions - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9538")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - HQ - Row 2 (Negative Scenario)")]
        public void DocumentRules_TestMethod024_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0004");

            //get the Document Question Identifier for 'Test HQ' - 'Test Dec' - 'Raw 2'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-180")[0];

            //set the answer for the 'Test HQ' - 'Test Dec' - 'Raw 2'
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.31m);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9539")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - QPC - Row 1 (Positive Scenario)")]
        public void DocumentRules_TestMethod024_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0005");

            //get the Document Question Identifier for 'Test QPC' - 'Outcome'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-185")[0];

            //set the answer for the 'Test QPC' - 'Outcome'
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "Value 1");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 24 - Rule Conditions Testing - Table Questions - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9540")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - QPC - Row 1 (Negative Scenario)")]
        public void DocumentRules_TestMethod024_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0005");

            //get the Document Question Identifier for 'Test QPC' - 'Outcome'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-185")[0];

            //set the answer for the 'Test QPC' - 'Outcome'
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "Value X");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }




        [Test]
        [Property("JiraIssueID", "CDV6-9541")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - QPC - Row 2 (Positive Scenario)")]
        public void DocumentRules_TestMethod024_11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0006");

            //get the Document Question Identifier for 'Test QPC' - 'Who'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-262")[0];

            //set the answer for the 'Test QPC' - 'Outcome'
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "Value 2");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 24 - Rule Conditions Testing - Table Questions - 0006 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9542")]
        [Description("Testing document rules - Rule Conditions Testing - Table Questions - QPC - Row 2 (Negative Scenario)")]
        public void DocumentRules_TestMethod024_12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 24 - Rule Conditions Testing - Table Questions - 0006");

            //get the Document Question Identifier for 'Test QPC' - 'Who'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-262")[0];

            //set the answer for the 'Test QPC' - 'Outcome'
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID2, "Value X");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        #endregion

        #region Entity Person

        [Test]
        [Property("JiraIssueID", "CDV6-9543")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Person - Check Lookup - (Positive Scenario)")]
        public void DocumentRules_TestMethod026_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 26 - Rule Conditions Testing - Entity Person - 0001");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 26 - Rule Conditions Testing - Entity Person - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9544")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Person - Check Short Answer - (Negative Scenario)")]
        public void DocumentRules_TestMethod026_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 26 - Rule Conditions Testing - Entity Person - 0002");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9545")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Person - Check Boolean - (Positive Scenario)")]
        public void DocumentRules_TestMethod026_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 26 - Rule Conditions Testing - Entity Person - 0003");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 26 - Rule Conditions Testing - Entity Person - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9546")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Person - Check Date - (Positive Scenario)")]
        public void DocumentRules_TestMethod026_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 26 - Rule Conditions Testing - Entity Person - 0004");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 26 - Rule Conditions Testing - Entity Person - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9547")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Person - Check Number - (Positive Scenario)")]
        public void DocumentRules_TestMethod026_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 26 - Rule Conditions Testing - Entity Person - 0005");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 26 - Rule Conditions Testing - Entity Person - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9548")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Case - Check Date & Time - (Positive Scenario)")]
        public void DocumentRules_TestMethod026_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 26 - Rule Conditions Testing - Entity Person - 0006");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 26 - Rule Conditions Testing - Entity Person - 0006 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9549")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Case - Check Paragraph - (Positive Scenario)")]
        public void DocumentRules_TestMethod026_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 26 - Rule Conditions Testing - Entity Person - 0007");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 26 - Rule Conditions Testing - Entity Person - 0007 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9550")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Case - Check Picklist - (Positive Scenario)")]
        public void DocumentRules_TestMethod026_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 26 - Rule Conditions Testing - Entity Person - 0008");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 26 - Rule Conditions Testing - Entity Person - 0008 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9551")]
        [Description("Testing document rules - Rule Conditions Testing - Entity Case - Check Date - (Positive Scenario)")]
        public void DocumentRules_TestMethod026_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - Portal - 26 - Rule Conditions Testing - Entity Person - 0009");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - Portal - 26 - Rule Conditions Testing - Entity Person - 0009 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        #endregion

        #endregion

        #region Rule Actions Testing

        #region Cancel Save

        [Test]
        [Property("JiraIssueID", "CDV6-9552")]
        [Description("Testing document rules - Rule Actions Testing - Cancel Save")]
        public void DocumentRules_TestMethod027_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 27 - Rule Actions Testing - Cancel Save - 0001");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .InsertQuestionInputValue("QA-DQ-172", "some text...")
                .ClickSaveAndNextButton("QA-DS-66", false);

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 27 - Rule Actions Testing - Cancel Save - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");


        }

        #endregion

        #region Empty Field

        [Test]
        [Property("JiraIssueID", "CDV6-9553")]
        [Description("Testing document rules - Rule Actions Testing - Empty Field")]
        public void DocumentRules_TestMethod028_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");

            var multipleChoice_Option1 = new Guid("e92f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option2 = new Guid("f12f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option3 = new Guid("4a306139-3f52-e911-a2c5-005056926fe4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 28 - Rule Actions Testing - Empty Field - 0001");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0]; //wf date
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId4 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0]; //wf multiple choice
            var documentQuestionIdentifierId5 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0]; //wf multiple response
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf date
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 7, 6));

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 9.3m);

            //set the answer for the wf multiple choice
            var documentAnswerID4 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId4)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID4, multipleChoice_Option2);

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID5 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId5)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID5, multipleresponse_Day1, true);
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID5, multipleresponse_Day2, true);


            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", multipleChoice_Option1.ToString(), false)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", multipleChoice_Option2.ToString(), false)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", multipleChoice_Option3.ToString(), false)

                .ValidateMosaicQuestionInputValue("QA-DQ-164", "")

                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 1", false)
                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 2", false)
                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 3", false)

                .ValidateMosaicQuestionInputValue("QA-DQ-171", "")

                .ValidateMosaicDateQuestionHiddenInputValue("QA-DQ-163", "")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9554")]
        [Description("Testing document rules - Rule Actions Testing - Empty Field")]
        public void DocumentRules_TestMethod028_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 28 - Rule Actions Testing - Empty Field - 0002");


            //get the Document Question Identifier for section 1.1 questions
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0]; //wf paragraph

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID6, "some text ...");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateMosaicQuestionInputValue("QA-DQ-172", "");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9555")]
        [Description("Testing document rules - Rule Actions Testing - Empty Field")]
        public void DocumentRules_TestMethod028_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist
            var picklistvalue_Budist = new Guid("15BD1C69-4252-E911-A2C5-005056926FE4"); //Budist
            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian
            var picklistvalue_Jedi = new Guid("70060BD0-052B-EA11-A2C8-005056926FE4"); //Jedi


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 28 - Rule Actions Testing - Empty Field - 0003");


            //get the Document Question Identifier for section 1.1 questions
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0]; //wf picklist

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Atheist);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidatePicklistQuestionSelectedText("QA-DQ-173", "--- Please Select ---");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9556")]
        [Description("Testing document rules - Rule Actions Testing - Empty Field")]
        public void DocumentRules_TestMethod028_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 28 - Rule Actions Testing - Empty Field - 0004");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-174", "");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9557")]
        [Description("Testing document rules - Rule Actions Testing - Empty Field")]
        public void DocumentRules_TestMethod028_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 28 - Rule Actions Testing - Empty Field - 0005");


            //get the Document Question Identifier for Section 2.1 questions
            var documentQuestionIdentifierId_testHQ_location_row1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-177")[0];
            var documentQuestionIdentifierId_testHQ_testdec_row1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];
            var documentQuestionIdentifierId_testHQ_location_row2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-179")[0];
            var documentQuestionIdentifierId_testHQ_testdec_row2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-180")[0];
            var documentQuestionIdentifierId_TablePQ_question1_contribution = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-253")[0];
            var documentQuestionIdentifierId_TablePQ_question1_role = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-255")[0];
            var documentQuestionIdentifierId_TablePQ_question2_contribution = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-254")[0];
            var documentQuestionIdentifierId_TablePQ_question2_role = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-256")[0];
            var documentQuestionIdentifierId_TestQPC_outcome = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-185")[0];
            var documentQuestionIdentifierId_TestQPC_typeofinvolvement = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-258")[0];
            var documentQuestionIdentifierId_TestQPC_wftime = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-260")[0];
            var documentQuestionIdentifierId_TestQPC_who = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-262")[0];
            var documentQuestionIdentifierId_wfboolean = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];
            var documentQuestionIdentifierId_wftime = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answers for Section 2.1 questions

            var documentAnswerID_testHQ_location_row1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_testHQ_location_row1)[0];
            var documentAnswerID_testHQ_testdec_row1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_testHQ_testdec_row1)[0];
            var documentAnswerID_testHQ_location_row2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_testHQ_location_row2)[0];
            var documentAnswerID_testHQ_testdec_row2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_testHQ_testdec_row2)[0];
            var documentAnswerID_TablePQ_question1_contribution = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_TablePQ_question1_contribution)[0];
            var documentAnswerID_TablePQ_question1_role = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_TablePQ_question1_role)[0];
            var documentAnswerID_TablePQ_question2_contribution = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_TablePQ_question2_contribution)[0];
            var documentAnswerID_TablePQ_question2_role = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_TablePQ_question2_role)[0];
            var documentAnswerID_TestQPC_outcome = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_TestQPC_outcome)[0];
            var documentAnswerID_TestQPC_typeofinvolvement = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_TestQPC_typeofinvolvement)[0];
            var documentAnswerID_TestQPC_wftime = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_TestQPC_wftime)[0];
            var documentAnswerID_TestQPC_who = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_TestQPC_who)[0];
            var documentAnswerID_wfboolean = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_wfboolean)[0];
            var documentAnswerID_wftime = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId_wftime)[0];


            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID_testHQ_location_row1, "v 1");
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID_testHQ_testdec_row1, 9.1m);
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID_testHQ_location_row2, "v 2");
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID_testHQ_testdec_row2, 3.7m);
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID_TablePQ_question1_contribution, "v 3");
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID_TablePQ_question1_role, "v 4");
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID_TablePQ_question2_contribution, "v 5");
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID_TablePQ_question2_role, "v 6");
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID_TestQPC_outcome, "v 7");
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID_TestQPC_typeofinvolvement, "v 8");
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID_TestQPC_wftime, new DateTime(2021, 3, 25, 9, 30, 0));
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID_TestQPC_who, "v 9");
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID_wfboolean, true);
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID_wftime, new DateTime(2021, 3, 25, 10, 15, 0));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-177", "")
                .ValidateMosaicQuestionInputValue("QA-DQ-178", "")
                .ValidateMosaicQuestionInputValue("QA-DQ-179", "")
                .ValidateMosaicQuestionInputValue("QA-DQ-180", "")

                .ValidateMosaicQuestionInputValue("QA-DQ-253", "")
                .ValidateMosaicQuestionInputValue("QA-DQ-255", "")
                .ValidateMosaicQuestionInputValue("QA-DQ-254", "")
                .ValidateMosaicQuestionInputValue("QA-DQ-256", "")

                .ValidateMosaicQuestionInputValue("QA-DQ-185", "")
                .ValidateMosaicQuestionInputValue("QA-DQ-258", "")
                .ValidateMosaicTimeQuestionHiddenInputValue("QA-DQ-260", "")
                .ValidateMosaicQuestionInputValue("QA-DQ-262", "")

                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-186", "1", false)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-186", "0", false)

                .ValidateMosaicTimeQuestionHiddenInputValue("QA-DQ-188", "");

        }

        #endregion

        #region Evaluate Formula

        [Test]
        [Property("JiraIssueID", "CDV6-9558")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Input from Questions")]
        public void DocumentRules_TestMethod029_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0001");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 10m);

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "2");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9559")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Input from Placeholders")]
        public void DocumentRules_TestMethod029_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0002");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 15m);

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "3");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9560")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Result to Placeholder")]
        public void DocumentRules_TestMethod029_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0003");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 20m);

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "4");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9561")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Extract value from Multiple Choice Question")]
        public void DocumentRules_TestMethod029_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0004");


            //get the Document Question Identifier for wf decimal
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 20m);


            //get the Document Question Identifier for wf multiple choice
            var documentQuestionIdentifierId4 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0]; //wf multiple choice

            //set the answer for the wf multiple choice
            var documentAnswerID4 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId4)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID4, multipleChoice_Option2);





            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "10");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9562")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Extract value from Picklist Question")]
        public void DocumentRules_TestMethod029_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0005");


            //get the Document Question Identifier for wf decimal
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 15m);


            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Christian);





            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "5");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9563")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Percentage")]
        public void DocumentRules_TestMethod029_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0006");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 200m);

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 50);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "100"); ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9564")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Multiply")]
        public void DocumentRules_TestMethod029_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0007");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 9.6m);

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 3);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "28.8"); ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9565")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Sum")]
        public void DocumentRules_TestMethod029_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0008");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 9.6m);

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 3);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "12.6"); ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9566")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Subtract")]
        public void DocumentRules_TestMethod029_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0009");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 9.6m);

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 3);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "6.6"); ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9567")]
        [Description("Testing document rules - Rule Actions Testing - Evaluate Formula - Divide - Sum two values minus a thrid")]
        public void DocumentRules_TestMethod029_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 29 - Rule Actions Testing - Evaluate Formula - 0010");


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 9.6m);

            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 3);



            //get the Document Question Identifier for wf multiple choice
            var documentQuestionIdentifierId4 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0]; //wf multiple choice

            //set the answer for the wf multiple choice
            var documentAnswerID4 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId4)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID4, multipleChoice_Option2);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-178", "10.6"); ;

        }

        #endregion

        #region Run another Rule

        [Test]
        [Property("JiraIssueID", "CDV6-9568")]
        [Description("Testing document rules - Rule Actions Testing - Run another Rule")]
        public void DocumentRules_TestMethod032_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 32 - Rule Actions Testing - Run another Rule - 0001");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 32 - Rule Actions Testing - Run another Rule - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            ;

        }

        #endregion

        #region Set Placeholder

        [Test]
        [Property("JiraIssueID", "CDV6-9569")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Boolean - Get From Question (Positive Scenario)")]
        public void DocumentRules_TestMethod033_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0001");



            //get the Document Question Identifier for 'WF Boolean'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, true);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0001 - Condition Activated (Yes)")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9570")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Boolean - Get From Question (Positive Scenario)")]
        public void DocumentRules_TestMethod033_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0001");



            //get the Document Question Identifier for 'WF Boolean'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID2, false);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0001 - Condition Activated (No)")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9571")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Boolean - Set value manually (Positive Scenario)")]
        public void DocumentRules_TestMethod033_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0002");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0002 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9572")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Boolean - get value from another Placeholder")]
        public void DocumentRules_TestMethod033_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0003");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0003 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9573")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Boolean - Display default value")]
        public void DocumentRules_TestMethod033_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "I Testing - 33 - Rule Actions Testing - Set Placeholder - 0004");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0004 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9574")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Date - set value equal to Question (Positive scenario)")]
        public void DocumentRules_TestMethod033_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0005");

            //get the Document Question Identifier for 'WF Date'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 9, 24));



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0005 - Rule Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9575")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Date - set value equal to Question (Negative scenario)")]
        public void DocumentRules_TestMethod033_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0005");

            //get the Document Question Identifier for 'WF Date'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 9, 25));



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9576")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Date - set value manually")]
        public void DocumentRules_TestMethod033_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0006");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateMosaicDateQuestionHiddenInputValue("QA-DQ-163", "2019-09-01")
                ;
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9577")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Decimal - set value equal to Question")]
        public void DocumentRules_TestMethod033_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0007");

            //get the Document Question Identifier for 'Test HQ; Test Dec; Row 1'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];

            //set the answer for the 'Test HQ; Test Dec; Row 1' question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 5.8m);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateMosaicQuestionInputValue("QA-DQ-164", "5.8")
                ;
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9578")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Decimal - set value manually")]
        public void DocumentRules_TestMethod033_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0008");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateMosaicQuestionInputValue("QA-DQ-164", "5.9")
                ;
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9580")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Numeric - set value equal to Question")]
        public void DocumentRules_TestMethod033_11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0009");


            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistvalue_Christian);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateMosaicQuestionInputValue("QA-DQ-171", "3")
                ;
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9581")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Numeric - set value manually")]
        public void DocumentRules_TestMethod033_12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0010");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateMosaicQuestionInputValue("QA-DQ-171", "12");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9582")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Text - set value equal to Question")]
        public void DocumentRules_TestMethod033_13()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0011");


            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID2, "value 1 ...");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicQuestionInputValue("QA-DQ-174", "value 1 ...")
                ;
            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9583")]
        [Description("Testing document rules - Rule Actions Testing - Placeholder - Text - set value manually")]
        public void DocumentRules_TestMethod033_14()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 33 - Rule Actions Testing - Set Placeholder - 0012");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicQuestionInputValue("QA-DQ-172", "Value 1 Value 2")
                ;
            ;

        }

        #endregion

        #region Set Question Mandatory

        [Test]
        [Property("JiraIssueID", "CDV6-9584")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Mandatory")]
        public void DocumentRules_TestMethod034_01()
        {
            //Assert.Inconclusive("Save functions are not working yet. Save is needed to check this rule action.");



            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 34 - Rule Actions Testing - Set Question Mandatory - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .InsertQuestionInputValue("QA-DQ-172", "some text...")
                .ClickSaveAndNextButton("QA-DS-66", false)
                .ValidateQuestionWarningVisibility("QA-DQ-164", true)
                .ValidateQuestionWarningText("QA-DQ-164", "WF Decimal is required");
            ;

        }

        #endregion

        #region Set Questions Readonly

        [Test]
        [Property("JiraIssueID", "CDV6-9585")]
        [Description("Testing document rules - Rule Actions Testing - Set Questions Readonly")]
        public void DocumentRules_TestMethod035_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("e92f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option2 = new Guid("f12f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option3 = new Guid("4a306139-3f52-e911-a2c5-005056926fe4");

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 35 - Rule Actions Testing - Set Question Readonly - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-169", multipleChoice_Option1.ToString(), true)
                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-169", multipleChoice_Option2.ToString(), true)
                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-169", multipleChoice_Option3.ToString(), true)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-164", true)
                .ValidateMultiResponseQuestionDisabled("QA-DQ-170", true)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-171", true)
                .ValidateMosaicDateQuestionInputDisabled("QA-DQ-163", true)

                .ValidateMosaicQuestionInputDisabled("QA-DQ-172", true)

                .ValidatePicklistQuestionDisabled("QA-DQ-173", true)

                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputDisabled("QA-DQ-174", false)

                .ValidateMosaicQuestionInputDisabled("QA-DQ-177", true)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-178", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-179", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-180", true)

                .ValidateMosaicQuestionInputDisabled("QA-DQ-253", true)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-255", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-254", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-256", true)

                .ValidateMosaicQuestionInputDisabled("QA-DQ-185", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-258", true)
                .ValidateMosaicTimeQuestionInputDisabled("QA-DQ-260", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-262", true)

                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-186", "1", true)
                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-186", "0", true)

                .ValidateMosaicTimeQuestionInputDisabled("QA-DQ-188", true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9586")]
        [Description("Testing document rules - Rule Actions Testing - Set Questions Readonly")]
        public void DocumentRules_TestMethod035_02()
        {
            //Assert.Inconclusive("Need the Save functionality to be available in order to finish this test");


            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option1 = new Guid("e92f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option2 = new Guid("f12f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option3 = new Guid("4a306139-3f52-e911-a2c5-005056926fe4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 35 - Rule Actions Testing - Set Question Readonly - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateSectionTitleText("QA-DS-66", "Section 1")


                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-169", multipleChoice_Option1.ToString(), true)
                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-169", multipleChoice_Option2.ToString(), true)
                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-169", multipleChoice_Option3.ToString(), true)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-164", true)
                .ValidateMultiResponseQuestionDisabled("QA-DQ-170", true)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-171", true)
                .ValidateMosaicDateQuestionInputDisabled("QA-DQ-163", true)

                .ValidateMosaicQuestionInputDisabled("QA-DQ-172", true)

                .ValidatePicklistQuestionDisabled("QA-DQ-173", true)

                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputDisabled("QA-DQ-174", false)

                .ValidateMosaicQuestionInputDisabled("QA-DQ-177", true)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-178", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-179", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-180", true)

                .ValidateMosaicQuestionInputDisabled("QA-DQ-253", true)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-255", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-254", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-256", true)

                .ValidateMosaicQuestionInputDisabled("QA-DQ-185", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-258", true)
                .ValidateMosaicTimeQuestionInputDisabled("QA-DQ-260", false)
                .ValidateMosaicQuestionInputDisabled("QA-DQ-262", true)

                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-186", "1", true)
                .ValidateRadioButtonQuestionOptionDisabled("QA-DQ-186", "0", true)

                .ValidateMosaicTimeQuestionInputDisabled("QA-DQ-188", true)
                ;
        }

        #endregion

        #region Set Question Text

        [Test]
        [Property("JiraIssueID", "CDV6-9587")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Text")]
        public void DocumentRules_TestMethod036_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - Portal - 36 - Rule Actions Testing - Set Question Text - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateSubSectionQuestionTitleText("QA-DSQ-152", "UI Testing - Portal - 36 - Rule Actions Testing - Set Question Text - 0001 - Condition Activated");
        }

        #endregion

        #region Set Section Text

        [Test]
        [Property("JiraIssueID", "CDV6-9588")]
        [Description("Testing document rules - Rule Actions Testing - Set Section Text")]
        public void DocumentRules_TestMethod036_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 36 - Rule Actions Testing - Set Section Text - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateSubSectionTitleText("QA-DS-68", "UI Testing - 36 - Rule Actions Testing - Set Section Text - 0001 - Condition Activated");
        }

        #endregion

        #region Set Question Value

        [Test]
        [Property("JiraIssueID", "CDV6-9589")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Date Question")]
        public void DocumentRules_TestMethod037_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicDateQuestionHiddenInputValue("QA-DQ-163", "2019-09-01");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9602")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Decimal Question")]
        public void DocumentRules_TestMethod037_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0002");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicQuestionInputValue("QA-DQ-164", "9.1");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9603")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Multiple Choice Question")]
        public void DocumentRules_TestMethod037_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            var multipleChoice_Option1 = new Guid("e92f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option2 = new Guid("f12f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option3 = new Guid("4a306139-3f52-e911-a2c5-005056926fe4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0003");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", multipleChoice_Option1.ToString(), false)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", multipleChoice_Option2.ToString(), true)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-169", multipleChoice_Option3.ToString(), false);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9604")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Multiple Response Question")]
        public void DocumentRules_TestMethod037_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0004");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 1", false)
                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 2", false)
                .ValidateMultiResponseQuestionAddedOptionVisibility("QA-DQ-170", "Day 3", true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9605")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Numeric Question")]
        public void DocumentRules_TestMethod037_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0005");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicQuestionInputValue("QA-DQ-171", "4");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9606")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Date Question")]
        public void DocumentRules_TestMethod037_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0006");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicDateQuestionHiddenInputValue("QA-DQ-163", "2021-03-01");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9607")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Date Question")]
        public void DocumentRules_TestMethod037_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0007");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicQuestionInputValue("QA-DQ-172", "Value 1\r\nValue 2");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9608")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Picklist Question")]
        public void DocumentRules_TestMethod037_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0008");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidatePicklistQuestionSelectedText("QA-DQ-173", "Christian");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9609")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Short Answer Question")]
        public void DocumentRules_TestMethod037_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0009");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-174", "Value 1 Value 2");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9590")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Table HQ Question")]
        public void DocumentRules_TestMethod037_010()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0010");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-177", "Value 1");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9591")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Table HQ Question")]
        public void DocumentRules_TestMethod037_011()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0011");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-180", "9.1");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9592")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Table QPC Question")]
        public void DocumentRules_TestMethod037_012()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0012");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-185", "Value 1");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9595")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Table QPC Question")]
        public void DocumentRules_TestMethod037_013()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0013");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicTimeQuestionHiddenInputValue("QA-DQ-260", "8:55 AM");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9596")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Boolean Question")]
        public void DocumentRules_TestMethod037_014()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0014");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-186", "1", true)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-186", "0", false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9597")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Time Question")]
        public void DocumentRules_TestMethod037_015()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0015");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicTimeQuestionHiddenInputValue("QA-DQ-188", "8:05 AM");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9598")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Table Question")]
        public void DocumentRules_TestMethod037_016()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0016");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-253", "V1\r\nV2");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9599")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Table Question")]
        public void DocumentRules_TestMethod037_017()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0017");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-256", "V1 V2");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9600")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Questions equal Placeholders")]
        public void DocumentRules_TestMethod037_018()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0018");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicQuestionInputValue("QA-DQ-164", "1.01")
                .ValidateMosaicQuestionInputValue("QA-DQ-171", "2")
                .ValidateMosaicQuestionInputValue("QA-DQ-172", "V1")
                .ValidateMosaicDateQuestionHiddenInputValue("QA-DQ-163", "2019-09-04")

                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-174", "V1")
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-186", "1", true)
                .ValidateRadioButtonQuestionOptionChecked("QA-DQ-186", "0", false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9601")]
        [Description("Testing document rules - Rule Actions Testing - Set Question Value - Copy Question To Question")]
        public void DocumentRules_TestMethod037_019()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 37 - Rule Actions Testing - Set Question Value - 0019");




            //get the Document Question Identifier for 'Test HQ; Test Dec; Row 1' question
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];

            //set the answer for the 'Test HQ; Test Dec; Row 1' question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID2, 7.2m);



            //get the Document Question Identifier for 'Table PQ; Question 1; Contribution Notes; Row 0' question
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-253")[0];

            //set the answer for the 'Table PQ; Question 1; Contribution Notes; Row 0' question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "Value 1");



            //get the Document Question Identifier for 'Test HQ; Location; Row 1' question
            var documentQuestionIdentifierId4 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-177")[0];

            //set the answer for the 'Test HQ; Location; Row 1' question
            var documentAnswerID4 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId4)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID4, "Value 2");


            //get the Document Question Identifier for 'Test QPC; WF Time; Row 2' question
            var documentQuestionIdentifierId5 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-260")[0];

            //set the answer for the 'Test QPC; WF Time; Row 2' question
            var documentAnswerID5 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId5)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID5, new DateTime(2021, 1, 1, 9, 35, 0));




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicQuestionInputValue("QA-DQ-164", "7.2")
                .ValidateMosaicQuestionInputValue("QA-DQ-172", "Value 1")

                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .ValidateMosaicQuestionInputValue("QA-DQ-174", "Value 2")
                .ValidateMosaicTimeQuestionHiddenInputValue("QA-DQ-188", "9:35 AM");
        }

        #endregion

        #region Hide / Show section

        [Test]
        [Property("JiraIssueID", "CDV6-9610")]
        [Description("Testing document rules - Rule Actions Testing - Hide Section")]
        public void DocumentRules_TestMethod038_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 38 - Rule Actions Testing - Hide Section - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateSubSectionVisibility("QA-DS-68", false)
                .ValidateSubSectionQuestionTitleVisibility("QA-DQ-172", false)
                .ValidateMosaicQuestionInputVisibility("QA-DQ-172", false)
                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9611")]
        [Description("Testing document rules - Rule Actions Testing - Show Section")]
        public void DocumentRules_TestMethod038_02()
        {
            //Assert.Inconclusive("Save functions are not available yet. Not possible to complete this test method");

            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 38 - Rule Actions Testing - Hide Section - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
            
            System.Threading.Thread.Sleep(2000);

            assessmentPage
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .InsertQuestionInputValue("QA-DQ-174", "UI Testing - 38 - Rule Actions Testing - Hide Section - 0002")
                .ClickSaveButton("QA-DS-69");

            System.Threading.Thread.Sleep(2000);

            assessmentPage
                .ClickSectionLink("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateSectionTitleText("QA-DS-66", "Section 1")

                .ValidateSubSectionVisibility("QA-DS-68", true)
                .ValidateSubSectionQuestionTitleVisibility("QA-DSQ-151", true)
                .ValidateMosaicQuestionInputVisibility("QA-DQ-172", true)
                ;

        }

        #endregion

        #region Hide Show Section Question

        [Test]
        [Property("JiraIssueID", "CDV6-9612")]
        [Description("Testing document rules - Rule Actions Testing - Hide Section Question")]
        public void DocumentRules_TestMethod039_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 39 - Rule Actions Testing - Hide Section Question - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateSubSectionVisibility("QA-DS-68", true)
                .ValidateSubSectionQuestionTitleVisibility("QA-DQ-172", false)
                .ValidateMosaicQuestionInputVisibility("QA-DQ-172", false)
                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9613")]
        [Description("Testing document rules - Rule Actions Testing - Show Section Question")]
        public void DocumentRules_TestMethod039_02()
        {
            //Assert.Inconclusive("Save functions are not available yet. Not possible to complete this test method");

            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 39 - Rule Actions Testing - Hide Section Question - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .InsertQuestionInputValue("QA-DQ-174", "UI Testing - 39 - Rule Actions Testing - Hide Section Question - 0002")
                .ClickSaveAndPreviousButton("QA-DS-69");

            assessmentPage
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateSectionTitleText("QA-DS-66", "Section 1")

                .ValidateSubSectionVisibility("QA-DS-68", true)
                .ValidateSubSectionQuestionTitleVisibility("QA-DSQ-151", true)
                .ValidateMosaicQuestionInputVisibility("QA-DQ-172", true)
                ;

        }

        #endregion

        #region Hide Show Single Question

        [Test]
        [Property("JiraIssueID", "CDV6-9614")]
        [Description("Testing document rules - Rule Actions Testing - Hide Single Question")]
        public void DocumentRules_TestMethod040_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 40 - Rule Actions Testing - Hide Single Question - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateSubSectionVisibility("QA-DS-68", true)
                .ValidateSubSectionQuestionTitleVisibility("QA-DQ-172", false)
                .ValidateMosaicQuestionInputVisibility("QA-DQ-172", false)
                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9615")]
        [Description("Testing document rules - Rule Actions Testing - Show Single Question")]
        public void DocumentRules_TestMethod040_02()
        {
            //Assert.Inconclusive("Save functions are not available yet. Not possible to complete this test method");

            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 40 - Rule Actions Testing - Hide Single Question - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

            System.Threading.Thread.Sleep(2000);

            assessmentPage
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSectionTitleText("QA-DS-69", "Section 2")

                .InsertQuestionInputValue("QA-DQ-174", "UI Testing - 40 - Rule Actions Testing - Hide Single Question - 0002")
                .ClickSaveAndPreviousButton("QA-DS-69");

            System.Threading.Thread.Sleep(2000);

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ClickSectionLink("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-66")
                .ValidateSectionTitleText("QA-DS-66", "Section 1")

                .ValidateSubSectionVisibility("QA-DS-68", true)
                .ValidateSubSectionQuestionTitleVisibility("QA-DSQ-151", true)
                .ValidateMosaicQuestionInputVisibility("QA-DQ-172", true)
                ;

        }

        #endregion

        #region Stop Rule

        [Test]
        [Property("JiraIssueID", "CDV6-9616")]
        [Description("Testing document rules - Rule Actions Testing - Stop Rule")]
        public void DocumentRules_TestMethod041_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 41 - Rule Actions Testing - Stop Rule - 0001");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        #endregion

        #region Sum

        [Test]
        [Property("JiraIssueID", "CDV6-9617")]
        [Description("Testing document rules - Rule Actions Testing - Sum")]
        public void DocumentRules_TestMethod042_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 42 - Rule Actions Testing - Sum - 0001");


            //get the Document Question Identifier for 'WF Multiple Choice Answer'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];

            //set the answer for the WF Multiple Choice Answer question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID2, multipleChoice_Option2);



            //get the Document Question Identifier for 'WF Numeric Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID3, 7);


            //get the Document Question Identifier for 'WF PickList Answer'
            var documentQuestionIdentifierId4 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answer for the WF PickList Answer question
            var documentAnswerID4 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId4)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID4, picklistvalue_Atheist);



            //get the Document Question Identifier for 'Test HQ; Test Dec; Row 1'
            var documentQuestionIdentifierId5 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];

            //set the answer for the 'Test HQ; Test Dec; Row 1' question
            var documentAnswerID5 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId5)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID5, 1.5m);


            //get the Document Question Identifier for 'Test HQ; Test Dec; Row 2'
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-180")[0];

            //set the answer for the 'Test HQ; Test Dec; Row 2' question
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID6, 4.4m);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateMosaicQuestionInputValue("QA-DQ-164", "15.9");



        }

        #endregion

        #endregion

        #region Rule Conditions Operator

        #region Question

        [Test]
        [Property("JiraIssueID", "CDV6-9618")]
        [Description("Testing document rules - Rule Conditions Operator - Decimal Question - Compare to Question")]
        public void DocumentRules_TestMethod043_01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0001");



            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 7.3m);



            //get the Document Question Identifier for 'Test HQ; Test Dec; Row 1'
            var documentQuestionIdentifierId5 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];

            //set the answer for the 'Test HQ; Test Dec; Row 1' question
            var documentAnswerID5 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId5)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID5, 7.3m);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0001 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");



        }

        [Test]
        [Property("JiraIssueID", "CDV6-9619")]
        [Description("Testing document rules - Rule Conditions Operator - Decimal Question - Compare to Question")]
        public void DocumentRules_TestMethod043_02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0001");



            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 7.3m);



            //get the Document Question Identifier for 'Test HQ; Test Dec; Row 1'
            var documentQuestionIdentifierId5 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];

            //set the answer for the 'Test HQ; Test Dec; Row 1' question
            var documentAnswerID5 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId5)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID5, 7.4m);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");



        }


        [Test]
        [Property("JiraIssueID", "CDV6-9620")]
        [Description("Testing document rules - Rule Conditions Operator - Paragraph Question - Compare to Question")]
        public void DocumentRules_TestMethod043_03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0005");



            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "UI Testing - 43 - Rule Conditions Operator - Question - 0005");





            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0005 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9621")]
        [Description("Testing document rules - Rule Conditions Operator - Paragraph Question - Compare to Question")]
        public void DocumentRules_TestMethod043_04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0005");



            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "UI Testing - 43 - Rule Conditions Operator - Question - XXX5");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }



        [Test]
        [Property("JiraIssueID", "CDV6-9622")]
        [Description("Testing document rules - Rule Conditions Operator - Short Answer Question - Compare to Question")]
        public void DocumentRules_TestMethod043_05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0006");



            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "UI Testing - 43 - Rule Conditions Operator - Question - 0006");





            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0006 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9623")]
        [Description("Testing document rules - Rule Conditions Operator - Short Answer Question - Compare to Question")]
        public void DocumentRules_TestMethod043_06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0006");



            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "UI Testing - 43 - Rule Conditions Operator - Question - XXX6");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }



        [Test]
        [Property("JiraIssueID", "CDV6-9624")]
        [Description("Testing document rules - Rule Conditions Operator - Time Question - Compare to Question")]
        public void DocumentRules_TestMethod043_07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "UI Testing - 43 - Rule Conditions Operator - Question - 0007");



            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "07:21");


            //get the Document Question Identifier for 'WF Time'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2020, 1, 1, 7, 21, 0));



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0007")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9625")]
        [Description("Testing document rules - Rule Conditions Operator - Time Question - Compare to Question")]
        public void DocumentRules_TestMethod043_08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Paragraph Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "UI Testing - 43 - Rule Conditions Operator - Question - 0007");



            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "07:21");


            //get the Document Question Identifier for 'WF Time'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time question
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2020, 1, 1, 7, 22, 0));



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9626")]
        [Description("Testing document rules - Rule Conditions Operator - Time Question - Compare to Question")]
        public void DocumentRules_TestMethod043_09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0008");



            //get the Document Question Identifier for 'WF Time'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID3, new DateTime(2020, 1, 1, 7, 30, 0));



            //get the Document Question Identifier for 'Test QPC; WF Time; Row 2'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-260")[0];

            //set the answer for the Test QPC; WF Time; Row 2
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2020, 1, 1, 7, 30, 0));





            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0008 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9627")]
        [Description("Testing document rules - Rule Conditions Operator - Time Question - Compare to Question")]
        public void DocumentRules_TestMethod043_10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var picklistvalue_Atheist = new Guid("DA2A9BA8-89A1-E911-A2C6-005056926FE4"); //Atheist

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0008");



            //get the Document Question Identifier for 'WF Time'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //set the answer for the WF Time
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID3, new DateTime(2020, 1, 1, 7, 30, 0));



            //get the Document Question Identifier for 'Test QPC; WF Time; Row 2'
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-260")[0];

            //set the answer for the Test QPC; WF Time; Row 2
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID2, new DateTime(2020, 1, 1, 7, 29, 0));





            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

        }



        [Test]
        [Property("JiraIssueID", "CDV6-9628")]
        [Description("Testing document rules - Rule Conditions Operator - Date Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0009");



            //get the Document Question Identifier for 'WF Date'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID3, new DateTime(2019, 9, 1));




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0009 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9629")]
        [Description("Testing document rules - Rule Conditions Operator - Date Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0009");



            //get the Document Question Identifier for 'WF Date'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //set the answer for the WF Date question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID3, new DateTime(2019, 9, 2));




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }




        [Test]
        [Property("JiraIssueID", "CDV6-9630")]
        [Description("Testing document rules - Rule Conditions Operator - Numeric Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_13()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0010");



            //get the Document Question Identifier for 'WF Numeric'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID3, 8);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0010 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9631")]
        [Description("Testing document rules - Rule Conditions Operator - Numeric Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_14()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0010");



            //get the Document Question Identifier for 'WF Numeric'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];

            //set the answer for the WF Numeric question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID3, 9);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }



        [Test]
        [Property("JiraIssueID", "CDV6-9632")]
        [Description("Testing document rules - Rule Conditions Operator - Decimal Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_15()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0011");



            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 9.5m);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0011 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");



        }

        [Test]
        [Property("JiraIssueID", "CDV6-9633")]
        [Description("Testing document rules - Rule Conditions Operator - Decimal Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_16()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0011");



            //get the Document Question Identifier for 'WF Decimal Answer'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];

            //set the answer for the WF Decimal Answer question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 7.3m);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");



        }



        [Test]
        [Property("JiraIssueID", "CDV6-9634")]
        [Description("Testing document rules - Rule Conditions Operator - Boolean Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_17()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0012");



            //get the Document Question Identifier for 'WF Boolean'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID3, true);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0012 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9635")]
        [Description("Testing document rules - Rule Conditions Operator - Boolean Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_18()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0012");



            //get the Document Question Identifier for 'WF Boolean'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //set the answer for the WF Boolean question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID3, false);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }



        [Test]
        [Property("JiraIssueID", "CDV6-9636")]
        [Description("Testing document rules - Rule Conditions Operator - Boolean Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_19()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0013");



            //get the Document Question Identifier for 'WF Paragraph'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "V 1");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0013 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9637")]
        [Description("Testing document rules - Rule Conditions Operator - Boolean Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_20()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0013");



            //get the Document Question Identifier for 'WF Paragraph'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //set the answer for the WF Paragraph question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID3, "V 2");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }



        [Test]
        [Property("JiraIssueID", "CDV6-9638")]
        [Description("Testing document rules - Rule Conditions Operator - Short Answer Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_21()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0014");



            //get the Document Question Identifier for 'Table PQ; Question 1; Role; Row 0'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-255")[0];

            //set the answer for the Table PQ; Question 1; Role; Row 0 question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID3, "V 1");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            alertPopup
                .WaitForAlertPopupToLoad()
                .ValidateAlertText("UI Testing - 43 - Rule Conditions Operator - Question - 0014 - Condition Activated")
                .TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9639")]
        [Description("Testing document rules - Rule Conditions Operator - Short Answer Question - Compare to Placeholder")]
        public void DocumentRules_TestMethod043_22()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for 'WF Short Answer'
            var documentQuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //set the answer for the WF Short Answer question
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID1, "UI Testing - 43 - Rule Conditions Operator - Question - 0014");



            //get the Document Question Identifier for 'Table PQ; Question 1; Role; Row 0'
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-255")[0];

            //set the answer for the Table PQ; Question 1; Role; Row 0 question
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID3, "V 2");




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");
        }


        #endregion

        #endregion

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8700

        [Test]
        [Property("JiraIssueID", "CDV6-9739")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - " +
            "Validate that the 'Save' and 'Save and Next' buttons are displayed - Validate that the 'Submit' button is not displayed ")]
        public void SaveAnswerFromSection_TestMethod001()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                
                .ValidateSaveButtonVisibility("QA-DS-66", true)
                .ValidateSaveAndNextButtonVisibility("QA-DS-66", true)
                .ValidateSubmitButtonVisibility(false, "QA-DS-66")
                .ValidateSubmitButtonVisibility(false, "QA-DS-69")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9740")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Click on Section 2 link - Wait for section 2 to load" +
            "Validate that the 'Save' and 'Submit' buttons are displayed - Validate that the 'Save and Next' button is not displayed ")]
        public void SaveAnswerFromSection_TestMethod002()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateSaveButtonVisibility("QA-DS-69", true)
                .ValidateSubmitButtonVisibility(true, "QA-DS-69")
                .ValidateSaveAndNextButtonVisibility("QA-DS-69", false)

                .ValidateSaveButtonVisibility("QA-DS-66", false)
                .ValidateSubmitButtonVisibility(false, "QA-DS-66")
                .ValidateSaveAndNextButtonVisibility("QA-DS-66", false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9741")]
        [Description("Open an In Progress assessment record - Wait for the Section 1 to load - Validate that 'View in PDF' button is displayed")]
        public void SaveAnswerFromSection_TestMethod003()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ValidateViewInPDFButtonVisibility("QA-DS-66", true)
                .ValidateViewInPDFButtonVisibility("QA-DS-69", false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9742")]
        [Description("Open an In Progress assessment record - Wait for the Section 1 to load - Navigate to Section 2 - Wait for Section 2 to load - Validate that 'View in PDF' button is displayed")]
        public void SaveAnswerFromSection_TestMethod004()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66");

            System.Threading.Thread.Sleep(2000);
            
            assessmentPage
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateViewInPDFButtonVisibility("QA-DS-66", false)
                .ValidateViewInPDFButtonVisibility("QA-DS-69", true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9743")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Set answers in Section 1 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod005()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickRadioButtonQuestionOption("QA-DQ-169", multipleChoice_Option2.ToString().ToLower()) //WF Multiple Choice
                .InsertQuestionInputValue("QA-DQ-164", "12.95") //WF Decimal
                .ClickMultiResponseQuestionAddButton("QA-DQ-170") //WF Multiple Response
                .ClickMultiResponseQuestionOption("QA-DQ-170", "Day 1")
                .ClickMultiResponseQuestionOption("QA-DQ-170", "Day 3")
                .InsertQuestionInputValue("QA-DQ-171", "6") //WF Numeric
                .InsertDateQuestion("QA-DQ-163", "29/03/2021") //WF Date

                .ClickSaveButton("QA-DS-66");


            //get the Document Question Identifiers
            var multiplechoice_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];
            var decimal_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];
            var multipleresponse_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];
            var numeric_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];
            var date_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multiplechoice_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "multichoiceanswerid");
            Assert.AreEqual(multipleChoice_Option2, fields["multichoiceanswerid"]);

            var decimal_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, decimal_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(decimal_documentAnswerID, "decimalanswer");
            Assert.AreEqual(12.95m, fields["decimalanswer"]);

            var multipleresponse_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multipleresponse_QuestionIdentifierId)[0];
            var documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day1)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day2)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(false, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day3)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            var numeric_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, numeric_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(numeric_documentAnswerID, "NumericAnswer");
            Assert.AreEqual(6, fields["numericanswer"]);

            var date_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, date_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(date_documentAnswerID, "DateAnswer");
            Assert.AreEqual(new DateTime(2021, 3, 29), fields["dateanswer"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9744")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Set answers in Section 1 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod006()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickRadioButtonQuestionOption("QA-DQ-169", multipleChoice_Option2.ToString().ToLower()) //WF Multiple Choice
                .InsertQuestionInputValue("QA-DQ-164", "12.95") //WF Decimal
                .ClickMultiResponseQuestionAddButton("QA-DQ-170") //WF Multiple Response
                .ClickMultiResponseQuestionOption("QA-DQ-170", "Day 1")
                .ClickMultiResponseQuestionOption("QA-DQ-170", "Day 3")
                .InsertQuestionInputValue("QA-DQ-171", "6") //WF Numeric
                .InsertDateQuestion("QA-DQ-163", "29/03/2021") //WF Date

                .ClickSaveAndNextButton("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-69")
                ;


            //get the Document Question Identifiers
            var multiplechoice_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];
            var decimal_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];
            var multipleresponse_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];
            var numeric_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];
            var date_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multiplechoice_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "multichoiceanswerid");
            Assert.AreEqual(multipleChoice_Option2, fields["multichoiceanswerid"]);

            var decimal_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, decimal_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(decimal_documentAnswerID, "decimalanswer");
            Assert.AreEqual(12.95m, fields["decimalanswer"]);

            var multipleresponse_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multipleresponse_QuestionIdentifierId)[0];
            var documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day1)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day2)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(false, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day3)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            var numeric_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, numeric_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(numeric_documentAnswerID, "NumericAnswer");
            Assert.AreEqual(6, fields["numericanswer"]);

            var date_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, date_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(date_documentAnswerID, "DateAnswer");
            Assert.AreEqual(new DateTime(2021, 3, 29), fields["dateanswer"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9745")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Set answers in Section 1.1 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod007()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .InsertQuestionInputValue("QA-DQ-172", "Value 1\r\nValue 2") //WF Decimal

                .ClickSaveButton("QA-DS-66");


            //get the Document Question Identifiers
            var paragraph_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, paragraph_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "paragraphanswer");
            Assert.AreEqual("Value 1\nValue 2", fields["paragraphanswer"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9746")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Set answers in Section 1.1 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod008()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .InsertQuestionInputValue("QA-DQ-172", "Value 1\r\nValue 2") //WF Decimal

                .ClickSaveAndNextButton("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-69");


            //get the Document Question Identifiers
            var paragraph_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, paragraph_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "paragraphanswer");
            Assert.AreEqual("Value 1\nValue 2", fields["paragraphanswer"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9747")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Set answers in Section 1.2 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod009()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);


            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickPicklistQuestionPicklist("QA-DQ-173")
                .ClickPicklistQuestionOption("QA-DQ-173", "Christian")

                .ClickSaveButton("QA-DS-66");


            //get the Document Question Identifiers
            var picklist_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //get the answers
            var picklist_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, picklist_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(picklist_documentAnswerID, "PicklistValueId");
            Assert.AreEqual(picklistvalue_Christian, fields["picklistvalueid"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9748")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Set answers in Section 1.2 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod010()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);


            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickPicklistQuestionPicklist("QA-DQ-173")
                .ClickPicklistQuestionOption("QA-DQ-173", "Christian")

                .ClickSaveAndNextButton("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-69");


            //get the Document Question Identifiers
            var picklist_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //get the answers
            var picklist_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, picklist_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(picklist_documentAnswerID, "PicklistValueId");
            Assert.AreEqual(picklistvalue_Christian, fields["picklistvalueid"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9749")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Set answers in Section 2 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod011()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertQuestionInputValue("QA-DQ-174", "Value 1 ...") //WF Decimal

                .ClickSaveButton("QA-DS-69");


            //get the Document Question Identifiers
            var shortanswer_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //get the answers
            var shortanswer_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, shortanswer_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(shortanswer_documentAnswerID, "ShortAnswer");
            Assert.AreEqual("Value 1 ...", fields["shortanswer"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9750")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Set answers in Section 2.1 Test HQ table questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod012()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertQuestionInputValue("QA-DQ-177", "value 1 ...")
                .InsertQuestionInputValue("QA-DQ-178", "9.1")
                .InsertQuestionInputValue("QA-DQ-179", "value 2 ...")
                .InsertQuestionInputValue("QA-DQ-180", "3.0")

                .ClickSaveButton("QA-DS-69");


            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-177")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual("value 1 ...", fields["shortanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "decimalanswer");
            Assert.AreEqual(9.1m, fields["decimalanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-179")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual("value 2 ...", fields["shortanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-180")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "decimalanswer");
            Assert.AreEqual(3m, fields["decimalanswer"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9751")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Set answers in Section 2.1 Table PQ table questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod013()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertQuestionInputValue("QA-DQ-253", "value 1 \r\nvalue 2")
                .InsertQuestionInputValue("QA-DQ-255", "value 1 ...")
                .InsertQuestionInputValue("QA-DQ-254", "value 3 \r\nvalue 4")
                .InsertQuestionInputValue("QA-DQ-256", "value 2 ...")

                .ClickSaveButton("QA-DS-69");


            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-253")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "paragraphanswer");
            Assert.AreEqual("value 1 \nvalue 2", fields["paragraphanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-255")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual("value 1 ...", fields["shortanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-254")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "paragraphanswer");
            Assert.AreEqual("value 3 \nvalue 4", fields["paragraphanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-256")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual("value 2 ...", fields["shortanswer"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9752")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Set answers in Section 2.1 Table QPC table questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod014()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertQuestionInputValue("QA-DQ-185", "value 1 ...")
                .InsertQuestionInputValue("QA-DQ-258", "value 2 ...")
                .InsertTimeQuestion("QA-DQ-260", "11:45")
                .InsertQuestionInputValue("QA-DQ-262", "value 3 ...")

                .ClickSaveButton("QA-DS-69");


            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-185")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual("value 1 ...", fields["shortanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-258")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual("value 2 ...", fields["shortanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-260")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "dateandtimeanswer");
            Assert.AreEqual(DateTime.Now.Date.AddHours(11).AddMinutes(45), ((DateTime)fields["dateandtimeanswer"]).ToLocalTime());



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-262")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual("value 3 ...", fields["shortanswer"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9753")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Set answers in Section 2.1 boolean and time questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void SaveAnswerFromSection_TestMethod015()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickRadioButtonQuestionOption("QA-DQ-186", "1")
                .InsertTimeQuestion("QA-DQ-188", "19:35")

                .ClickSaveButton("QA-DS-69");


            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "truefalseanswer");
            Assert.AreEqual(true, fields["truefalseanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "dateandtimeanswer");
            Assert.AreEqual(DateTime.Now.Date.AddHours(19).AddMinutes(35), ((DateTime)fields["dateandtimeanswer"]).ToLocalTime());


        }





        [Test]
        [Property("JiraIssueID", "CDV6-9754")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Remove all answers in Section 1 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are removed")]
        public void SaveAnswerFromSection_TestMethod016()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var multipleChoice_Option1 = new Guid("e92f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0]; //wf date
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0]; //wf decimal
            var documentQuestionIdentifierId4 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0]; //wf multiple choice
            var documentQuestionIdentifierId5 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0]; //wf multiple response
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0]; //wf numeric

            //set the answers for wf date
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 7, 6));

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 9.3m);

            //set the answer for the wf multiple choice
            var documentAnswerID4 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId4)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID4, multipleChoice_Option2);

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID5 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId5)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID5, multipleresponse_Day1, true);
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID5, multipleresponse_Day2, true);


            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickRadioButtonQuestionOption("QA-DQ-169", multipleChoice_Option1.ToString().ToLower()) //WF Multiple Choice
                .InsertQuestionInputValue("QA-DQ-164", "") //WF Decimal
                .ClickMultiResponseQuestionAddedOptionRemoveButton("QA-DQ-170", "Day 2")//WF Multiple Response
                .ClickMultiResponseQuestionAddButton("QA-DQ-170")
                .ClickMultiResponseQuestionOption("QA-DQ-170", "Day 3")
                .InsertQuestionInputValue("QA-DQ-171", "") //WF Numeric
                .InsertDateQuestion("QA-DQ-163", "") //WF Date

                .ClickSaveAndNextButton("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-69")
                ;


            //get the Document Question Identifiers
            var multiplechoice_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-169")[0];
            var decimal_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-164")[0];
            var multipleresponse_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-170")[0];
            var numeric_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-171")[0];
            var date_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-163")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multiplechoice_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "multichoiceanswerid");
            Assert.AreEqual(multipleChoice_Option1, fields["multichoiceanswerid"]);

            var decimal_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, decimal_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(decimal_documentAnswerID, "decimalanswer");
            Assert.AreEqual(false, fields.ContainsKey("decimalanswer"));

            var multipleresponse_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multipleresponse_QuestionIdentifierId)[0];
            var documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day1)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day2)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(false, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day3)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            var numeric_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, numeric_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(numeric_documentAnswerID, "NumericAnswer");
            Assert.AreEqual(false, fields.ContainsKey("numericanswer"));

            var date_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, date_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(date_documentAnswerID, "DateAnswer");
            Assert.AreEqual(false, fields.ContainsKey("dateanswer"));

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9755")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Remove all answers in Section 1.1 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are removed")]
        public void SaveAnswerFromSection_TestMethod017()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var paragraph_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-172")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, paragraph_QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(multiplechoice_documentAnswerID, "Value 1...");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .InsertQuestionInputValue("QA-DQ-172", "")

                .ClickSaveAndNextButton("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-69");



            //get the answers
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "paragraphanswer");
            Assert.AreEqual(false, fields.ContainsKey("paragraphanswer"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9756")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Remove all answers in Section 1.2 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are removed")]
        public void SaveAnswerFromSection_TestMethod018()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);


            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var picklist_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-173")[0];

            //set the answers
            var picklist_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, picklist_QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(picklist_documentAnswerID, picklistvalue_Christian);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")

                .ClickPicklistQuestion_ClearButton("QA-DQ-173")

                .ClickSaveAndNextButton("QA-DS-66")
                .WaitForSectionToLoad("QA-DS-69");



            //get the answers
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(picklist_documentAnswerID, "PicklistValueId");
            Assert.AreEqual(false, fields.ContainsKey("picklistvalueid"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9757")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Remove all answers in Section 2 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are removed")]
        public void SaveAnswerFromSection_TestMethod019()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);



            //get the Document Question Identifiers
            var shortanswer_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-174")[0];

            //get the answers
            var shortanswer_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, shortanswer_QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(shortanswer_documentAnswerID, "Value 1 ...");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertQuestionInputValue("QA-DQ-174", "") 

                .ClickSaveButton("QA-DS-69");


            //get the answers
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(shortanswer_documentAnswerID, "ShortAnswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9758")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Remove all answers in Section 2.1 Test HQ table questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are removed")]
        public void SaveAnswerFromSection_TestMethod020()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);



            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-177")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "value 1 ...");



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID, 9.1m);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-179")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "value 2 ...");



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-180")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID, 3m);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertQuestionInputValue("QA-DQ-177", "")
                .InsertQuestionInputValue("QA-DQ-178", "")
                .InsertQuestionInputValue("QA-DQ-179", "")
                .InsertQuestionInputValue("QA-DQ-180", "")

                .ClickSaveButton("QA-DS-69");


            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-177")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-178")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "decimalanswer");
            Assert.AreEqual(false, fields.ContainsKey("decimalanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-179")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-180")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "decimalanswer");
            Assert.AreEqual(false, fields.ContainsKey("decimalanswer"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9759")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Remove all answers in Section 2.1 Table PQ table questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are removed")]
        public void SaveAnswerFromSection_TestMethod021()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);




            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-253")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID, "value 1 \nvalue 2");



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-255")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "value 1 ...");



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-254")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(documentAnswerID, "value 3 \nvalue 4");



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-256")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "value 2 ...");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertQuestionInputValue("QA-DQ-253", "")
                .InsertQuestionInputValue("QA-DQ-255", "")
                .InsertQuestionInputValue("QA-DQ-254", "")
                .InsertQuestionInputValue("QA-DQ-256", "")

                .ClickSaveButton("QA-DS-69");


            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-253")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "paragraphanswer");
            Assert.AreEqual(false, fields.ContainsKey("paragraphanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-255")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-254")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "paragraphanswer");
            Assert.AreEqual(false, fields.ContainsKey("paragraphanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-256")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9760")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Remove all answers in Section 2.1 Table QPC table questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are removed")]
        public void SaveAnswerFromSection_TestMethod022()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);



            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-185")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "value 1 ...");



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-258")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "value 2 ...");



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-260")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID, DateTime.Now.Date.AddHours(11).AddMinutes(45));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-262")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(documentAnswerID, "value 3 ...");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertQuestionInputValue("QA-DQ-185", "")
                .InsertQuestionInputValue("QA-DQ-258", "")
                .InsertTimeQuestion("QA-DQ-260", "")
                .InsertQuestionInputValue("QA-DQ-262", "")

                .ClickSaveButton("QA-DS-69");


            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-185")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-258")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-260")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "dateandtimeanswer");
            Assert.AreEqual(false, fields.ContainsKey("dateandtimeanswer"));



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-262")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "shortanswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9761")]
        [Description("Open an In Progress assessment record - Navigate to section 2 - Wait for the section to load - Remove all answers in Section 2.1 boolean and time questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are removed")]
        public void SaveAnswerFromSection_TestMethod023()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);



            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);



            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID, true);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID, DateTime.Now.Date.AddHours(19).AddMinutes(35));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickRadioButtonQuestionOption("QA-DQ-186", "0")
                .InsertTimeQuestion("QA-DQ-188", "")

                .ClickSaveButton("QA-DS-69");

            System.Threading.Thread.Sleep(3000);
            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-186")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "truefalseanswer");
            Assert.AreEqual(false, fields["truefalseanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-188")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "dateandtimeanswer");
            Assert.AreEqual(false, fields.ContainsKey("dateandtimeanswer"));


        }


        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8814

        [Test]
        [Property("JiraIssueID", "CDV6-9661")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 1' ) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - " +
            "Validate that a new alert popup is displayed containing the text 'Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.' ")]
        public void FormSubmission_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 21);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9662")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 1' ) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Confirm the submit operation - " +
            "Validate that no warning message are displayed regarding mandatory questions")]
        public void FormSubmission_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 21);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();


            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateWarningMessageVisibility(false)
                .ValidateWarningSectionInformationVisibility(1, false)
                .ValidateWarningSectionInformationVisibility(2, false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-9663")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 5' without any answer set) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Confirm the submit operation - " +
            "Validate that the assessment page displays a warning message with the missing mandatory questions")]
        public void FormSubmission_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("100b911b-ae88-eb11-a320-005056926fe4"); //Automated UI Test Document 5
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659",
                documentid, "Automated UI Test Document 5", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")

                .WaitForSectionToLoad("QA-DS-295")
                .ClickSectionLink("QA-DS-296")
                .WaitForSectionToLoad("QA-DS-296")

                .ClickSubmitButton("QA-DS-296");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")
                .ValidateWarningMessageVisibility(true)
                .ValidateWarningSectionInformationVisibility(1, true)
                .ValidateWarningQuestionInformationVisibility(1, 1, true)
                .ValidateWarningSectionInformationVisibility(2, true)
                .ValidateWarningQuestionInformationVisibility(2, 1, true)
                .ValidateWarningQuestionInformationVisibility(2, 2, true)
                .ValidateWarningMessageText("The following Questions are mandatory and have to be answered before the assessment can be submitted")
                .ValidateWarningSectionInformationText(1, "Section 1")
                .ValidateWarningQuestionInformationText(1, 1, "WF Decimal")
                .ValidateWarningSectionInformationText(2, "Section 2")
                .ValidateWarningQuestionInformationText(2, 1, "WF Date")
                .ValidateWarningQuestionInformationText(2, 2, "WF Numeric")
                ;


        }

        [Test]
        [Property("JiraIssueID", "CDV6-9664")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 5' without any answer set) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Confirm the submit operation - " +
            "Wait for the warning message with the missing mandatory questions to be displayed - Click on the WF Decimal question link - Validate that the user is redirected to section 1")]
        public void FormSubmission_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("100b911b-ae88-eb11-a320-005056926fe4"); //Automated UI Test Document 5
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659",
                documentid, "Automated UI Test Document 5", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")

                .WaitForSectionToLoad("QA-DS-295")
                .ClickSectionLink("QA-DS-296")
                .WaitForSectionToLoad("QA-DS-296")

                .ClickSubmitButton("QA-DS-296");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")
                .ValidateWarningMessageVisibility(true)
                .ValidateWarningSectionInformationVisibility(1, true)
                .ValidateWarningQuestionInformationVisibility(1, 1, true)
                .ValidateWarningSectionInformationVisibility(2, true)
                .ValidateWarningQuestionInformationVisibility(2, 1, true)
                .ValidateWarningQuestionInformationVisibility(2, 2, true)
                
                .ClickWarningQuestionInformation(1, 1)
                
                .WaitForSectionToLoad("QA-DS-295")
                .ValidateSectionTitleText("QA-DS-295", "Section 1");


        }

        [Test]
        [Property("JiraIssueID", "CDV6-9665")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 5' without any answer set) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Confirm the submit operation - " +
            "Wait for the warning message with the missing mandatory questions to be displayed - Click on the WF Decimal question link - Wait for section 1 to load - " +
            "Validate that the warning message with the missing mandatory questions is still visible")]
        public void FormSubmission_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("100b911b-ae88-eb11-a320-005056926fe4"); //Automated UI Test Document 5
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659",
                documentid, "Automated UI Test Document 5", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")

                .WaitForSectionToLoad("QA-DS-295")
                .ClickSectionLink("QA-DS-296")
                .WaitForSectionToLoad("QA-DS-296")

                .ClickSubmitButton("QA-DS-296");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")
                .ValidateWarningMessageVisibility(true)

                .ClickWarningQuestionInformation(1, 1)

                .WaitForSectionToLoad("QA-DS-295")
                .ValidateSectionTitleText("QA-DS-295", "Section 1")

                .ValidateWarningMessageVisibility(true)
                .ValidateWarningSectionInformationVisibility(1, true)
                .ValidateWarningQuestionInformationVisibility(1, 1, true)
                .ValidateWarningSectionInformationVisibility(2, true)
                .ValidateWarningQuestionInformationVisibility(2, 1, true)
                .ValidateWarningQuestionInformationVisibility(2, 2, true)
                .ValidateWarningMessageText("The following Questions are mandatory and have to be answered before the assessment can be submitted")
                .ValidateWarningSectionInformationText(1, "Section 1")
                .ValidateWarningQuestionInformationText(1, 1, "WF Decimal")
                .ValidateWarningSectionInformationText(2, "Section 2")
                .ValidateWarningQuestionInformationText(2, 1, "WF Date")
                .ValidateWarningQuestionInformationText(2, 2, "WF Numeric")

                ;


        }


        [Test]
        [Property("JiraIssueID", "CDV6-9666")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 5' without any answer set) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Confirm the submit operation - " +
            "Wait for the warning message with the missing mandatory questions to be displayed - Click on the WF Decimal question link - Wait for Section 1 to load - " +
            "Click on the WF Numeric question link - Wait for Section 2 to load")]
        public void FormSubmission_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("100b911b-ae88-eb11-a320-005056926fe4"); //Automated UI Test Document 5
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659",
                documentid, "Automated UI Test Document 5", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")

                .WaitForSectionToLoad("QA-DS-295")
                .ClickSectionLink("QA-DS-296")
                .WaitForSectionToLoad("QA-DS-296")

                .ClickSubmitButton("QA-DS-296");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 5")
                .ValidateWarningMessageVisibility(true)

                .ClickWarningQuestionInformation(1, 1)

                .WaitForSectionToLoad("QA-DS-295")
                .ValidateSectionTitleText("QA-DS-295", "Section 1")

                .ClickWarningQuestionInformation(2, 2)

                .WaitForSectionToLoad("QA-DS-296")
                .ValidateSectionTitleText("QA-DS-296", "Section 2")

                .ValidateWarningMessageVisibility(true)
                .ValidateWarningSectionInformationVisibility(1, true)
                .ValidateWarningQuestionInformationVisibility(1, 1, true)
                .ValidateWarningSectionInformationVisibility(2, true)
                .ValidateWarningQuestionInformationVisibility(2, 1, true)
                .ValidateWarningQuestionInformationVisibility(2, 2, true)
                .ValidateWarningMessageText("The following Questions are mandatory and have to be answered before the assessment can be submitted")
                .ValidateWarningSectionInformationText(1, "Section 1")
                .ValidateWarningQuestionInformationText(1, 1, "WF Decimal")
                .ValidateWarningSectionInformationText(2, "Section 2")
                .ValidateWarningQuestionInformationText(2, 1, "WF Date")
                .ValidateWarningQuestionInformationText(2, 2, "WF Numeric")

                ;


        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8943

        [Test]
        [Property("JiraIssueID", "CDV6-9371")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Set answer in WF Decimal questions - " +
            "Click on the Home page link on the top menu - Validate that a warning is displayed to the user informing him about the unsaved answers - " +
            "Confirm the exit operation - Validate that the user is redirected to the home page")]
        public void AssessmentsUnsavedChangesExistScreen_TestMethod001()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .InsertQuestionInputValue("QA-DQ-164", "12.95");//WF Decimal;

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            alertPopup
                .WaitForAlertPopupToLoad()
                .TapOKButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9372")]
        [Description("Open an In Progress assessment record - Wait for the first section to load - Set answer in WF Decimal questions - " +
            "Without saving click on the Section 2 Link - Wait for section 2 to load - Click on the Submit button - " +
            "Validate that a warning is displayed to the user informing him about the unsaved answers")]
        public void AssessmentsUnsavedChangesExistScreen_TestMethod002()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .InsertQuestionInputValue("QA-DQ-164", "12.95") //WF Decimal
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ClickSubmitButtonWithoutWaitingForLoaderIconRemoved("QA-DS-69");

            alertPopup
                .WaitForAlertPopupToLoad()
                .TapOKButton();

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.");

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-8818

        [Test]
        [Property("JiraIssueID", "CDV6-9762")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 1' ) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Set WF Date to '15/01/2013' - Set WF Decimal to '95.39' - Set WF Numeric to '71' - Save the Questions - " +
            "Navigate to Section 2 - Set Test HQ; Test Dec; Row 1 to '49.76' - Save the changes - " +
            "Click on the Submit Button - Validate that the 'meet the criteria' message is displayed")]
        public void SelfAssessmentAlgorithmMessaging_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .InsertDateQuestion("QA-DQ-163", "15/01/2013")
                .InsertQuestionInputValue("QA-DQ-164", "95.39")
                .InsertQuestionInputValue("QA-DQ-171", "71")
                .ClickSaveAndNextButton("QA-DS-66")

                .WaitForSectionToLoad("QA-DS-69")
                .InsertQuestionInputValue("QA-DQ-178", "49.76")
                .ClickSaveButton("QA-DS-69")

                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateAlertMessageVisibility("Thank you for completing your self-assessment. Your answers suggest that you may meet the criteria for social care, but one of our team will look at your assessment to check. Once the team has reviewed your answers they will be in contact with you.", true);

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();

        }

        [Test]
        [Property("JiraIssueID", "CDV6-9763")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 1' ) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Set WF Date to '15/02/2013' - Set WF Decimal to '120.39' - Set WF Numeric to '205' - Save the Questions - " +
            "Navigate to Section 2 - Set Test HQ; Test Dec; Row 1 to '140.9' - Save the changes - " +
            "Click on the Submit Button - Validate that the 'you don’t meet the criteria' message is displayed")]
        public void SelfAssessmentAlgorithmMessaging_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .InsertDateQuestion("QA-DQ-163", "15/02/2013")
                .InsertQuestionInputValue("QA-DQ-164", "120.39")
                .InsertQuestionInputValue("QA-DQ-171", "205")
                .ClickSaveAndNextButton("QA-DS-66")

                .WaitForSectionToLoad("QA-DS-69")
                .InsertQuestionInputValue("QA-DQ-178", "140.9")
                .ClickSaveButton("QA-DS-69")

                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateAlertMessageVisibility("Thank you for completing your self-assessment. Your answers suggest that you don't meet the criteria to receive social care.", true);

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10238

        [Test]
        [Property("JiraIssueID", "CDV6-11316")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - " +
            "Validate that the 'Your Name' and 'Email Address' fields are automatically set with the user information")]
        public void DefaultUserNameAndEmailInContactUs_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);


            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser8@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()
                .ValidateYourNameText("Claude Palmer")
                .ValidateYourEmailAddressText("StaffordshireCitizenPortalUser8@mail.com");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11317")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - Select Contact - Insert Subject and Message - " +
            "Leave Your Name and Your Email Address with default information - " +
            "Click on the submit button - Validate that the website contact is created and associated with the website record")]
        public void DefaultUserNameAndEmailInContactUs_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all website contact records
            foreach (var contactid in dbHelper.websiteContact.GetByWebSiteIDAndSubject(websiteid, "Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1"))
                dbHelper.websiteContact.DeleteWebsiteContact(contactid);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser8@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()
                .SelectContact("Staffordshire Citizen Portal POC 2")
                .InsertSubject("Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1")
                .InsertMessage("Message content goes here.")
                .ClickSubmitButton()

                .ValidateToastMessageVisibility(true)
                .ValidateToastMessageText("Your feedback has been successfully submitted. Your input is valued and will be reviewed by a member of staff. Thank you.");

            var records = dbHelper.websiteContact.GetByWebSiteIDAndSubject(websiteid, "Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1");
            Assert.AreEqual(1, records.Count);

            var fields = dbHelper.websiteContact.GetByID(records[0], "websitepointofcontactid", "name", "emailaddress", "subject", "message");
            Assert.AreEqual(new Guid("63eef727-f35f-eb11-a306-005056926fe4"), fields["websitepointofcontactid"]);
            Assert.AreEqual("Claude Palmer", fields["name"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser8@mail.com", fields["emailaddress"]);
            Assert.AreEqual("Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1", fields["subject"]);
            Assert.AreEqual("Message content goes here.", fields["message"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11318")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - Select Contact - Insert Subject and Message - " +
            "Replace Your Name and Your Email Address with new values - " +
            "Click on the submit button - Validate that the website contact is created and associated with the website record")]
        public void DefaultUserNameAndEmailInContactUs_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all website contact records
            foreach (var contactid in dbHelper.websiteContact.GetByWebSiteIDAndSubject(websiteid, "Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1"))
                dbHelper.websiteContact.DeleteWebsiteContact(contactid);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser8@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()
                .SelectContact("Staffordshire Citizen Portal POC 2")
                .InsertYourName("Different Name")
                .InsertYourEmailAddress("StaffordshireCitizenPortalUser8@mail2.com")
                .InsertSubject("Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1")
                .InsertMessage("Message content goes here.")
                .ClickSubmitButton()

                .ValidateToastMessageVisibility(true)
                .ValidateToastMessageText("Your feedback has been successfully submitted. Your input is valued and will be reviewed by a member of staff. Thank you.");

            var records = dbHelper.websiteContact.GetByWebSiteIDAndSubject(websiteid, "Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1");
            Assert.AreEqual(1, records.Count);

            var fields = dbHelper.websiteContact.GetByID(records[0], "websitepointofcontactid", "name", "emailaddress", "subject", "message");
            Assert.AreEqual(new Guid("63eef727-f35f-eb11-a306-005056926fe4"), fields["websitepointofcontactid"]);
            Assert.AreEqual("Different Name", fields["name"]);
            Assert.AreEqual("StaffordshireCitizenPortalUser8@mail2.com", fields["emailaddress"]);
            Assert.AreEqual("Staffordshire Citizen Portal - StaffordshireCitizenPortalUser8 Message 1", fields["subject"]);
            Assert.AreEqual("Message content goes here.", fields["message"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11319")]
        [Description("Navigate to the portal URL - Do not login - Access the Contact-Us page - " +
            "Validate that the 'Your Name' and 'Email Address' fields are displayed empty")]
        public void DefaultUserNameAndEmailInContactUs_TestMethod04()
        {
            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()
                .ValidateYourNameText("")
                .ValidateYourEmailAddressText("");
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10359

        [Test]
        [Property("JiraIssueID", "CDV6-11387")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that deactivated assessments are visible in the assessments widget")]
        public void ViewDeactivatedAssessments_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("ecf97601-93ad-eb11-a323-005056926fe4"); //Automated UI Test Document 6

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser42@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateAssessmentRecordDisplayed("Automated UI Test Document 6");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11388")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Open a deactivated assessments record - Validate that the assessment record is correctly displayed")]
        public void ViewDeactivatedAssessments_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var assessmentid = new Guid("ecf97601-93ad-eb11-a323-005056926fe4"); //Automated UI Test Document 6

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser42@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 6")
                
                .WaitForSectionToLoad("QA-DS-302")
                .ValidateSectionLinkText("QA-DS-302", "Section 1")

                .ValidateMosaicQuestionInputValue("QA-DQ-1223", "14")
                .ValidateMosaicDateQuestionInputValue("QA-DQ-1224", "2021-05-01T00:00:00")
                .ValidateMosaicQuestionInputValue("QA-DQ-1225", "5.90")
                
                .ValidateSaveButtonVisibility("QA-DS-302", true)
                .ValidateSaveAndNextButtonVisibility("QA-DS-302", false)
                .ValidateSubmitButtonVisibility(true, "QA-DS-302")
                ;
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-9307

        [Test]
        [Property("JiraIssueID", "CDV6-11372")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the On-Demand Workflows widget is displayed")]
        public void StartAssessmentOnDemand_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            
            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser43@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11373")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the 'Portal - Create Adult Social Care Self-Assessment' On-Demand Workflow is displayed")]
        public void StartAssessmentOnDemand_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser43@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateOnDemandWorkflowRecordDisplayed(1, "5f554250-2cd2-ed11-a336-005056926fe4")
                .ValidateOnDemandWorkflowText(1, "Create Adult Social Care Self-Assessment")
                .ValidateOnDemandWorkflowRecordDescriptionNotDisplayed(1);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11374")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - Click on a on demand workflow record text - " +
            "validate that the on demand workflow description is displayed")]
        public void StartAssessmentOnDemand_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser43@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickOnDemandWorkflowRecordText(1)

                .ValidateOnDemandWorkflowRecordDisplayed(1, "5f554250-2cd2-ed11-a336-005056926fe4")
                .ValidateOnDemandWorkflowText(1, "Create Adult Social Care Self-Assessment")
                .ValidateOnDemandWorkflowRecordDescriptionDisplayed(1)
                .ValidateOnDemandWorkflowRecordDescription(1, "Name: Create Adult Social Care Self-Assessment");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11375")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - Click on the 'Portal - Create Adult Social Care Self-Assessment' View button - " +
            "Validate that the User is redirected to the Assessment page and the 'Adult Care and Support Plan' assessment is displayed")]
        public void StartAssessmentOnDemand_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser43@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickOnDemandWorkflowViewButton("5f554250-2cd2-ed11-a336-005056926fe4");

            assessmentPage
                .WaitForAssessmentPageToLoad("Adult Care and Support Plan")
                .WaitForSectionToLoad("QA-DS-223")
                .ValidateSectionTitleText("QA-DS-223", "Header Details")
                .ValidateSectionLinkText("QA-DS-223", "Header Details")
                
                .ValidateQuestionTitleText("QA-DSQ-685", "Outcome")
                .ValidateQuestionTitleText("QA-DSQ-686", "Location")
                .ValidateQuestionTitleText("QA-DSQ-687", "Goal at time of Assessment")

                .ValidateSaveButtonVisibility("QA-DS-223", true)
                .ValidateSaveAndNextButtonVisibility("QA-DS-223", true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11376")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - Click on the 'Portal - Create Adult Social Care Self-Assessment' View button - " +
            "Validate that the User is redirected to the Assessment page - Click on the Member Home page main menu link - " +
            "Wait for the member home page to be displayed - Validate that the Case Form record is displayed on the Assessments widget")]
        public void StartAssessmentOnDemand_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var workflowid = new Guid("c182b8a3-aaad-eb11-a323-005056926fe4"); //Portal - Create Adult Social Care Self-Assessment
            var personid = new Guid("f33239b3-238a-4493-9048-a75ba1d24c85");  //Greta Barrett
            var caseid = new Guid("18b4f7e4-b3ad-eb11-a323-005056926fe4"); //CAS-000005-1458

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);



            //remove all portal tasks for the workflow
            foreach (var portalTaskId in dbHelper.portalTask.GetByTargetUserIdAndWorkflowId(personid, workflowid))
                dbHelper.portalTask.DeletePortalTask(portalTaskId);

            //remove all case forms for the case record
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseid))
                dbHelper.caseForm.DeleteCaseForm(caseformid);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser43@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickOnDemandWorkflowViewButton("5f554250-2cd2-ed11-a336-005056926fe4");

            assessmentPage
                .WaitForAssessmentPageToLoad("Adult Care and Support Plan")
                .WaitForSectionToLoad("QA-DS-223")
                .ValidateSectionTitleText("QA-DS-223", "Header Details")
                .ValidateSectionLinkText("QA-DS-223", "Header Details");

            var caseForms = dbHelper.caseForm.GetCaseFormByCaseID(caseid);
            Assert.AreEqual(1, caseForms.Count());

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateAssessmentRecordDisplayed("Adult Care and Support Plan")
                .ValidateAssessmentViewDetailsButtonVisibility(caseForms[0].ToString(), true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11377")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - Click on the 'Portal - Create Adult Social Care Self-Assessment' View button - " +
            "Validate that the User is redirected to the Assessment page - " + 
            "Validate that a portal task is created and linked to the person - Validate that a new case form is created and linked to the case")]
        public void StartAssessmentOnDemand_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var workflowid = new Guid("c182b8a3-aaad-eb11-a323-005056926fe4"); //Portal - Create Adult Social Care Self-Assessment
            var personid = new Guid("f33239b3-238a-4493-9048-a75ba1d24c85");  //Greta Barrett
            var caseid = new Guid("18b4f7e4-b3ad-eb11-a323-005056926fe4"); //CAS-000005-1458

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);



            //remove all portal tasks for the workflow
            foreach (var portalTaskId in dbHelper.portalTask.GetByTargetUserIdAndWorkflowId(personid, workflowid))
                dbHelper.portalTask.DeletePortalTask(portalTaskId);

            //remove all case forms for the case record
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseid))
                dbHelper.caseForm.DeleteCaseForm(caseformid);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser43@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickOnDemandWorkflowViewButton("5f554250-2cd2-ed11-a336-005056926fe4");

            assessmentPage
                .WaitForAssessmentPageToLoad("Adult Care and Support Plan")
                .WaitForSectionToLoad("QA-DS-223")
                .ValidateSectionTitleText("QA-DS-223", "Header Details")
                .ValidateSectionLinkText("QA-DS-223", "Header Details");


            var caseForms = dbHelper.caseForm.GetCaseFormByCaseID(caseid);
            Assert.AreEqual(1, caseForms.Count());

            var portalTasks = dbHelper.portalTask.GetByTargetUserIdAndWorkflowId(personid, workflowid);
            Assert.AreEqual(1, portalTasks.Count());

            var fields = dbHelper.portalTask.GetByID(portalTasks[0], "targetuserid", "workflowid", "portaltaskstatusid");
            Assert.AreEqual(personid, fields["targetuserid"]);
            Assert.AreEqual(workflowid, fields["workflowid"]);
            Assert.AreEqual(2, fields["portaltaskstatusid"]);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10237

        [Test]
        [Property("JiraIssueID", "CDV6-11306")]
        [Description("Navigate to the portal home page (2FA is disabled from the website) - Login with a portal user account - Wait for the member home page to load - " +
            "Click the About Me User Name Button - Validate that the Edit Two Factor Authentication button is not visible")]
        public void ChangeTwoFactorAuthentication_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser44@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ValidateEditTwoFactorAuthenticationButtonVisible(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11307")]
        [Description("Navigate to the portal home page (2FA is enabled from the website) - Login with a portal user account - Wait for the member home page to load - " +
            "Click the About Me User Name Button - Validate that the Edit Two Factor Authentication button is visible")]
        public void ChangeTwoFactorAuthentication_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("f5251591-4dae-eb11-a323-005056926fe4"); //StaffordshireCitizenPortalUser44@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            //remove all pins from the website user
            foreach (var userpinid in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpinid);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser44@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);
            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinNumber = (string)fields["pin"];

            homePage
                .InsertPIN(pinNumber)
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ValidateEditTwoFactorAuthenticationButtonVisible(true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11308")]
        [Description("Navigate to the portal home page (2FA is enabled from the website) - Login with a portal user account - Wait for the member home page to load - " +
            "Click the About Me User Name Button - Click on the Edit Two Factor Authentication button - " +
            "Validate that the 'Change Two Factor Authentication Type' page is displayed")]
        public void ChangeTwoFactorAuthentication_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("f5251591-4dae-eb11-a323-005056926fe4"); //StaffordshireCitizenPortalUser44@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            //remove all pins from the website user
            foreach (var userpinid in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpinid);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser44@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);
            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinNumber = (string)fields["pin"];

            homePage
                .InsertPIN(pinNumber)
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditTwoFactorAuthenticationButton();

            changeTwoFactorAuthenticationTypePage
                .WaitForChangeTwoFactorAuthenticationTypePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11309")]
        [Description("Navigate to the portal home page (2FA is enabled from the website) - Login with a portal user account (user has no default 2FA method selected) - " +
            "Wait for the member home page to load - " +
            "Click the About Me User Name Button - Click on the Edit Two Factor Authentication button - " +
            "Wait for the 'Change Two Factor Authentication Type' page to load - " +
            "Validate that no value is selected in the picklist")]
        public void ChangeTwoFactorAuthentication_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("f5251591-4dae-eb11-a323-005056926fe4"); //StaffordshireCitizenPortalUser44@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            //remove all pins from the website user
            foreach (var userpinid in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpinid);

            //update the 2FA method for the user
            dbHelper.websiteUser.UpdateTwoFactorAuthenticationType(websiteuserid, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser44@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);
            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinNumber = (string)fields["pin"];

            homePage
                .InsertPIN(pinNumber)
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditTwoFactorAuthenticationButton();

            changeTwoFactorAuthenticationTypePage
                .WaitForChangeTwoFactorAuthenticationTypePageToLoad()
                .ValidateTwoFactorAuthenticationTypeSelectedText("Select your options");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11310")]
        [Description("Navigate to the portal home page (2FA is enabled from the website) - Login with a portal user account (user 2FA method set to SMS) - " +
            "Wait for the member home page to load - " +
            "Click the About Me User Name Button - Click on the Edit Two Factor Authentication button - " +
            "Wait for the 'Change Two Factor Authentication Type' page to load - " +
            "Validate that the value 'SMS' is selected in the picklist")]
        public void ChangeTwoFactorAuthentication_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("f5251591-4dae-eb11-a323-005056926fe4"); //StaffordshireCitizenPortalUser44@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            //remove all pins from the website user
            foreach (var userpinid in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpinid);

            //update the 2FA method for the user
            dbHelper.websiteUser.UpdateTwoFactorAuthenticationType(websiteuserid, 2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser44@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);
            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinNumber = (string)fields["pin"];

            homePage
                .InsertPIN(pinNumber)
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditTwoFactorAuthenticationButton();

            changeTwoFactorAuthenticationTypePage
                .WaitForChangeTwoFactorAuthenticationTypePageToLoad()
                .ValidateTwoFactorAuthenticationTypeSelectedText("SMS");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11311")]
        [Description("Navigate to the portal home page (2FA is enabled from the website) - Login with a portal user account (user 2FA method set to SMS) - " +
            "Wait for the member home page to load - " +
            "Click the About Me User Name Button - Click on the Edit Two Factor Authentication button - " +
            "Wait for the 'Change Two Factor Authentication Type' page to load - Change the 2FA type to Email - Click on the Submit button - " +
            "Validate that the toast success message is displayed")]
        public void ChangeTwoFactorAuthentication_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("f5251591-4dae-eb11-a323-005056926fe4"); //StaffordshireCitizenPortalUser44@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            //remove all pins from the website user
            foreach (var userpinid in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpinid);

            //update the 2FA method for the user
            dbHelper.websiteUser.UpdateTwoFactorAuthenticationType(websiteuserid, 2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser44@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);
            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinNumber = (string)fields["pin"];

            homePage
                .InsertPIN(pinNumber)
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditTwoFactorAuthenticationButton();

            changeTwoFactorAuthenticationTypePage
                .WaitForChangeTwoFactorAuthenticationTypePageToLoad()
                .ClickOnTwoFactorAuthenticationTypeTopField()
                .ClickOnTwoFactorAuthenticationTypeOption("Email")
                .ClickSubmiitButton()
                
                .ValidateToastMessageVisible()
                .ValidateToastMessageText("Two factor authentication type was successfully updated.");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11312")]
        [Description("Navigate to the portal home page (2FA is enabled from the website) - Login with a portal user account (user 2FA method set to SMS) - " +
            "Wait for the member home page to load - " +
            "Click the About Me User Name Button - Click on the Edit Two Factor Authentication button - " +
            "Wait for the 'Change Two Factor Authentication Type' page to load - Change the 2FA type to Email - Click on the Submit button - " +
            "Wait for the toas message to be displayed - Validate that the 2FA type is updated")]
        public void ChangeTwoFactorAuthentication_TestMethod07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("f5251591-4dae-eb11-a323-005056926fe4"); //StaffordshireCitizenPortalUser44@mail.com

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            //remove all pins from the website user
            foreach (var userpinid in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpinid);

            //update the 2FA method for the user
            dbHelper.websiteUser.UpdateTwoFactorAuthenticationType(websiteuserid, 2);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser44@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);
            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinNumber = (string)fields["pin"];

            homePage
                .InsertPIN(pinNumber)
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditTwoFactorAuthenticationButton();

            changeTwoFactorAuthenticationTypePage
                .WaitForChangeTwoFactorAuthenticationTypePageToLoad()
                .ClickOnTwoFactorAuthenticationTypeTopField()
                .ClickOnTwoFactorAuthenticationTypeOption("Email")
                .ClickSubmiitButton()
                .ValidateToastMessageVisible();

            var websiteUserFields = dbHelper.websiteUser.GetByID(websiteuserid, "twofactorauthenticationtypeid");
            Assert.AreEqual(1, websiteUserFields["twofactorauthenticationtypeid"]);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10384

        [Test]
        [Property("JiraIssueID", "CDV6-11389")]
        [Description("Navigate to the portal URL - Login in the portal - Access the Contact-Us page - Set data in all mandatory fields - " +
            "Set subject to 'WF Testing CDV6-10384' - " +
            "Click on the submit button - " +
            "Validate that the website contact is created - " +
            "Validate that a new email record is created and linked to the website contact")]
        public void WebsiteContact_SendEmailViaWorkflow_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var consumerPortalAdminSyystemUserId = new Guid("98677d27-532a-eb11-a2cd-005056926fe4"); //Consumer Portal Admin
            var ownerid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5"); //CareDirector QA

            //disable the two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all website contact records
            foreach (var contactid in dbHelper.websiteContact.GetByWebSiteIDAndSubject(websiteid, "WF Testing CDV6-10384"))
                dbHelper.websiteContact.DeleteWebsiteContact(contactid);



            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad();

            mainMenu
                .ClickContactUsLink();

            contactUsPage
                .WaitForContactUsPageToLoad()
                .SelectContact("Staffordshire Citizen Portal POC 1")
                .InsertYourName("Claude Palmer")
                .InsertYourEmailAddress("StaffordshireCitizenPortalUser8@mail.com")
                .InsertSubject("WF Testing CDV6-10384")
                .InsertMessage("Message content goes here.")
                .ClickSubmitButton()

                .ValidateToastMessageVisibility(true)
                .ValidateToastMessageText("Your feedback has been successfully submitted. Your input is valued and will be reviewed by a member of staff. Thank you.");

            var websiteContacts = dbHelper.websiteContact.GetByWebSiteIDAndSubject(websiteid, "WF Testing CDV6-10384");
            Assert.AreEqual(1, websiteContacts.Count);

            var emails = dbHelper.email.GetEmailByRegardingID(websiteContacts[0]);
            Assert.AreEqual(1, emails.Count);
            
            var fields = dbHelper.email.GetEmailByID(emails[0], "emailfromlookupid", "subject", "notes", 
                "regardingid", "regardingidname", "regardingidtablename", "ownerid");
            Assert.AreEqual(consumerPortalAdminSyystemUserId, fields["emailfromlookupid"]);
            Assert.AreEqual("WF Testing CDV6-10384", fields["subject"]);
            Assert.AreEqual("<p>Message content goes here.</p>", fields["notes"]);
            Assert.AreEqual(websiteContacts[0], fields["regardingid"]);
            Assert.AreEqual("Claude Palmer", fields["regardingidname"]);
            Assert.AreEqual("websitecontact", fields["regardingidtablename"]);
            Assert.AreEqual(ownerid, fields["ownerid"]);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10346

        [Test]
        [Property("JiraIssueID", "CDV6-11378")]
        [Description("Open an assessment record with an unlimited rows table question with no answer set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - " +
            "Validate that the Unlimited Rows question is displayed.")]
        public void TableWithUnlimitedRowsQuestion_TestMethod001()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateTableWithUnlimitedRows_TableTitleVisibility("QA-DSQ-204", true)
                .ValidateTableWithUnlimitedRows_TableSubTitleVisibility("QA-DSQ-204", true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 1, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 1, true)

                .ValidateTableWithUnlimitedRows_TableTitleText("QA-DSQ-204", "WF Table With Unlimited Rows")
                .ValidateTableWithUnlimitedRows_TableSubTitleText("QA-DSQ-204", "WF Unlimited Rows Table Sub Heading")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-245", 1, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-246", 1, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "--- Please Select ---")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 2, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 2, false)

                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11379")]
        [Description("Open an assessment record with an unlimited rows table question with one row set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - " +
            "Validate that the Unlimited Rows question is displayed.")]
        public void TableWithUnlimitedRowsQuestion_TestMethod002()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-245")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-246")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateTableWithUnlimitedRows_TableTitleVisibility("QA-DSQ-204", true)
                .ValidateTableWithUnlimitedRows_TableSubTitleVisibility("QA-DSQ-204", true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 1, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 1, true)

                .ValidateTableWithUnlimitedRows_TableTitleText("QA-DSQ-204", "WF Table With Unlimited Rows")
                .ValidateTableWithUnlimitedRows_TableSubTitleText("QA-DSQ-204", "WF Unlimited Rows Table Sub Heading")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-245", 1, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-246", 1, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "Reason 1")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 2, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 2, false)

                ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11380")]
        [Description("Open an assessment record with an unlimited rows table question with two rows set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - " +
            "Validate that the Unlimited Rows question is displayed.")]
        public void TableWithUnlimitedRowsQuestion_TestMethod003()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-245")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-246")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateTableWithUnlimitedRows_TableTitleVisibility("QA-DSQ-204", true)
                .ValidateTableWithUnlimitedRows_TableSubTitleVisibility("QA-DSQ-204", true)

                .ValidateTableWithUnlimitedRows_TableTitleText("QA-DSQ-204", "WF Table With Unlimited Rows")
                .ValidateTableWithUnlimitedRows_TableSubTitleText("QA-DSQ-204", "WF Unlimited Rows Table Sub Heading")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 1, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 1, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-245", 1, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-246", 1, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "Reason 1")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 2, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 2, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-245", 2, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-246", 2, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-2", "2021-05-12T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-2", "Reason 2");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11381")]
        [Description("Open an assessment record with an unlimited rows table question with two rows set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - Update the second row answers on the unlimited table - Click on the Save button - " +
            "Validate that the answers are correctly saved.")]
        public void TableWithUnlimitedRowsQuestion_TestMethod004()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-245")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-246")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertDateQuestion("QA-DQ-245-2", "09/05/2021")
                .ClickPicklistQuestionPicklist("QA-DQ-246-2")
                .ClickPicklistQuestionOption("QA-DQ-246-2", "Reason 1")

                .ClickSaveButton("QA-DS-69");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "Reason 1")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-2", "2021-05-09T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-2", "Reason 1");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11382")]
        [Description("Open an assessment record with an unlimited rows table question with two rows set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - Click on the second row remove button on the unlimited table - Confirm the Row removal - Click on the Save button - " +
            "Validate that the row is removed.")]
        public void TableWithUnlimitedRowsQuestion_TestMethod005()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-245")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-246")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ClickTableWithUnlimitedRows_RemoveButton("QA-DSQ-204", 2);

            alertPopup.WaitForAlertPopupToLoad().ValidateAlertText("Do you wish to delete this row? This action cannot be undone.").TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 2, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 2, false)
                .ClickSaveButton("QA-DS-69");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "Reason 1")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 2, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 2, false);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11383")]
        [Description("Open an assessment record with an unlimited rows table question with two rows set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - Update the first row answers on the unlimited table - Click on the Save button - " +
            "Validate that the answers are correctly saved.")]
        public void TableWithUnlimitedRowsQuestion_TestMethod006()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-245")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-246")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .InsertDateQuestion("QA-DQ-245-1", "09/05/2021")
                .ClickPicklistQuestionPicklist("QA-DQ-246-1")
                .ClickPicklistQuestionOption("QA-DQ-246-1", "Reason 2")

                .ClickSaveButton("QA-DS-69");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "2021-05-09T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "Reason 2")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-2", "2021-05-12T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-2", "Reason 2");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11384")]
        [Description("Open an assessment record with an unlimited rows table question with two rows set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - Click on the Add button for the unlimited row table - Validate that a third row is added to the table")]
        public void TableWithUnlimitedRowsQuestion_TestMethod007()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-245")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-246")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickTableWithUnlimitedRows_AddButton("QA-DSQ-204")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 1, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 1, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-245", 1, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-246", 1, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "Reason 1")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 2, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 2, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-245", 2, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-246", 2, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-2", "2021-05-12T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-2", "Reason 2")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 3, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 3, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-245", 3, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-246", 3, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-3", "")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-3", "--- Please Select ---")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 4, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 4, false);

            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11385")]
        [Description("Open an assessment record with an unlimited rows table question with two rows set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - Click on the Add button for the unlimited row table - Set answers in the new row - " +
            "Click on the save button - Validate that the new row is saved.")]
        public void TableWithUnlimitedRowsQuestion_TestMethod008()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-245")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-246")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickTableWithUnlimitedRows_AddButton("QA-DSQ-204")

                .InsertDateQuestion("QA-DQ-245-3", "09/05/2021")
                .ClickPicklistQuestionPicklist("QA-DQ-246-3")
                .ClickPicklistQuestionOption("QA-DQ-246-3", "Reason 1")

                .ClickSaveButton("QA-DS-69");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "Reason 1")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-2", "2021-05-12T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-2", "Reason 2")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-3", "2021-05-09T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-3", "Reason 1");


        }

        [Test]
        [Property("JiraIssueID", "CDV6-11386")]
        [Description("Open an assessment record with an unlimited rows table question with three rows set ('Automated UI Test Document 1') - " +
            "Wait for the document to load - Navigate to section 2 - Click on the second raw remove button for the unlimited row table - Click on the save button - " +
            "Validate that the new row is saved.")]
        public void TableWithUnlimitedRowsQuestion_TestMethod009()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-245")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 13), "caseform", 3);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-246")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue1, "caseform", 3);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickTableWithUnlimitedRows_RemoveButton("QA-DSQ-204", 2);

            alertPopup.WaitForAlertPopupToLoad().ValidateAlertText("Do you wish to delete this row? This action cannot be undone.").TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ClickSaveButton("QA-DS-69");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-1", "Reason 1")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-245", 2, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-246", 2, false)

                .ValidateMosaicDateQuestionInputValue("QA-DQ-245-3", "2021-05-13T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-246-3", "Reason 1");
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10395

        [Test]
        [Property("JiraIssueID", "CDV6-11304")]
        [Description("Navigate to the portal URL - Click in the Register button - Wait for the registration page to load - Set data in all fields - Set 'How to Receive PIN' to SMS - " +
            "Click on the save Register button - Validate that a new person record is created - validate that the person record has the field Allow SMS set to Yes")]
        public void AllowSmsAutoUpdate_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            var email = "StaffordshireCitizenPortalUser" + DateTime.Now.ToString("yyyyMMddHHmmss") + "@mail.com";

            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 2, 5, 4, 5);

            this.homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .ClickRegisterButton();

            registrationPage
                .WaitForRegistrationPageToLoad()

                .InsertEmailAddress(email)
                .InsertPassword("Passw0rd_!")
                .InsertRepeatPassword("Passw0rd_!")
                .SelectHowToReceivePINInMainField("SMS");

            registrationPage
                .InsertFirstName("Antonyett")
                .InsertLastName("Brandon")
                .ClickDateOfBirthField();

            registrationPage
                .WaitForCalendarToLoad() //calendar Open
                .CalendarSelectMonth("January")
                .CalendarInsertYear("2000")
                .CalendarClickOnDaySpan("January 1, 2000");

            registrationPage
                .WaitForCalendarNotVisible()//calendar Closed
                .ClickOnGenderTopField()
                .InsertGenderSearchText("Male")
                .ClickOnGenderOption("Male")
                .ClickOnEthnicityTopField()
                .InsertEthnicitySearchText("African")
                .ClickOnEthnicityOption("African")
                .InsertNHSNo("9876543210")
                .InsertNationalInsuranceNumber("1234567890");
            registrationPage
                .InsertPropertyName("pna")
                .InsertPropertyNo("pno")
                .InsertStreet("st")
                .InsertVillageDistrict("vil")
                .InsertTownCity("tow")
                .InsertCounty("cou")
                .InsertPostcode("postc")
                .InsertHomePhone("123456")
                .InsertMobilePhone("654321");
            registrationPage
                .ClickOnRegisterButton();

            registrationSuccessPage
                .WaitForRegistrationSuccessPageToLoad();

            var personRecords = dbHelper.person.GetByPrimaryEmail(email);
            Assert.AreEqual(1, personRecords.Count);

            var fields = dbHelper.person.GetPersonById(personRecords[0], "allowsms", "allowemail");
            Assert.AreEqual(true, fields["allowsms"]);
            //Assert.AreEqual(false, fields["allowemail"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11305")]
        [Description("Navigate to the portal home page (2FA is enabled from the website) - Login with a portal user account (user 2FA method set to Email) - " +
            "Wait for the member home page to load - Click the About Me User Name Button - Click on the Edit Two Factor Authentication button - " +
            "Wait for the 'Change Two Factor Authentication Type' page to load - Change the 2FA type to SMS - Click on the Submit button - " +
            "Validate that the toast success message is displayed - validate that the person record has the field Allow SMS set to Yes ")]
        public void AllowSmsAutoUpdate_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteuserid = new Guid("f5251591-4dae-eb11-a323-005056926fe4"); //StaffordshireCitizenPortalUser44@mail.com
            var personid = new Guid("d143f8cf-f772-447d-9f39-70e026b5c2e8"); //Silvia Bolton

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, true, 1, 10, 4, 5);

            //remove all pins from the website user
            foreach (var userpinid in dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid))
                dbHelper.websiteUserPin.DeleteWebsiteUserPin(userpinid);

            //update the 2FA method for the user
            dbHelper.websiteUser.UpdateTwoFactorAuthenticationType(websiteuserid, 1);

            dbHelper.person.UpdateAllowSMS(personid, false);
            dbHelper.person.UpdateAllowEmail(personid, false);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser44@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()

                .WaitForValidatePinButtonVisible();


            var userpins = dbHelper.websiteUserPin.GetByWebSiteUserID(websiteuserid);
            Assert.AreEqual(1, userpins.Count);
            var fields = dbHelper.websiteUserPin.GetByID(userpins[0], "pin");
            var pinNumber = (string)fields["pin"];

            homePage
                .InsertPIN(pinNumber)
                .ClickValidatePinButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditTwoFactorAuthenticationButton();

            changeTwoFactorAuthenticationTypePage
                .WaitForChangeTwoFactorAuthenticationTypePageToLoad()
                .ClickOnTwoFactorAuthenticationTypeTopField()
                .ClickOnTwoFactorAuthenticationTypeOption("SMS")
                .ClickSubmiitButton()

                .ValidateToastMessageVisible()
                .ValidateToastMessageText("Two factor authentication type was successfully updated.");

            System.Threading.Thread.Sleep(2000);

            var personfields = dbHelper.person.GetPersonById(personid, "allowsms", "allowemail");
            Assert.AreEqual(true, personfields["allowsms"]);
            Assert.AreEqual(false, personfields["allowemail"]);

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10498

        [Test]
        [Property("JiraIssueID", "CDV6-11313")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automated UI Test Document 1' ) - " +
            "Wait for the home page to load - Click on the View Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Validate that the 'Assessment submitted successfully.' message is displayed - " +
            "Validate that the Completed by and Completed On data is set for the assessment")]
        public void ClosingAssessment_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("9290d446-3da9-e911-a2c6-005056926fe4"); //Automated UI Test Document 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var responsibleuserid = new Guid("FDEABA2C-E8A6-E911-A2C6-005056926FE4"); //Security Test User Admin
            var caseID = new Guid("210aead4-305e-ea11-a2cb-005056926fe4"); //QA-CAS-000001-36659
            int assessmentstatusid = 1; //In Progress
            var startDate = new DateTime(2021, 3, 19);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var caseformid in dbHelper.caseForm.GetCaseFormByCaseID(caseID, startDate))
                dbHelper.caseForm.DeleteCaseForm(caseformid);

            //create a new case form record
            var assessmentid = dbHelper.caseForm.CreateCaseForm(OwnerID, personID, "Spencer Bishop", responsibleuserid, caseID, "QA-CAS-000001-36659", documentid, "Automated UI Test Document 1", assessmentstatusid, startDate, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")

                .ClickSubmitButton("QA-DS-69");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")
                .ValidateAlertMessageVisibility("Assessment submitted successfully.", true);

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            var consumerPortalAdminSyystemUserId = new Guid("98677d27-532a-eb11-a2cd-005056926fe4"); //Consumer Portal Admin
            var fields = dbHelper.caseForm.GetCaseFormByID(assessmentid, "completedbyid", "completiondate");
            Assert.AreEqual(consumerPortalAdminSyystemUserId, fields["completedbyid"]); 
            Assert.AreEqual(DateTime.Now.Date, fields["completiondate"]);

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10644

        [Test]
        [Property("JiraIssueID", "CDV6-11314")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment with answers that contain cross site script tags that should trigger an alert) - " +
            "Wait for the home page to load - Click on a View Assessment Button - Wait for the Assessment page to load - " +
            "Validate that no alert is displayed - Validate that the text answers are correctly displayed")]
        public void CrossSiteScripting_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var assessmentid = new Guid("312e37e3-2ebe-eb11-a323-005056926fe4"); //Automated UI Test Document 1

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automated UI Test Document 1")

                .WaitForSectionToLoad("QA-DS-66")
                .ValidateSubSectionQuestionTitleText("QA-DSQ-151", "WF Paragraph")
                .ValidateMosaicQuestionInputValue("QA-DQ-172", "\" <img src=\"http://url.to.file.which/not.exist\" onerror=alert('Alert1');>")

                .ClickSectionLink("QA-DS-69")
                .WaitForSectionToLoad("QA-DS-69")
                .ValidateSubSectionQuestionTitleText("QA-DSQ-153", "WF Short Answer")
                .ValidateMosaicQuestionInputValue("QA-DQ-174", "\" <img src=\"http://url.to.file.which/not.exist\" onerror=alert('Alert2');>")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11315")]
        [Description("Open Portal Website - Login with a portal website user (user has address that contain cross site script tags that should trigger an alert) - " +
            "Wait for the home page to load - Navigate to the Edit Details page - " +
            "Validate that no alert is displayed - Validate that the address information is correctly displayed")]
        public void CrossSiteScripting_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad(); 

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditDetailsButton();

            personDetailsPage
                .WaitForPersonDetailsPageToLoad()

                .ValidateFirstName("Shelley")
                .ValidateLastName("Conner")

                .ValidatePropertyName("\" <img src=\"http://url.to.file.which/not.exist\" onerror=alert('Alert3');>")
                .ValidatePropertyNo("168481");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();

        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-9083 --> https://advancedcsg.atlassian.net/browse/CDV6-10760

        /*NOTE: All test methods developed in CDV6-9083 need to be replaced by new code due to the story CDV6-10760. The health appointments widget was completely re-factored*/

        //*HEALTH APPOINTMENTS*//


        [Test]
        [Property("JiraIssueID", "CDV6-11354")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Validate that the Health Appointments widget is displayed")]
        public void PortalHealthAppointments_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11355")]
        [Description("Open Portal Website - Login with a portal website user (User has no health appointment linked to him) - Wait for the home page to load - " +
            "Validate that the My Health Appointments widget is displayed - " +
            "Validate that the No Records message is displayed in the widget")]
        public void PortalHealthAppointments_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateHealthAppointmentNoRecordsMessageVisibility(true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11356")]
        [Description("Open Portal Website - Login with a portal website user (User has one health appointment linked to him for today) - Wait for the home page to load - " +
            "Validate that the My Health Appointments widget is displayed - " +
            "Validate that the No Records message is NOT displayed in the widget - " +
            "Validate that the Health Appointment record is displayed")]
        public void PortalHealthAppointments_TestMethod03()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.Date;
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);
            
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentNoRecordsMessageVisibility(false)

                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), true)

                .ValidateHealthAppointmentScheduled(healthAppointmentID.ToString())
                .ValidateHealthAppointmentDateAndTimeText(healthAppointmentID.ToString(), appointmentStartDate.ToString("dd MMM yyyy") + ", 19:00")
                .ValidateHealthAppointmentStatusText(healthAppointmentID.ToString(), "Scheduled")
                .ValidateHealthAppointmentDurationText(healthAppointmentID.ToString(), "Duration: 5 Minutes")
                .ValidateHealthAppointmentLocationText(healthAppointmentID.ToString(), "Adoption provider")
                .ValidateHealthAppointmentTeamAndLeadProfessionalText(healthAppointmentID.ToString(), "CareDirector QA, Test User 3509");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11357")]
        [Description("Open Portal Website - Login with a portal website user (User has one health appointment linked to him for tomorrow) - Wait for the home page to load - " +
            "Validate that the Health Appointment record is displayed - " + 
            "Click on the View More button - Validate that the appointment car is displayed - Validate that the card information is correct - " +
            "Click on the OK button - Validate that the appointment card is hidden")]
        public void PortalHealthAppointments_TestMethod04()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(1);
            TimeSpan startTime = new TimeSpan(18, 0, 0);
            TimeSpan endTime = new TimeSpan(18, 10, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), true)

                .ValidateHealthAppointmentScheduled(healthAppointmentID.ToString())
                .ValidateHealthAppointmentDateAndTimeText(healthAppointmentID.ToString(), appointmentStartDate.ToString("dd MMM yyyy") + ", 18:00")
                .ValidateHealthAppointmentStatusText(healthAppointmentID.ToString(), "Scheduled")
                .ValidateHealthAppointmentDurationText(healthAppointmentID.ToString(), "Duration: 10 Minutes")
                .ValidateHealthAppointmentLocationText(healthAppointmentID.ToString(), "Adoption provider")
                .ValidateHealthAppointmentTeamAndLeadProfessionalText(healthAppointmentID.ToString(), "CareDirector QA, Test User 3509")

                .ClickHealthAppointmentViewMoreButton(healthAppointmentID.ToString())

                .WaitForHealthAppointmentCardToLoad(healthAppointmentID.ToString())
                .ValidateHealthAppointmentCardScheduledColor(healthAppointmentID.ToString())
                .ValidateHealthAppointmentCardDateAndTimeText(healthAppointmentID.ToString(), appointmentStartDate.ToString("dd MMM yyyy") + ", 18:00")
                .ValidateHealthAppointmentCardStatusText(healthAppointmentID.ToString(), "Scheduled")
                .ValidateHealthAppointmentCardDurationText(healthAppointmentID.ToString(), "Duration: 10 Minutes")
                .ValidateHealthAppointmentCardLocationText(healthAppointmentID.ToString(), "Adoption provider")
                .ValidateHealthAppointmentCardTeamAndLeadProfessionalText(healthAppointmentID.ToString(), "CareDirector QA, Test User 3509")
                .ValidateHealthAppointmentCardAppointmentReasonText(healthAppointmentID.ToString(), "Appointment Reason: Assessment")
                .ValidateHealthAppointmentCardContactTypeText(healthAppointmentID.ToString(), "Contact Type: Face To Face")
                
                .ClickHealthAppointmentCardOKButton(healthAppointmentID.ToString())

                .WaitForHealthAppointmentCardToGetHidden(healthAppointmentID.ToString());
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11358")]
        [Description("Open Portal Website - Login with a portal website user (User has one health appointment linked to him for tomorrow) - Wait for the home page to load - " +
            "Validate that the Appointment record is NOT displayed in the past appointments section")]
        public void PortalHealthAppointments_TestMethod05()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(1).Date;
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), true)
                .ClickPastHealthAppointmentsButton()
                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11359")]
        [Description("Open Portal Website - Login with a portal website user (User has one health appointment linked to him for today) - Wait for the home page to load - " +
            "Validate that the Appointment record is NOT displayed in the past appointments section")]
        public void PortalHealthAppointments_TestMethod06()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.Date;
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), true)
                .ClickPastHealthAppointmentsButton()
                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11360")]
        [Description("Open Portal Website - Login with a portal website user (User has one CANCELED health appointment linked to him for tomorrow) - Wait for the home page to load - " +
            "Validate that the Health Appointment record is displayed as Cancelled")]
        public void PortalHealthAppointments_TestMethod07()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(1).Date;
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            //cancel the appointment
            dbHelper.healthAppointment.CancelAppointment(healthAppointmentID, 1); //Recorded in Error


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), true)
                .ValidateHealthAppointmentCancelled(healthAppointmentID.ToString());
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11361")]
        [Description("Open Portal Website - Login with a portal website user (User has several health appointment linked to him for the future) - Wait for the home page to load - " +
            "Validate that the Health Appointment records are displayed in chronological order ")]
        public void PortalHealthAppointments_TestMethod08()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(1).Date;
            TimeSpan startTime = new TimeSpan(9, 0, 0);
            TimeSpan endTime = new TimeSpan(9, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment for today at 09:00
            Guid healthAppointment1ID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            //Create health appointment for tomorrow at 09:00
            Guid healthAppointment2ID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate.AddDays(1), startTime, endTime, appointmentStartDate.AddDays(1),
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            //Create health appointment for today at 10:00
            Guid healthAppointment3ID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, new TimeSpan(10, 0 , 0), new TimeSpan(10, 5, 0), appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            //Create health appointment for tomorrow at 10:00
            Guid healthAppointment4ID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate.AddDays(1), new TimeSpan(10, 0, 0), new TimeSpan(10, 5, 0), appointmentStartDate.AddDays(1),
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);





            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentVisibility(healthAppointment1ID.ToString(), true)
                .ValidateHealthAppointmentVisibility(healthAppointment2ID.ToString(), true)
                .ValidateHealthAppointmentVisibility(healthAppointment3ID.ToString(), true)
                .ValidateHealthAppointmentVisibility(healthAppointment4ID.ToString(), true)

                .ValidateHealthAppointmentPosition(healthAppointment1ID.ToString(), 1)
                .ValidateHealthAppointmentPosition(healthAppointment3ID.ToString(), 2)
                .ValidateHealthAppointmentPosition(healthAppointment2ID.ToString(), 3)
                .ValidateHealthAppointmentPosition(healthAppointment4ID.ToString(), 4);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11362")]
        [Description("Open Portal Website - " +
            "Login with a portal website user (User has one health appointment linked to him for tomorrow, Appointment Contact Type not marked as Available in Portal) - " +
            "Wait for the home page to load - " +
            "Validate that the Appointment record is NOT displayed in the My Health Appointments section")]
        public void PortalHealthAppointments_TestMethod09()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("cfa9f094-0397-e911-a2c6-005056926fe4");  //Test_05_Clinic
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(1).Date;
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentNoRecordsMessageVisibility(true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11363")]
        [Description("Open Portal Website - Login with a portal website user (User has one health appointment linked to him for yesterday) - Wait for the home page to load - " +
            "Validate that the My Health Appointments widget is displayed - " +
            "Validate that the No Records message is displayed in the Upcoming appointments area - " +
            "Validate that the past appointment is not visible")]
        public void PortalHealthAppointments_TestMethod10()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.Date.AddDays(-1);
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentNoRecordsMessageVisibility(true)
                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), false);
        }


        //*PAST HEATH APPOINTMENTS*//


        [Test]
        [Property("JiraIssueID", "CDV6-11364")]
        [Description("Open Portal Website - Login with a portal website user (User has no past health appointment linked to him) - Wait for the home page to load - " +
        "Click on the Past button in the appointments widget - Validate that the Past Health Appointments Section is displayed - " +
        "Validate that the No Records message is displayed in the widget")]
        public void PortalHealthAppointments_TestMethod11()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPastHealthAppointmentsButton()
                .ValidatePastHealthAppointmentNoRecordsMessageVisibility(true)
                .ValidateHealthAppointmentNoRecordsMessageVisibility(false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11365")]
        [Description("Open Portal Website - Login with a portal website user (User has one past health appointment linked to him for yesterday) - Wait for the home page to load - " +
            "Click on the Past button in the appointments widget - Validate that the Past Health Appointments Section is displayed - " +
            "Validate that the No Records message is NOT displayed - " +
            "Validate that the Past Health Appointment record is displayed")]
        public void PortalHealthAppointments_TestMethod12()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(-1);
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickPastHealthAppointmentsButton()

                .ValidatePastHealthAppointmentNoRecordsMessageVisibility(false)
                .ValidateHealthAppointmentNoRecordsMessageVisibility(false)

                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), true)

                .ValidateHealthAppointmentAttended(healthAppointmentID.ToString())

                .ValidateHealthAppointmentDateAndTimeText(healthAppointmentID.ToString(), appointmentStartDate.ToString("dd MMM yyyy") + ", 19:00")
                .ValidateHealthAppointmentStatusText(healthAppointmentID.ToString(), "Attended")
                .ValidateHealthAppointmentDurationText(healthAppointmentID.ToString(), "Duration: 5 Minutes")
                .ValidateHealthAppointmentLocationText(healthAppointmentID.ToString(), "Adoption provider")
                .ValidateHealthAppointmentTeamAndLeadProfessionalText(healthAppointmentID.ToString(), "CareDirector QA, Test User 3509");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11366")]
        [Description("Open Portal Website - Login with a portal website user (User has one past health appointment linked to him for yesterday) - Wait for the home page to load - " +
            "Click on the Past button in the appointments widget - Validate that the Past Health Appointment record is displayed - " +
            "Click on the appointment View More button - Validate that the appointment card i displayed - " +
            "Click on the OK button on the appointment card - Validate that the appointment is hidden")]
        public void PortalHealthAppointments_TestMethod13()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(-1);
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 10, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            string appointmentTitle = (string)dbHelper.healthAppointment.GetHealthAppointmentByID(healthAppointmentID, "Title")["title"];


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickPastHealthAppointmentsButton()
                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), true)
                .ClickHealthAppointmentViewMoreButton(healthAppointmentID.ToString())

                .WaitForHealthAppointmentCardToLoad(healthAppointmentID.ToString())
                .ValidateHealthAppointmentCardAttendedColor(healthAppointmentID.ToString())
                .ValidateHealthAppointmentCardDateAndTimeText(healthAppointmentID.ToString(), appointmentStartDate.ToString("dd MMM yyyy") + ", 19:00")
                .ValidateHealthAppointmentCardStatusText(healthAppointmentID.ToString(), "Attended")
                .ValidateHealthAppointmentCardDurationText(healthAppointmentID.ToString(), "Duration: 10 Minutes")
                .ValidateHealthAppointmentCardLocationText(healthAppointmentID.ToString(), "Adoption provider")
                .ValidateHealthAppointmentCardTeamAndLeadProfessionalText(healthAppointmentID.ToString(), "CareDirector QA, Test User 3509")
                .ValidateHealthAppointmentCardAppointmentReasonText(healthAppointmentID.ToString(), "Appointment Reason: Assessment")
                .ValidateHealthAppointmentCardContactTypeText(healthAppointmentID.ToString(), "Contact Type: Face To Face")

                .ClickHealthAppointmentCardOKButton(healthAppointmentID.ToString())

                .WaitForHealthAppointmentCardToGetHidden(healthAppointmentID.ToString())
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11367")]
        [Description("Open Portal Website - Login with a portal website user (User has one past health appointment linked to him for yesterday) - Wait for the home page to load - " +
            "Validate that the Appointment record is NOT displayed in the Upcoming Health Appointments section")]
        public void PortalHealthAppointments_TestMethod14()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(-1).Date;
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            string appointmentTitle = (string)dbHelper.healthAppointment.GetHealthAppointmentByID(healthAppointmentID, "Title")["title"];


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateHealthAppointmentNoRecordsMessageVisibility(true)
                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11368")]
        [Description("Open Portal Website - Login with a portal website user (User has one CANCELED past health appointment linked to him for yesterday) - Wait for the home page to load - " +
            "Click on the Past button in the appointments widget - Validate that the Past Health Appointment record is displayed as Cancelled")]
        public void PortalHealthAppointments_TestMethod15()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(-1).Date;
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            //cancel the appointment
            dbHelper.healthAppointment.CancelAppointment(healthAppointmentID, 1); //Recorded in Error


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickPastHealthAppointmentsButton()
                .ValidateHealthAppointmentVisibility(healthAppointmentID.ToString(), true)
                .ValidateHealthAppointmentCancelled(healthAppointmentID.ToString());
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11369")]
        [Description("Open Portal Website - Login with a portal website user (User has several past health appointment linked to him for the past) - Wait for the home page to load - " +
            "Click on the Past button in the appointments widget - Validate that the Health Appointment records are displayed in chronological order ")]
        public void PortalHealthAppointments_TestMethod16()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("A295ABD4-A7CB-E811-80DC-0050560502CC");  //Face To Face
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(-1).Date;
            TimeSpan startTime = new TimeSpan(9, 0, 0);
            TimeSpan endTime = new TimeSpan(9, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment for yesterday at 09:00
            Guid healthAppointment1ID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            //Create health appointment for two days in the past at 09:00
            Guid healthAppointment2ID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate.AddDays(-1), startTime, endTime, appointmentStartDate.AddDays(-1),
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            //Create health appointment for yesterday at 10:00
            Guid healthAppointment3ID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, new TimeSpan(10, 0, 0), new TimeSpan(10, 5, 0), appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);

            //Create health appointment for days in the past at 10:00
            Guid healthAppointment4ID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate.AddDays(-1), new TimeSpan(10, 0, 0), new TimeSpan(10, 5, 0), appointmentStartDate.AddDays(-1),
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);





            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPastHealthAppointmentsButton()

                .ValidateHealthAppointmentVisibility(healthAppointment1ID.ToString(), true)
                .ValidateHealthAppointmentVisibility(healthAppointment2ID.ToString(), true)
                .ValidateHealthAppointmentVisibility(healthAppointment3ID.ToString(), true)
                .ValidateHealthAppointmentVisibility(healthAppointment4ID.ToString(), true)

                .ValidatePastHealthAppointmentPosition(healthAppointment3ID.ToString(), 1)
                .ValidatePastHealthAppointmentPosition(healthAppointment1ID.ToString(), 2)
                .ValidatePastHealthAppointmentPosition(healthAppointment4ID.ToString(), 3)
                .ValidatePastHealthAppointmentPosition(healthAppointment2ID.ToString(), 4)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11370")]
        [Description("Open Portal Website - " +
            "Login with a portal website user (User has one past health appointment linked to him for yesterday, Appointment Contact Type not marked as Available in Portal) - " +
            "Wait for the home page to load - " +
            "Validate that the Appointment record is NOT displayed in the Past Health Appointments section")]
        public void PortalHealthAppointments_TestMethod17()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var personID = new Guid("d0bdffe7-29a3-4fb6-88ef-23a520806ab8"); //Shelley Conner
            var caseID = new Guid("fadee4dd-3abe-eb11-a323-005056926fe4"); //CAS-000005-1513


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //delete all health appointments for the case
            foreach (var healthAppointmentid in dbHelper.healthAppointment.GetHealthAppointmentByCaseID(caseID))
            {
                foreach (var caseactionid in dbHelper.caseAction.GetByHealthAppointmentId(healthAppointmentid))
                    dbHelper.caseAction.DeleteCaseAction(caseactionid);

                dbHelper.healthAppointment.DeleteHealthAppointment(healthAppointmentid);
            }


            //create Health Appointment 
            Guid healthprofessionalid = new Guid("76336bda-bf0c-4f3c-b26d-0f5cd79180c8");//Test User 3509
            Guid MobileTeam1_Teamid = new Guid("b6060dfa-7333-43b2-a662-3d9cadab12e5");  //CareDirector QA
            Guid appointmentDataformId = new Guid("904696C5-D8A4-E611-80D3-0050560502CC"); //Appointments
            Guid contacttypeid = new Guid("cfa9f094-0397-e911-a2c6-005056926fe4");  //Test_05_Clinic
            Guid healthappointmentreasonid = new Guid("22C2DB0A-583A-E911-A2C5-005056926FE4");  //Assessment
            Guid mobile_test_user_1userid = new Guid("2B16C2F3-459E-E911-A2C6-005056926FE4");  //mobile_test_user_1
            Guid MobileTestClinicTeam_Teamid = new Guid("46559845-1140-e911-a2c5-005056926fe4");   //Bridgend - Adoption - Primary Team
            Guid healthappointmentlocationtypeid = new Guid("8BA43FEC-AACB-E811-80DC-0050560502CC");    //Clients or patients home
            Guid providerId = new Guid("0986e681-8276-eb11-a30d-005056926fe4");    //Adoption provider
            DateTime appointmentStartDate = DateTime.Now.AddDays(-1).Date;
            TimeSpan startTime = new TimeSpan(19, 0, 0);
            TimeSpan endTime = new TimeSpan(19, 5, 0);
            bool cancelappointment = false;
            Guid? wholedtheappointmentid = null;
            Guid? healthappointmentoutcometypeid = null;
            int? cancellationreasontypeid = null;
            int? nonattendancetypeid = null;
            Guid? WhoCancelledTheAppointmentId = null;
            string WhoCancelledTheAppointmentIdName = "";
            string WhoCancelledTheAppointmentIdTableName = "";
            string whocancelledtheappointmentfreetext = "";
            DateTime? dateunavailablefrom = null;
            DateTime? dateavailablefrom = null;
            Guid? healthappointmentabsencereasonid = null;
            DateTime? cnanotificationdate = null;
            bool additionalprofessionalrequired = true;
            bool addtraveltimetoappointment = false;
            bool returntobaseafterappointment = false;

            //Create health appointment 
            Guid healthAppointmentID = dbHelper.healthAppointment.CreateHealthAppointment(
                MobileTeam1_Teamid, personID, "Shelley Conner", appointmentDataformId, contacttypeid, healthappointmentreasonid, "Assessment", caseID, mobile_test_user_1userid,
                MobileTestClinicTeam_Teamid, healthappointmentlocationtypeid, "Clients or patients home", healthprofessionalid, providerId,
                "appointment information ...", appointmentStartDate, startTime, endTime, appointmentStartDate,
                cancelappointment, wholedtheappointmentid, healthappointmentoutcometypeid,
                cancellationreasontypeid, nonattendancetypeid, WhoCancelledTheAppointmentId, WhoCancelledTheAppointmentIdName, WhoCancelledTheAppointmentIdTableName, whocancelledtheappointmentfreetext, dateunavailablefrom, dateavailablefrom, healthappointmentabsencereasonid, cnanotificationdate,
                additionalprofessionalrequired, addtraveltimetoappointment, returntobaseafterappointment);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser45@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickPastHealthAppointmentsButton()
                .ValidatePastHealthAppointmentNoRecordsMessageVisibility(true)
                .ValidateHealthAppointmentNoRecordsMessageVisibility(false);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10688

        [Test]
        [Property("JiraIssueID", "CDV6-11371")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the member home page to load - " +
            "Navigate to the Edit Details page - Update all fields in the personal details section - Tap on the submit button - " +
            "Validate that all data is saved against CareDirector")]
        public void PortalWorkflowForEmail_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("23d6635e-4f61-eb11-a308-005056926fe4"); //StaffordshireCitizenPortalUser16@mail.com
            var personID = new Guid("9cd27d1e-1594-4377-9920-11840ec9c136"); //Bernard Roth
            var ethnicity = new Guid("6c8fb74f-f534-e911-a2c5-005056926fe4"); //English


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //reset the person Personal Details
            dbHelper.person.UpdatePersonalDetails(personID, "Bernard", "Roth", new DateTime(1966, 5, 4), 1, ethnicity, "231 659 9044", "1234567890");

            //reset the person Contact Details
            dbHelper.person.UpdateContactDetails(personID, "Bromley", "169114", "Thornton Road,", "London Vlg", "London", "Greater London", "BR1 1HG", "721675263", "601989914");

            //remove all emails for the person
            foreach (var emailid in dbHelper.email.GetEmailByRegardingID(personID))
                dbHelper.email.DeleteEmail(emailid);


            Random r = new Random();
            string newNationalInsuranceNumber = r.Next(9, 999999).ToString();

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser16@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickAboutMeUserNameButton()
                .ClickEditDetailsButton();

            personDetailsPage
                .WaitForPersonDetailsPageToLoad()
                .InsertNationalInsuranceNumber(newNationalInsuranceNumber)
                .ClickOnSubmitButton()
                .ValidateToastMessageVisible();


            var fields = dbHelper.person.GetPersonById(personID, "nationalinsurancenumber");
            Assert.AreEqual(newNationalInsuranceNumber, fields["nationalinsurancenumber"]);

            var emails = dbHelper.email.GetEmailByRegardingID(personID);
            Assert.AreEqual(1, emails.Count);

            var emailfields = dbHelper.email.GetEmailByID(emails[0], "subject", "notes");
            Assert.AreEqual("Personal Details Updated on Portal", emailfields["subject"]);
            Assert.IsTrue(((string)emailfields["notes"]).Contains("Your personal details were updated on the citizen portal on"));
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10404

        [Test]
        [Property("JiraIssueID", "")]
        [Description("Try to login with a user that have a locked account - Validate that an error message is presented to the user")]
        public void UnlockAccountUsingPasswordReset_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //remove all password resets
            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);

            //Lock the user account
            dbHelper.websiteUser.UpdateWebsiteUser(websiteUserID, 15, DateTime.Now, DateTime.Now, true);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser4@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton()
                
                .ValidateErrorMessageVisible()
                .ValidateErrorMessage("Your account is locked. Please contact your system administrator.")
                ;



        }

        [Test]
        [Property("JiraIssueID", "")]
        [Description("User has a locked account - User Requested a reset password link - Access the reset password page - reset the user password - " +
            "navigate to the home page - use the new password to login - Validate that the user can login with the new password and that the user account is unlocked")]
        public void UnlockAccountUsingPasswordReset_TestMethod02()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //AutomatedTests Portal
            var websiteUserID = new Guid("d95dde19-c95f-eb11-a306-005056926fe4"); //StaffordshireCitizenPortalUser4@mail.com

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove all pass history records
            foreach (var passHistoryID in dbHelper.websiteUserPasswordHistory.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordHistory.DeleteWebsiteUserPasswordHistory(passHistoryID);

            //reset password to Passw0rd_!
            dbHelper.websiteUser.UpdatePassword(websiteUserID, "Passw0rd_!");

            //remove all password resets
            foreach (var resetid in dbHelper.websiteUserPasswordReset.GetByWebSiteUserID(websiteUserID))
                dbHelper.websiteUserPasswordReset.DeleteWebsiteUserPasswordReset(resetid);

            //Create a new Password Reset record
            var seton = DateTime.Now;
            var expireon = DateTime.Now.AddMinutes(15);
            var passwordResetRecordID = dbHelper.websiteUserPasswordReset.CreateWebsiteUserPasswordReset(websiteUserID, expireon, seton, "", "");

            //set resetpasswordlink
            var resetPasswordLink = appURL + "reset-password?id=" + passwordResetRecordID.ToString();
            dbHelper.websiteUserPasswordReset.UpdateWebsiteUserPasswordReset(passwordResetRecordID, resetPasswordLink);

            //Lock the user account
            dbHelper.websiteUser.UpdateWebsiteUser(websiteUserID, 15, DateTime.Now, DateTime.Now, true);



            resetPasswordPage
                .GoToResetPasswordPage(resetPasswordLink)
                .WaitForResetPasswordPageToLoad()

                .InsertNewPassword("NewPassw0rd_!")
                .InsertRepeatNewPassword("NewPassw0rd_!")
                .ClickResetPasswordButton()

                .ValidateSuccessMessageVisible()
                .ValidateSuccessMessageText("The password was successfully changed.")
                .ValidateGoToHomePageLinkVisible()
                .ClickGoToHomePageLink();

            homePage
               .WaitForHomePageToLoad()
               .InsertUserName("StaffordshireCitizenPortalUser4@mail.com")
               .InsertPassword("NewPassw0rd_!")
               .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            var fields = dbHelper.websiteUser.GetByID(websiteUserID, "isaccountlocked", "lockedoutdate", "failedpasswordattemptcount", "lastfailedpasswordattemptdate");
            Assert.AreEqual(false, fields["isaccountlocked"]);
            Assert.AreEqual(false, fields.ContainsKey("lockedoutdate"));
            Assert.AreEqual(0, fields["failedpasswordattemptcount"]);
            Assert.AreEqual(false, fields.ContainsKey("lastfailedpasswordattemptdate"));
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10219

        [Test]
        [Property("JiraIssueID", "CDV6-11321")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - " +
            "Validate that the 'Save' and 'Save and Next' buttons are displayed - Validate that the 'Submit' button is not displayed ")]
        public void PersonAssessments_TestMethod001()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ValidateSaveButtonVisibility("QA-DS-307", true)
                .ValidateSaveAndNextButtonVisibility("QA-DS-307", true)
                .ValidateSubmitButtonVisibility(false, "QA-DS-307")
                .ValidateSubmitButtonVisibility(false, "QA-DS-310")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11322")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - Click on Section 2 link - Wait for section 2 to load" +
            "Validate that the 'Save' and 'Submit' buttons are displayed - Validate that the 'Save and Next' button is not displayed ")]
        public void PersonAssessments_TestMethod002()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateSaveButtonVisibility("QA-DS-310", true)
                .ValidateSubmitButtonVisibility(true, "QA-DS-310")
                .ValidateSaveAndNextButtonVisibility("QA-DS-310", false)

                .ValidateSaveButtonVisibility("QA-DS-307", false)
                .ValidateSubmitButtonVisibility(false, "QA-DS-307")
                .ValidateSaveAndNextButtonVisibility("QA-DS-307", false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11323")]
        [Description("Open an In Progress person assessment record - Wait for the Section 1 to load - Validate that 'View in PDF' button is displayed")]
        public void PersonAssessments_TestMethod003()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ValidateViewInPDFButtonVisibility("QA-DS-307", true)
                .ValidateViewInPDFButtonVisibility("QA-DS-310", false)
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11324")]
        [Description("Open an In Progress person assessment record - Wait for the Section 1 to load - Navigate to Section 2 - Wait for Section 2 to load - " +
            "Validate that 'View in PDF' button is displayed")]
        public void PersonAssessments_TestMethod004()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateViewInPDFButtonVisibility("QA-DS-307", false)
                .ValidateViewInPDFButtonVisibility("QA-DS-310", true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11325")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - Set answers in Section 1 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void PersonAssessments_TestMethod005()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ClickRadioButtonQuestionOption("QA-DQ-1232", multipleChoice_Option2.ToString().ToLower()) //WF Multiple Choice
                .InsertQuestionInputValue("QA-DQ-1233", "12.95") //WF Decimal
                .ClickMultiResponseQuestionAddButton("QA-DQ-1234") //WF Multiple Response
                .ClickMultiResponseQuestionOption("QA-DQ-1234", "Day 1")
                .ClickMultiResponseQuestionOption("QA-DQ-1234", "Day 3")
                .InsertQuestionInputValue("QA-DQ-1235", "6") //WF Numeric
                .InsertDateQuestion("QA-DQ-1238", "29/03/2021") //WF Date

                .ClickSaveButton("QA-DS-307");


            //get the Document Question Identifiers
            var multiplechoice_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1232")[0];
            var decimal_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1233")[0];
            var multipleresponse_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1234")[0];
            var numeric_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1235")[0];
            var date_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1238")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multiplechoice_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "multichoiceanswerid");
            Assert.AreEqual(multipleChoice_Option2, fields["multichoiceanswerid"]);

            var decimal_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, decimal_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(decimal_documentAnswerID, "decimalanswer");
            Assert.AreEqual(12.95m, fields["decimalanswer"]);

            var multipleresponse_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multipleresponse_QuestionIdentifierId)[0];
            var documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day1)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day2)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(false, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day3)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            var numeric_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, numeric_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(numeric_documentAnswerID, "NumericAnswer");
            Assert.AreEqual(6, fields["numericanswer"]);

            var date_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, date_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(date_documentAnswerID, "DateAnswer");
            Assert.AreEqual(new DateTime(2021, 3, 29), fields["dateanswer"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11326")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - Set answers in Section 1 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are saved")]
        public void PersonAssessments_TestMethod006()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ClickRadioButtonQuestionOption("QA-DQ-1232", multipleChoice_Option2.ToString().ToLower()) //WF Multiple Choice
                .InsertQuestionInputValue("QA-DQ-1233", "12.95") //WF Decimal
                .ClickMultiResponseQuestionAddButton("QA-DQ-1234") //WF Multiple Response
                .ClickMultiResponseQuestionOption("QA-DQ-1234", "Day 1")
                .ClickMultiResponseQuestionOption("QA-DQ-1234", "Day 3")
                .InsertQuestionInputValue("QA-DQ-1235", "6") //WF Numeric
                .InsertDateQuestion("QA-DQ-1238", "29/03/2021") //WF Date

                .ClickSaveAndNextButton("QA-DS-307")
                .WaitForSectionToLoad("QA-DS-310")
                ;


            //get the Document Question Identifiers
            var multiplechoice_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1232")[0];
            var decimal_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1233")[0];
            var multipleresponse_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1234")[0];
            var numeric_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1235")[0];
            var date_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1238")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multiplechoice_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "multichoiceanswerid");
            Assert.AreEqual(multipleChoice_Option2, fields["multichoiceanswerid"]);

            var decimal_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, decimal_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(decimal_documentAnswerID, "decimalanswer");
            Assert.AreEqual(12.95m, fields["decimalanswer"]);

            var multipleresponse_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multipleresponse_QuestionIdentifierId)[0];
            var documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day1)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day2)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(false, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day3)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            var numeric_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, numeric_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(numeric_documentAnswerID, "NumericAnswer");
            Assert.AreEqual(6, fields["numericanswer"]);

            var date_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, date_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(date_documentAnswerID, "DateAnswer");
            Assert.AreEqual(new DateTime(2021, 3, 29), fields["dateanswer"]);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11327")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - Set answers in Section 1.1 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void PersonAssessments_TestMethod007()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .InsertQuestionInputValue("QA-DQ-1239", "Value 1\r\nValue 2") //WF Paragraph

                .ClickSaveButton("QA-DS-307");


            //get the Document Question Identifiers
            var paragraph_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1239")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, paragraph_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "paragraphanswer");
            Assert.AreEqual("Value 1\nValue 2", fields["paragraphanswer"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11328")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - Set answers in Section 1.2 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void PersonAssessments_TestMethod008()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);


            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ClickPicklistQuestionPicklist("QA-DQ-1240")
                .ClickPicklistQuestionOption("QA-DQ-1240", "Christian")

                .ClickSaveButton("QA-DS-307");


            //get the Document Question Identifiers
            var picklist_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1240")[0];

            //get the answers
            var picklist_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, picklist_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(picklist_documentAnswerID, "PicklistValueId");
            Assert.AreEqual(picklistvalue_Christian, fields["picklistvalueid"]);
        }
        
        [Test]
        [Property("JiraIssueID", "CDV6-11329")]
        [Description("Open an In Progress person assessment record - Navigate to section 2 - Wait for the section to load - Set answers in Section 2 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void PersonAssessments_TestMethod009()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .InsertQuestionInputValue("QA-DQ-1241", "Value 1 ...") //WF Short Answer

                .ClickSaveButton("QA-DS-310");


            //get the Document Question Identifiers
            var shortanswer_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1241")[0];

            //get the answers
            var shortanswer_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, shortanswer_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(shortanswer_documentAnswerID, "ShortAnswer");
            Assert.AreEqual("Value 1 ...", fields["shortanswer"]);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11330")]
        [Description("Open an In Progress person assessment record - Navigate to section 2 - Wait for the section to load - Set answers in Section 2.1 boolean and time questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are saved")]
        public void PersonAssessments_TestMethod010()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ClickRadioButtonQuestionOption("QA-DQ-1245", "1")
                .InsertTimeQuestion("QA-DQ-1247", "19:35")

                .ClickSaveButton("QA-DS-310");


            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1245")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "truefalseanswer");
            Assert.AreEqual(true, fields["truefalseanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1247")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "dateandtimeanswer");
            Assert.AreEqual(DateTime.Now.Date.AddHours(19).AddMinutes(35), ((DateTime)fields["dateandtimeanswer"]).ToLocalTime());


        }

        [Test]
        [Property("JiraIssueID", "CDV6-11331")]
        [Description("Open a person assessment record with an unlimited rows table question with two rows set ('Automation - Portal - Person Form 1') - " +
            "Wait for the document to load - Navigate to section 2 - " +
            "Validate that the Unlimited Rows question is displayed.")]
        public void PersonAssessments_TestMethod011()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1243")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1244")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateTableWithUnlimitedRows_TableTitleVisibility("QA-DSQ-922", true)
                .ValidateTableWithUnlimitedRows_TableSubTitleVisibility("QA-DSQ-922", true)

                .ValidateTableWithUnlimitedRows_TableTitleText("QA-DSQ-922", "WF Table With Unlimited Rows")
                .ValidateTableWithUnlimitedRows_TableSubTitleText("QA-DSQ-922", "WF Unlimited Rows Table Sub Heading")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1243", 1, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1244", 1, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1243", 1, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1244", 1, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-1", "Reason 1")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1243", 2, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1244", 2, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1243", 2, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1244", 2, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-2", "2021-05-12T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-2", "Reason 2");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11332")]
        [Description("Open a person assessment record with an unlimited rows table question with two rows set ('Automation - Portal - Person Form 1') - " +
            "Wait for the document to load - Navigate to section 2 - Update the second row answers on the unlimited table - Click on the Save button - " +
            "Validate that the answers are correctly saved.")]
        public void PersonAssessments_TestMethod012()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1243")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1244")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .InsertDateQuestion("QA-DQ-1243-2", "09/05/2021")
                .ClickPicklistQuestionPicklist("QA-DQ-1244-2")
                .ClickPicklistQuestionOption("QA-DQ-1244-2", "Reason 1")

                .ClickSaveButton("QA-DS-310");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-1", "Reason 1")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-2", "2021-05-09T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-2", "Reason 1");

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11333")]
        [Description("Open a person assessment record with an unlimited rows table question with two rows set ('Automation - Portal - Person Form 1') - " +
            "Wait for the document to load - Navigate to section 2 - Click on the second row remove button on the unlimited table - Confirm the Row removal - Click on the Save button - " +
            "Validate that the row is removed.")]
        public void PersonAssessments_TestMethod013()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1243")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1244")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")
                .ClickTableWithUnlimitedRows_RemoveButton("QA-DSQ-922", 2);

            alertPopup.WaitForAlertPopupToLoad().ValidateAlertText("Do you wish to delete this row? This action cannot be undone.").TapOKButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1243", 2, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1244", 2, false)
                .ClickSaveButton("QA-DS-310");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-1", "Reason 1")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1243", 2, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1244", 2, false);

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11334")]
        [Description("Open a person assessment record with an unlimited rows table question with two rows set ('Automation - Portal - Person Form 1') - " +
            "Wait for the document to load - Navigate to section 2 - Update the first row answers on the unlimited table - Click on the Save button - " +
            "Validate that the answers are correctly saved.")]
        public void PersonAssessments_TestMethod014()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1243")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1244")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .InsertDateQuestion("QA-DQ-1243-1", "09/05/2021")
                .ClickPicklistQuestionPicklist("QA-DQ-1244-1")
                .ClickPicklistQuestionOption("QA-DQ-1244-1", "Reason 2")

                .ClickSaveButton("QA-DS-310");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-1", "2021-05-09T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-1", "Reason 2")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-2", "2021-05-12T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-2", "Reason 2");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11335")]
        [Description("Open a person assessment record with an unlimited rows table question with two rows set ('Automation - Portal - Person Form 1') - " +
            "Wait for the document to load - Navigate to section 2 - Click on the Add button for the unlimited row table - Validate that a third row is added to the table")]
        public void PersonAssessments_TestMethod015()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1243")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1244")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ClickTableWithUnlimitedRows_AddButton("QA-DSQ-922")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1243", 1, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1244", 1, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1243", 1, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1244", 1, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-1", "Reason 1")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1243", 2, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1244", 2, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1243", 2, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1244", 2, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-2", "2021-05-12T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-2", "Reason 2")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1243", 3, true)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1244", 3, true)

                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1243", 3, "Date became involved")
                .ValidateTableWithUnlimitedRows_QuestionHeadingText("QA-DQ-1244", 3, "Reason for Assessment")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-3", "")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-3", "--- Please Select ---")

                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1243", 4, false)
                .ValidateTableWithUnlimitedRows_QuestionHeadingVisibility("QA-DQ-1244", 4, false);

            ;

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11336")]
        [Description("Open a person assessment record with an unlimited rows table question with two rows set ('Automation - Portal - Person Form 1') - " +
            "Wait for the document to load - Navigate to section 2 - Click on the Add button for the unlimited row table - Set answers in the new row - " +
            "Click on the save button - Validate that the new row is saved.")]
        public void PersonAssessments_TestMethod016()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var picklistAnswerValue1 = new Guid("3449C399-4BB4-E911-A2C6-005056926FE4"); //Reason 1
            var picklistAnswerValue2 = new Guid("3C49C399-4BB4-E911-A2C6-005056926FE4"); //Reason 2


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifiers
            var QuestionIdentifierId1 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1243")[0];

            //get the answers
            var documentAnswerID1 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId1)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID1, new DateTime(2021, 5, 11), 1);
            dbHelper.documentAnswer.CreateDateTimeDocumentAnswer(assessmentid, QuestionIdentifierId1, new DateTime(2021, 5, 12), "caseform", 2);


            //get the Document Question Identifiers
            var QuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1244")[0];

            //get the answers
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(documentAnswerID2, picklistAnswerValue1, 1);
            dbHelper.documentAnswer.CreatePicklistDocumentAnswer(assessmentid, QuestionIdentifierId2, picklistAnswerValue2, "caseform", 2);



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ClickTableWithUnlimitedRows_AddButton("QA-DSQ-922")

                .InsertDateQuestion("QA-DQ-1243-3", "09/05/2021")
                .ClickPicklistQuestionPicklist("QA-DQ-1244-3")
                .ClickPicklistQuestionOption("QA-DQ-1244-3", "Reason 1")

                .ClickSaveButton("QA-DS-310");

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-1", "2021-05-11T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-1", "Reason 1")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-2", "2021-05-12T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-2", "Reason 2")

                .ValidateMosaicDateQuestionInputValue("QA-DQ-1243-3", "2021-05-09T00:00:00")
                .ValidatePicklistQuestionSelectedText("QA-DQ-1244-3", "Reason 1");


        }





        [Test]
        [Property("JiraIssueID", "CDV6-11337")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - Remove all answers in Section 1 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are removed")]
        public void PersonAssessments_TestMethod017()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            var multipleChoice_Option1 = new Guid("e92f3c2d-3f52-e911-a2c5-005056926fe4");
            var multipleChoice_Option2 = new Guid("F12F3C2D-3F52-E911-A2C5-005056926FE4");

            var multipleresponse_Day1 = new Guid("FF47D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day2 = new Guid("0748D74D-3F52-E911-A2C5-005056926FE4");
            var multipleresponse_Day3 = new Guid("0F48D74D-3F52-E911-A2C5-005056926FE4");


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifier for section 1 questions
            var documentQuestionIdentifierId2 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1238")[0]; //wf date
            var documentQuestionIdentifierId3 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1233")[0]; //wf decimal
            var documentQuestionIdentifierId4 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1232")[0]; //wf multiple choice
            var documentQuestionIdentifierId5 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1234")[0]; //wf multiple response
            var documentQuestionIdentifierId6 = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1235")[0]; //wf numeric

            //set the answers for wf date
            var documentAnswerID2 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId2)[0];
            dbHelper.documentAnswer.UpdateDateAnswer(documentAnswerID2, new DateTime(2019, 7, 6));

            //set the answers for wf decimal
            var documentAnswerID3 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId3)[0];
            dbHelper.documentAnswer.UpdateDecimalAnswer(documentAnswerID3, 9.3m);

            //set the answer for the wf multiple choice
            var documentAnswerID4 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId4)[0];
            dbHelper.documentAnswer.UpdateMultichoiceAnswer(documentAnswerID4, multipleChoice_Option2);

            //set the answer for the WF Multiple Response Answer question
            var documentAnswerID5 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId5)[0];
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID5, multipleresponse_Day1, true);
            dbHelper.documentAnswerChecklist.CreateDocumentAnswerChecklist(documentAnswerID5, multipleresponse_Day2, true);


            //set the answer for the wf numeric
            var documentAnswerID6 = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, documentQuestionIdentifierId6)[0];
            dbHelper.documentAnswer.UpdateNumericAnswer(documentAnswerID6, 5);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ClickRadioButtonQuestionOption("QA-DQ-1232", multipleChoice_Option1.ToString().ToLower()) //WF Multiple Choice
                .InsertQuestionInputValue("QA-DQ-1233", "") //WF Decimal
                .ClickMultiResponseQuestionAddedOptionRemoveButton("QA-DQ-1234", "Day 2")//WF Multiple Response
                .ClickMultiResponseQuestionAddButton("QA-DQ-1234")
                .ClickMultiResponseQuestionOption("QA-DQ-1234", "Day 3")
                .InsertQuestionInputValue("QA-DQ-1235", "") //WF Numeric
                .InsertDateQuestion("QA-DQ-1238", "") //WF Date

                .ClickSaveAndNextButton("QA-DS-307")
                .WaitForSectionToLoad("QA-DS-310")
                ;


            //get the Document Question Identifiers
            var multiplechoice_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1232")[0];
            var decimal_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1233")[0];
            var multipleresponse_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1234")[0];
            var numeric_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1235")[0];
            var date_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1238")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multiplechoice_QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "multichoiceanswerid");
            Assert.AreEqual(multipleChoice_Option1, fields["multichoiceanswerid"]);

            var decimal_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, decimal_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(decimal_documentAnswerID, "decimalanswer");
            Assert.AreEqual(false, fields.ContainsKey("decimalanswer"));

            var multipleresponse_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, multipleresponse_QuestionIdentifierId)[0];
            var documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day1)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day2)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(false, fields["checked"]);

            documentAnswerCheckListID = dbHelper.documentAnswerChecklist.GetByDocumentAnswerAndMultiOption(multipleresponse_documentAnswerID, multipleresponse_Day3)[0];
            fields = dbHelper.documentAnswerChecklist.GetByID(documentAnswerCheckListID, "Checked");
            Assert.AreEqual(true, fields["checked"]);

            var numeric_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, numeric_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(numeric_documentAnswerID, "NumericAnswer");
            Assert.AreEqual(false, fields.ContainsKey("numericanswer"));

            var date_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, date_QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(date_documentAnswerID, "DateAnswer");
            Assert.AreEqual(false, fields.ContainsKey("dateanswer"));

        }

        [Test]
        [Property("JiraIssueID", "CDV6-11338")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - Remove all answers in Section 1.1 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are removed")]
        public void PersonAssessments_TestMethod018()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifiers
            var paragraph_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1239")[0];

            //get the answers
            var multiplechoice_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, paragraph_QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateParagraphAnswer(multiplechoice_documentAnswerID, "Value 1...");


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .InsertQuestionInputValue("QA-DQ-1239", "")

                .ClickSaveAndNextButton("QA-DS-307")
                .WaitForSectionToLoad("QA-DS-310");



            //get the answers
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(multiplechoice_documentAnswerID, "paragraphanswer");
            Assert.AreEqual(false, fields.ContainsKey("paragraphanswer"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11339")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - Remove all answers in Section 1.2 questions - " +
            "Click on the Save and Next button - Wait for the save operation - Validate that the answers are removed")]
        public void PersonAssessments_TestMethod019()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);


            var picklistvalue_Christian = new Guid("421B8762-4252-E911-A2C5-005056926FE4"); //Christian


            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            //get the Document Question Identifiers
            var picklist_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1240")[0];

            //set the answers
            var picklist_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, picklist_QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdatePicklistValueAnswer(picklist_documentAnswerID, picklistvalue_Christian);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ClickPicklistQuestion_ClearButton("QA-DQ-1240")

                .ClickSaveAndNextButton("QA-DS-307")
                .WaitForSectionToLoad("QA-DS-310");



            //get the answers
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(picklist_documentAnswerID, "PicklistValueId");
            Assert.AreEqual(false, fields.ContainsKey("picklistvalueid"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11340")]
        [Description("Open an In Progress person assessment record - Navigate to section 2 - Wait for the section to load - Remove all answers in Section 2 questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are removed")]
        public void PersonAssessments_TestMethod020()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);



            //get the Document Question Identifiers
            var shortanswer_QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1241")[0];

            //get the answers
            var shortanswer_documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, shortanswer_QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateShortAnswer(shortanswer_documentAnswerID, "Value 1 ...");



            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .InsertQuestionInputValue("QA-DQ-1241", "")

                .ClickSaveButton("QA-DS-310");


            //get the answers
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(shortanswer_documentAnswerID, "ShortAnswer");
            Assert.AreEqual(false, fields.ContainsKey("shortanswer"));
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11341")]
        [Description("Open an In Progress person assessment record - Navigate to section 2 - Wait for the section to load - Remove all answers in Section 2.1 boolean and time questions - " +
            "Click on the Save button - Wait for the save operation - Validate that the answers are removed")]
        public void PersonAssessments_TestMethod021()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);



            //get the Document Question Identifiers
            var QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1245")[0];

            //get the answers
            var documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateTrueFalseAnswer(documentAnswerID, true);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1247")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            dbHelper.documentAnswer.UpdateDateTimeAnswer(documentAnswerID, DateTime.Now.Date.AddHours(19).AddMinutes(35));


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ClickRadioButtonQuestionOption("QA-DQ-1245", "0")
                .InsertTimeQuestion("QA-DQ-1247", "")

                .ClickSaveButton("QA-DS-310");


            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1245")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            var fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "truefalseanswer");
            Assert.AreEqual(false, fields["truefalseanswer"]);



            //get the Document Question Identifiers
            QuestionIdentifierId = dbHelper.documentQuestionIdentifier.GetByIdentifier("QA-DQ-1247")[0];

            //get the answers
            documentAnswerID = dbHelper.documentAnswer.GetDocumentAnswer(assessmentid, QuestionIdentifierId)[0];
            fields = dbHelper.documentAnswer.GetDocumentAnswerByID(documentAnswerID, "dateandtimeanswer");
            Assert.AreEqual(false, fields.ContainsKey("dateandtimeanswer"));


        }

        [Test]
        [Property("JiraIssueID", "CDV6-11342")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - " +
            "Validate that questions instructions for the user are correctly displayed")]
        public void PersonAssessments_TestMethod022()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ValidateQuestionInstructionsVisibility("QA-DSQ-913", true)
                .ValidateQuestionInstructionsText("QA-DSQ-913", "Instructions for User Line 1\r\nInstructions for User Line 2")

                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateQuestionInstructionsVisibility("QA-DSQ-913", false)

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11343")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment record of type 'Automation - Portal - Person Form 1' ) - " +
            "Wait for the home page to load - Click on the View Person Assessment Button - Wait for the Assessment page to load - " +
            "Navigate to Section 2 - Click on the Submit Button - Validate that the 'Assessment submitted successfully.' message is displayed - " +
            "Validate that the Completed by and Completed On data is set for the assessment")]
        public void PersonAssessments_TestMethod023()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")

                .WaitForSectionToLoad("QA-DS-307")
                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ClickSubmitButton("QA-DS-310");

            warningDialog
                .WaitForWarningDialogToLoad()

                .ValidateDialogTitleVisibility(true)
                .ValidateDialogMessageVisibility(true)

                .ValidateDialogTitleText("Complete Assessment")
                .ValidateDialogMessageText("Are you sure you want to submit this Assessment? Please note that you won't be able to edit the Assessment after it has been submitted.")
                .ClickOkButton();

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .ValidateAlertMessageVisibility("Assessment submitted successfully.", true);

            mainMenu
                .WaitForMainMenuToLoad()
                .ClickMemberHomeLink();

            memberHomePage
                .WaitForMemberHomePageToLoad();

            var consumerPortalAdminSyystemUserId = new Guid("98677d27-532a-eb11-a2cd-005056926fe4"); //Consumer Portal Admin
            var fields = dbHelper.personForm.GetPersonFormByID(assessmentid, "completedbyid", "completiondate");
            Assert.AreEqual(consumerPortalAdminSyystemUserId, fields["completedbyid"]);
            Assert.AreEqual(DateTime.Now.Date, fields["completiondate"]);
        }



        [Test]
        [Property("JiraIssueID", "CDV6-11344")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automation - Portal - Person Form 1') - " +
            "Wait for the home page to load - Click on a View Person Assessment Button - Wait for the Assessment page to load - " +
            "Validate that the Section 1 title is displayed")]
        public void PersonAssessments_TestMethod024()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")

                .WaitForSectionToLoad("QA-DS-307")
                .ValidateSectionTitleText("QA-DS-307", "Section 1");
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11345")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automation - Portal - Person Form 1') - " +
            "Wait for the home page to load - Click on a View Person Assessment Button - Wait for the Assessment page to load - " +
            "Validate that all sub-sections titles (inside Section 1) are displayed")]
        public void PersonAssessments_TestMethod025()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")

                .WaitForSubSectionToLoad("QA-DS-308")
                .ValidateSubSectionTitleText("QA-DS-308", "Section 1.1")

                .WaitForSubSectionToLoad("QA-DS-309")
                .ValidateSubSectionTitleText("QA-DS-309", "Section 1.2")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11346")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automation - Portal - Person Form 1') - " +
            "Wait for the home page to load - Click on a View Person Assessment Button - Wait for the Assessment page to load - " +
            "Validate that the Section 1 Question titles are displayed")]
        public void PersonAssessments_TestMethod026()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")

                .WaitForSectionToLoad("QA-DS-307")

                .ValidateQuestionTitleText("QA-DSQ-912", "WF Multiple Choice")
                .ValidateQuestionTitleText("QA-DSQ-913", "WF Decimal")
                .ValidateQuestionTitleText("QA-DSQ-914", "WF Multiple Response")
                .ValidateQuestionTitleText("QA-DSQ-915", "WF Numeric")
                .ValidateQuestionTitleText("QA-DSQ-918", "WF Date")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11347")]
        [Description("Open Portal Website - Login with a portal website user (user has access to an assessment of type 'Automation - Portal - Person Form 1') - " +
            "Wait for the home page to load - Click on a View Person Assessment Button - Wait for the Assessment page to load - " +
            "Validate that the Sub Section 1.1 Question titles are displayed")]
        public void PersonAssessments_TestMethod027()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);

            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")

                .WaitForSubSectionToLoad("QA-DS-308")

                .ValidateSubSectionQuestionTitleText("QA-DSQ-919", "WF Paragraph")

                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11348")]
        [Description("Open Portal Website - Login with a portal website user - Wait for the home page to load - " +
            "Click on a View Assessment Button for an assessment that contains a print template with 'Valid for Print History on Close' = Yes - " +
            "Wait for the assessment page to load - tap on the View In PDF button - Validate that the PDF popup is displayed")]
        public void PersonAssessments_TestMethod028()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);


            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")
                .ClickSaveAndNextButton("QA-DS-307")
                .WaitForSectionToLoad("QA-DS-310")
                .ClickViewInPDFButton("QA-DS-310");

            var allWindowsHandles = this.GetAllWindows();
            Assert.AreEqual(2, allWindowsHandles.Count);

            var currentWindowHandle = this.GetCurrentWindow();
            var popupWindowHandle = allWindowsHandles.Where(c => !c.Equals(currentWindowHandle)).FirstOrDefault();
            this.SwitchWindow(popupWindowHandle);

            pdfPopupPage
                .WaitForPdfPopupPageToLoad();

            System.Threading.Thread.Sleep(3000);
            bool fileExists = fileIOHelper.ValidateIfFileExists(this.DownloadsDirectory, "download.pdf");
            Assert.IsTrue(fileExists);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-9086

        [Test]
        [Property("JiraIssueID", "CDV6-11349")]
        [Description("Login with a website user - Wait for the member home page to load - Validate that the My Consent widget is displayed")]
        public void PersonConsentWidget_TestMethod001()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad();
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11350")]
        [Description("Login with a website user - Wait for the member home page to load - Validate that only records marked with 'Available On Citizen Portal' are displayed")]
        public void PersonConsentWidget_TestMethod002()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ValidateMyConsentRecordVisibility(1, true)
                .ValidateMyConsentRecordVisibility(2, true)
                .ValidateMyConsentRecordVisibility(3, false)

                .ValidateMyConsentRecordNameVisibility(1, "CHIE", true)
                .ValidateMyConsentRecordNameVisibility(2, "All details", true);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11351")]
        [Description("Login with a website user - Wait for the member home page to load - Validate that by default the records are displayed collapsed")]
        public void PersonConsentWidget_TestMethod003()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ValidateMyConsentRecordConsentTypeVisibility(1, false)
                .ValidateMyConsentRecordStartDateVisibility(1, false)
                .ValidateMyConsentRecordEndDateVisibility(1, false)

                .ValidateMyConsentRecordConsentTypeVisibility(2, false)
                .ValidateMyConsentRecordStartDateVisibility(2, false)
                .ValidateMyConsentRecordEndDateVisibility(2, false);
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11352")]
        [Description("Login with a website user - Wait for the member home page to load - Expand a record that contains an end date - Validate that the additional information is displayed")]
        public void PersonConsentWidget_TestMethod004()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickOnMyConsentRecord(2)

                .ValidateMyConsentRecordNameVisibility(1, "CHIE", true)
                .ValidateMyConsentRecordConsentTypeVisibility(1, false)
                .ValidateMyConsentRecordStartDateVisibility(1, false)
                .ValidateMyConsentRecordEndDateVisibility(1, false)

                .ValidateMyConsentRecordNameVisibility(2, "All details", true)
                .ValidateMyConsentRecordConsentTypeVisibility(2, true)
                .ValidateMyConsentRecordStartDateVisibility(2, true)
                .ValidateMyConsentRecordEndDateVisibility(2, true)
                .ValidateMyConsentRecordConsentTypeText(2, "Consent Type: All details")
                .ValidateMyConsentRecordStartDateText(2, "Start Date: 03/05/2021")
                .ValidateMyConsentRecordEndDateText(2, "End Date: 23/05/2021")
                ;
        }

        [Test]
        [Property("JiraIssueID", "CDV6-11353")]
        [Description("Login with a website user - Wait for the member home page to load - Expand a record that do not contains an end date - Validate that the additional information is displayed")]
        public void PersonConsentWidget_TestMethod005()
        {
            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()

                .ClickOnMyConsentRecord(1)

                .ValidateMyConsentRecordNameVisibility(1, "CHIE", true)
                .ValidateMyConsentRecordConsentTypeVisibility(1, true)
                .ValidateMyConsentRecordStartDateVisibility(1, true)
                .ValidateMyConsentRecordEndDateVisibility(1, false)
                .ValidateMyConsentRecordConsentTypeText(1, "Consent Type: CHIE")
                .ValidateMyConsentRecordStartDateText(1, "Start Date: 24/05/2021")

                .ValidateMyConsentRecordNameVisibility(2, "All details", true)
                .ValidateMyConsentRecordConsentTypeVisibility(2, false)
                .ValidateMyConsentRecordStartDateVisibility(2, false)
                .ValidateMyConsentRecordEndDateVisibility(2, false);
        }

        #endregion

        #region https://advancedcsg.atlassian.net/browse/CDV6-10633

        [Test]
        [Property("JiraIssueID", "CDV6-11320")]
        [Description("Open an In Progress person assessment record - Wait for the first section to load - " +
            "Validate that question instructions for the user are correctly displayed")]
        public void InstructionTextForQuestion_TestMethod01()
        {
            var websiteid = new Guid("17623655-93be-ed11-a336-005056926fe4"); //StaffordshireCitizenPortalUser1@mail.com
            var documentid = new Guid("e8c08c9e-c2c2-eb11-a323-005056926fe4"); //Automation - Portal - Person Form 1
            var OwnerID = dbHelper.team.GetTeamIdByName("CareDirector QA")[0];
            var personID = new Guid("70d5ed5f-4126-4e49-920d-e5ba5ef99377"); //Spencer Bishop (90451)
            var startDate = new DateTime(2021, 3, 29);

            //Set website Email Verification Required to No
            dbHelper.website.UpdateAdministrationInformation(websiteid, false, false);

            //Reset two factor authentication for the website
            dbHelper.website.UpdateTwoFactorAuthenticationInfo(websiteid, false, null, null, null, null);

            //remove any matching case form
            foreach (var personformid in dbHelper.personForm.GetPersonFormByPersonID(personID))
                dbHelper.personForm.DeletePersonForm(personformid);

            //create a new case form record
            var assessmentid = dbHelper.personForm.CreatePersonForm(OwnerID, personID, documentid, startDate);




            homePage
                .GoToHomePage()
                .WaitForHomePageToLoad()
                .InsertUserName("StaffordshireCitizenPortalUser30@mail.com")
                .InsertPassword("Passw0rd_!")
                .ClickLoginButton();

            memberHomePage
                .WaitForMemberHomePageToLoad()
                .ClickPersonAssessmentViewDetailsButton(assessmentid.ToString());

            assessmentPage
                .WaitForAssessmentPageToLoad("Automation - Portal - Person Form 1")
                .WaitForSectionToLoad("QA-DS-307")

                .ValidateQuestionInstructionsVisibility("QA-DSQ-913", true)
                .ValidateQuestionInstructionsText("QA-DSQ-913", "Instructions for User Line 1\r\nInstructions for User Line 2")

                .ClickSectionLink("QA-DS-310")
                .WaitForSectionToLoad("QA-DS-310")

                .ValidateQuestionInstructionsVisibility("QA-DSQ-913", false);
        }

        #endregion


       
        [Description("Method will return the name of all tests and the Description of each one")]
        [Test]
        public void GetTestNames()
        {
            this.GetAllTestNamesAndDescriptions();
        }

    }
}
