using CareWorks.Foundation.Enums;
using System;
using System.Collections.Generic;

namespace Phoenix.DBHelper.Models
{
    public class UserTransportationSchedule : BaseClass
    {

        public string TableName = "UserTransportationSchedule";
        public string PrimaryKeyName = "UserTransportationScheduleId";


        public UserTransportationSchedule()
        {
            AuthenticateUser();
        }

        public UserTransportationSchedule(CareDirector.Sdk.ServiceResponse.AuthenticateResponse AuthenticationData)
        {
            SetServiceConnectionDataFromAuthenticationResponse(AuthenticationData);
        }

        public Guid CreateUserTransportationSchedule(Guid OwnerId, Guid ApplicantId, DateTime StartDate, TimeSpan StartTime, TimeSpan EndTime, Guid RecurrencePatternId, Guid TransportTypeId, int WeekNumber)
        {
            var buisinessDataObject = GetBusinessDataBaseObject(TableName, PrimaryKeyName);

            AddFieldToBusinessDataObject(buisinessDataObject, "OwnerId", OwnerId);
            AddFieldToBusinessDataObject(buisinessDataObject, "ApplicantId", ApplicantId);
            AddFieldToBusinessDataObject(buisinessDataObject, "StartDate", StartDate);
            AddFieldToBusinessDataObject(buisinessDataObject, "StartTime", StartTime);
            AddFieldToBusinessDataObject(buisinessDataObject, "EndTime", EndTime);
            AddFieldToBusinessDataObject(buisinessDataObject, "RecurrencePatternId", RecurrencePatternId);
            AddFieldToBusinessDataObject(buisinessDataObject, "TransportTypeId", TransportTypeId);
            AddFieldToBusinessDataObject(buisinessDataObject, "WeekNumber", WeekNumber);

            AddFieldToBusinessDataObject(buisinessDataObject, "title", "AutoGenerated");
            AddFieldToBusinessDataObject(buisinessDataObject, "AdHoc", false);
            AddFieldToBusinessDataObject(buisinessDataObject, "Inactive", false);


            return this.CreateRecord(buisinessDataObject);
        }

        public Guid CreateSystemUserTransportationSchedule(Guid OwnerId, Guid systemuserId, string Title, DateTime StartDate, DateTime? EndDate, TimeSpan StartTime, TimeSpan EndTime, Guid RecurrencePatternId, Guid TransportTypeId, int WeekNumber = 1, bool AdHoc = false)
        {
            var buisinessDataObject = GetBusinessDataBaseObject(TableName, PrimaryKeyName);

            AddFieldToBusinessDataObject(buisinessDataObject, "OwnerId", OwnerId);
            AddFieldToBusinessDataObject(buisinessDataObject, "systemuserId", systemuserId);
            AddFieldToBusinessDataObject(buisinessDataObject, "Title", Title);
            AddFieldToBusinessDataObject(buisinessDataObject, "StartDate", StartDate);
            AddFieldToBusinessDataObject(buisinessDataObject, "EndDate", EndDate);
            AddFieldToBusinessDataObject(buisinessDataObject, "StartTime", StartTime);
            AddFieldToBusinessDataObject(buisinessDataObject, "EndTime", EndTime);
            AddFieldToBusinessDataObject(buisinessDataObject, "RecurrencePatternId", RecurrencePatternId);
            AddFieldToBusinessDataObject(buisinessDataObject, "TransportTypeId", TransportTypeId);
            AddFieldToBusinessDataObject(buisinessDataObject, "WeekNumber", WeekNumber);

            AddFieldToBusinessDataObject(buisinessDataObject, "AdHoc", AdHoc);
            AddFieldToBusinessDataObject(buisinessDataObject, "Inactive", false);


            return this.CreateRecord(buisinessDataObject);
        }

        public List<Guid> GetByApplicantID(Guid ApplicantId)
        {
            var query = this.GetDataQueryObject(TableName, false, PrimaryKeyName);

            this.AddReturnField(query, TableName, PrimaryKeyName);

            this.BaseClassAddTableCondition(query, "ApplicantId", ConditionOperatorType.Equal, ApplicantId);

            return ExecuteDataQueryAndExtractGuidFields(query, PrimaryKeyName);
        }

        public List<Guid> GetBySystemUsertID(Guid systemuserId)
        {
            var query = this.GetDataQueryObject(TableName, false, PrimaryKeyName);

            this.AddReturnField(query, TableName, PrimaryKeyName);

            this.BaseClassAddTableCondition(query, "systemuserId", ConditionOperatorType.Equal, systemuserId);

            return ExecuteDataQueryAndExtractGuidFields(query, PrimaryKeyName);
        }

        public List<Guid> GetUserTransportScheduleIdByApplicantIDAndTransportTypeId(Guid ApplicantId, Guid TransportTypeId)
        {
            var query = this.GetDataQueryObject(TableName, false, PrimaryKeyName);
            this.AddReturnField(query, TableName, PrimaryKeyName);

            this.BaseClassAddTableCondition(query, "ApplicantId", ConditionOperatorType.Equal, ApplicantId);
            this.BaseClassAddTableCondition(query, "TransportTypeId", ConditionOperatorType.Equal, TransportTypeId);

            return ExecuteDataQueryAndExtractGuidFields(query, PrimaryKeyName);
        }

        public Dictionary<string, object> GetUserTransportationScheduleByID(Guid UserTransportationScheduleId, params string[] FieldsToReturn)
        {
            var query = this.GetDataQueryObject(TableName, false, PrimaryKeyName);

            this.AddReturnFields(query, TableName, FieldsToReturn);

            this.BaseClassAddTableCondition(query, PrimaryKeyName, ConditionOperatorType.Equal, UserTransportationScheduleId);

            return ExecuteDataQueryAndExtractFirstResultFields(query);
        }

        public Dictionary<string, object> GetUserTransportationScheduleByApplicantID(Guid ApplicantId, params string[] FieldsToReturn)
        {
            var query = this.GetDataQueryObject(TableName, false, PrimaryKeyName);

            this.AddReturnFields(query, TableName, FieldsToReturn);

            this.BaseClassAddTableCondition(query, PrimaryKeyName, ConditionOperatorType.Equal, ApplicantId);

            return ExecuteDataQueryAndExtractFirstResultFields(query);
        }

        public void DeleteUserTransportationSchedule(Guid UserTransportationScheduleId)
        {
            this.DeleteRecord(TableName, UserTransportationScheduleId);
        }


        public void UpdateTransportType(Guid ApplicantId, Guid TransportTypeId)
        {
            var buisinessDataObject = GetBusinessDataBaseObject("UserTransportationSchedule", "UserTransportationScheduleId");

            AddFieldToBusinessDataObject(buisinessDataObject, "ApplicantId", ApplicantId);
            AddFieldToBusinessDataObject(buisinessDataObject, "TransportTypeId", TransportTypeId);

            UpdateRecord(buisinessDataObject);
        }

        public List<Guid> GetUserTransportationScheduleIdBySystemUserId(Guid SystemUserId)
        {
            var query = this.GetDataQueryObject(TableName, false, PrimaryKeyName);
            this.AddReturnField(query, TableName, PrimaryKeyName);
            this.BaseClassAddTableCondition(query, "SystemUserId", ConditionOperatorType.Equal, SystemUserId);

            return ExecuteDataQueryAndExtractGuidFields(query, PrimaryKeyName);
        }

        public List<Guid> GetUserTransportationScheduleBySystemUserIdAndTransportTypeId(Guid SystemUserId, Guid TransportTypeId)
        {
            var query = this.GetDataQueryObject(TableName, false, PrimaryKeyName);
            this.AddReturnField(query, TableName, PrimaryKeyName);

            this.BaseClassAddTableCondition(query, "SystemUserId", ConditionOperatorType.Equal, SystemUserId);
            this.BaseClassAddTableCondition(query, "TransportTypeId", ConditionOperatorType.Equal, TransportTypeId);

            return ExecuteDataQueryAndExtractGuidFields(query, PrimaryKeyName);
        }

        public List<Guid> GetUserTransportationScheduleBySystemUserId_TransportTypeId_AdHoc(Guid SystemUserId, Guid TransportTypeId, int AdHoc)
        {
            var query = this.GetDataQueryObject(TableName, false, PrimaryKeyName);
            this.AddReturnField(query, TableName, PrimaryKeyName);

            this.BaseClassAddTableCondition(query, "SystemUserId", ConditionOperatorType.Equal, SystemUserId);
            this.BaseClassAddTableCondition(query, "TransportTypeId", ConditionOperatorType.Equal, TransportTypeId);
            this.BaseClassAddTableCondition(query, "AdHoc", ConditionOperatorType.Equal, AdHoc);

            return ExecuteDataQueryAndExtractGuidFields(query, PrimaryKeyName);
        }
    }
}
